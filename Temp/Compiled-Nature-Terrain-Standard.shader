// Compiled shader for PC, Mac & Linux Standalone

//////////////////////////////////////////////////////////////////////////
// 
// NOTE: This is *not* a valid shader file, the contents are provided just
// for information and for debugging purposes only.
// 
//////////////////////////////////////////////////////////////////////////
// Skipping shader variants that would not be included into build of current scene.

Shader "Nature/Terrain/Standard" {
Properties {
[HideInInspector]  _Control ("Control (RGBA)", 2D) = "red" { }
[HideInInspector]  _Splat3 ("Layer 3 (A)", 2D) = "white" { }
[HideInInspector]  _Splat2 ("Layer 2 (B)", 2D) = "white" { }
[HideInInspector]  _Splat1 ("Layer 1 (G)", 2D) = "white" { }
[HideInInspector]  _Splat0 ("Layer 0 (R)", 2D) = "white" { }
[HideInInspector]  _Normal3 ("Normal 3 (A)", 2D) = "bump" { }
[HideInInspector]  _Normal2 ("Normal 2 (B)", 2D) = "bump" { }
[HideInInspector]  _Normal1 ("Normal 1 (G)", 2D) = "bump" { }
[HideInInspector]  _Normal0 ("Normal 0 (R)", 2D) = "bump" { }
[HideInInspector] [Gamma]  _Metallic0 ("Metallic 0", Range(0.000000,1.000000)) = 0.000000
[HideInInspector] [Gamma]  _Metallic1 ("Metallic 1", Range(0.000000,1.000000)) = 0.000000
[HideInInspector] [Gamma]  _Metallic2 ("Metallic 2", Range(0.000000,1.000000)) = 0.000000
[HideInInspector] [Gamma]  _Metallic3 ("Metallic 3", Range(0.000000,1.000000)) = 0.000000
[HideInInspector]  _Smoothness0 ("Smoothness 0", Range(0.000000,1.000000)) = 1.000000
[HideInInspector]  _Smoothness1 ("Smoothness 1", Range(0.000000,1.000000)) = 1.000000
[HideInInspector]  _Smoothness2 ("Smoothness 2", Range(0.000000,1.000000)) = 1.000000
[HideInInspector]  _Smoothness3 ("Smoothness 3", Range(0.000000,1.000000)) = 1.000000
[HideInInspector]  _MainTex ("BaseMap (RGB)", 2D) = "white" { }
[HideInInspector]  _Color ("Main Color", Color) = (1.000000,1.000000,1.000000,1.000000)
}
SubShader { 
 Tags { "QUEUE"="Geometry-100" "RenderType"="Opaque" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="FORWARDBASE" "QUEUE"="Geometry-100" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL 
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (336 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 64
  Matrix4x4 unity_WorldToObject at 128
  Matrix4x4 unity_MatrixVP at 192
  Vector4 unity_SHBr at 0
  Vector4 unity_SHBg at 16
  Vector4 unity_SHBb at 32
  Vector4 unity_SHC at 48
  Vector4 _Control_ST at 256
  Vector4 _Splat0_ST at 272
  Vector4 _Splat1_ST at 288
  Vector4 _Splat2_ST at 304
  Vector4 _Splat3_ST at 320
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD7 [[ user(TEXCOORD7) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD3.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat0.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD2.xyz = u_xlat0.xyz;
    output.TEXCOORD4.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    u_xlat6 = u_xlat0.y * u_xlat0.y;
    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(Globals.unity_SHBr, u_xlat1);
    u_xlat0.y = dot(Globals.unity_SHBg, u_xlat1);
    u_xlat0.z = dot(Globals.unity_SHBb, u_xlat1);
    output.TEXCOORD5.xyz = Globals.unity_SHC.xyz * float3(u_xlat6) + u_xlat0.xyz;
    output.TEXCOORD7 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 2
Set 2D Texture "_Splat0" to slot 1 sampler slot 3
Set 2D Texture "_Splat1" to slot 2 sampler slot 4
Set 2D Texture "_Splat2" to slot 3 sampler slot 5
Set 2D Texture "_Splat3" to slot 4 sampler slot 6
Set CUBE Texture "unity_SpecCube0" to slot 5 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 6 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 1

Constant Buffer "Globals" (384 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 240
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 unity_SpecCube0_BoxMax at 96
  Vector4 unity_SpecCube0_BoxMin at 112
  Vector4 unity_SpecCube0_ProbePosition at 128
  Vector4 unity_SpecCube0_HDR at 144
  Vector4 unity_SpecCube1_BoxMax at 160
  Vector4 unity_SpecCube1_BoxMin at 176
  Vector4 unity_SpecCube1_ProbePosition at 192
  Vector4 unity_SpecCube1_HDR at 208
  Vector4 unity_ProbeVolumeParams at 224
  Vector3 unity_ProbeVolumeSizeInv at 304
  Vector3 unity_ProbeVolumeMin at 320
  Vector4 _LightColor0 at 336
  Float _Metallic0 at 352
  Float _Metallic1 at 356
  Float _Metallic2 at 360
  Float _Metallic3 at 364
  Float _Smoothness0 at 368
  Float _Smoothness1 at 372
  Float _Smoothness2 at 376
  Float _Smoothness3 at 380
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    texture2d<float, access::sample > _Control [[ texture (0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture (2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture (3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture (4) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture (5) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture (6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float3 u_xlat1;
    bool u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    half4 u_xlat10_4;
    float3 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float3 u_xlat10;
    bool3 u_xlatb10;
    float3 u_xlat11;
    bool3 u_xlatb12;
    float3 u_xlat13;
    float u_xlat14;
    float u_xlat15;
    bool u_xlatb15;
    float u_xlat26;
    float u_xlat27;
    float u_xlat28;
    bool u_xlatb28;
    float u_xlat39;
    float u_xlat40;
    float u_xlat41;
    float u_xlat43;
    bool u_xlatb43;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat2 = _Control.sample(sampler_Control, input.TEXCOORD4.xy);
    u_xlat40 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat40 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3 = _Splat0.sample(sampler_Splat0, input.TEXCOORD0.xy);
    u_xlat3 = u_xlat2.xxxx * u_xlat3;
    u_xlat3.w = u_xlat3.w * Globals._Smoothness0;
    u_xlat10_4 = half4(_Splat1.sample(sampler_Splat1, input.TEXCOORD0.zw));
    u_xlat4 = u_xlat2.yyyy * float4(u_xlat10_4);
    u_xlat4.w = u_xlat4.w * Globals._Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = half4(_Splat2.sample(sampler_Splat2, input.TEXCOORD1.xy));
    u_xlat4 = u_xlat2.zzzz * float4(u_xlat10_4);
    u_xlat4.w = u_xlat4.w * Globals._Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = half4(_Splat3.sample(sampler_Splat3, input.TEXCOORD1.zw));
    u_xlat4 = u_xlat2.wwww * float4(u_xlat10_4);
    u_xlat4.w = u_xlat4.w * Globals._Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat2.x = dot(u_xlat2, float4(Globals._Metallic0, Globals._Metallic1, Globals._Metallic2, Globals._Metallic3));
    u_xlatb15 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb15){
        u_xlatb28 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD3.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD3.xxx + u_xlat4.xyz;
        u_xlat4.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD3.zzz + u_xlat4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb28)) ? u_xlat4.xyz : input.TEXCOORD3.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat28 = u_xlat4.y * 0.25 + 0.75;
        u_xlat41 = Globals.unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat4.x = max(u_xlat41, u_xlat28);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat28 = dot(u_xlat4, Globals.unity_OcclusionMaskSelector);
    u_xlat28 = clamp(u_xlat28, 0.0f, 1.0f);
    u_xlat41 = (-u_xlat3.w) + 1.0;
    u_xlat4.x = dot((-u_xlat1.xyz), input.TEXCOORD2.xyz);
    u_xlat4.x = u_xlat4.x + u_xlat4.x;
    u_xlat4.xyz = input.TEXCOORD2.xyz * (-u_xlat4.xxx) + (-u_xlat1.xyz);
    u_xlat5.xyz = float3(u_xlat28) * Globals._LightColor0.xyz;
    if(u_xlatb15){
        u_xlatb15 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD3.xxx + u_xlat6.xyz;
        u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD3.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb15)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat15 = u_xlat6.y * 0.25;
        u_xlat28 = Globals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat43 = (-Globals.unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat15 = max(u_xlat28, u_xlat15);
        u_xlat6.x = min(u_xlat43, u_xlat15);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
        u_xlat8.xyz = u_xlat6.xzw + float3(0.25, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xyz);
        u_xlat6.xyz = u_xlat6.xzw + float3(0.5, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xyz);
        u_xlat9.xyz = input.TEXCOORD2.xyz;
        u_xlat9.w = 1.0;
        u_xlat7.x = dot(u_xlat7, u_xlat9);
        u_xlat7.y = dot(u_xlat8, u_xlat9);
        u_xlat7.z = dot(u_xlat6, u_xlat9);
    } else {
        u_xlat6.xyz = input.TEXCOORD2.xyz;
        u_xlat6.w = 1.0;
        u_xlat7.x = dot(Globals.unity_SHAr, u_xlat6);
        u_xlat7.y = dot(Globals.unity_SHAg, u_xlat6);
        u_xlat7.z = dot(Globals.unity_SHAb, u_xlat6);
    }
    u_xlat6.xyz = u_xlat7.xyz + input.TEXCOORD5.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlat6.xyz = log2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(1.05499995, 1.05499995, 1.05499995) + float3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb15 = 0.0<Globals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb15){
        u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat15 = rsqrt(u_xlat15);
        u_xlat7.xyz = float3(u_xlat15) * u_xlat4.xyz;
        u_xlat8.xyz = (-input.TEXCOORD3.xyz) + Globals.unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-input.TEXCOORD3.xyz) + Globals.unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = (float3(0.0, 0.0, 0.0)<u_xlat7.xyz);
        u_xlat8.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
        u_xlat8.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
        u_xlat8.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
        u_xlat15 = min(u_xlat8.y, u_xlat8.x);
        u_xlat15 = min(u_xlat8.z, u_xlat15);
        u_xlat8.xyz = input.TEXCOORD3.xyz + (-Globals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = u_xlat7.xyz * float3(u_xlat15) + u_xlat8.xyz;
    } else {
        u_xlat7.xyz = u_xlat4.xyz;
    }
    u_xlat15 = (-u_xlat41) * 0.699999988 + 1.70000005;
    u_xlat15 = u_xlat15 * u_xlat41;
    u_xlat15 = u_xlat15 * 6.0;
    u_xlat7 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat7.xyz, level(u_xlat15));
    u_xlat28 = u_xlat7.w + -1.0;
    u_xlat28 = Globals.unity_SpecCube0_HDR.w * u_xlat28 + 1.0;
    u_xlat28 = u_xlat28 * Globals.unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * float3(u_xlat28);
    u_xlatb43 = Globals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<Globals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat43 = rsqrt(u_xlat43);
            u_xlat9.xyz = float3(u_xlat43) * u_xlat4.xyz;
            u_xlat10.xyz = (-input.TEXCOORD3.xyz) + Globals.unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-input.TEXCOORD3.xyz) + Globals.unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = (float3(0.0, 0.0, 0.0)<u_xlat9.xyz);
            u_xlat10.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
            u_xlat10.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
            u_xlat10.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
            u_xlat43 = min(u_xlat10.y, u_xlat10.x);
            u_xlat43 = min(u_xlat10.z, u_xlat43);
            u_xlat10.xyz = input.TEXCOORD3.xyz + (-Globals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = u_xlat9.xyz * float3(u_xlat43) + u_xlat10.xyz;
        }
        u_xlat4 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat4.xyz, level(u_xlat15));
        u_xlat15 = u_xlat4.w + -1.0;
        u_xlat15 = Globals.unity_SpecCube1_HDR.w * u_xlat15 + 1.0;
        u_xlat15 = u_xlat15 * Globals.unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * float3(u_xlat15);
        u_xlat7.xyz = float3(u_xlat28) * u_xlat7.xyz + (-u_xlat4.xyz);
        u_xlat8.xyz = Globals.unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat4.xyz;
    }
    u_xlat15 = dot(input.TEXCOORD2.xyz, input.TEXCOORD2.xyz);
    u_xlat15 = rsqrt(u_xlat15);
    u_xlat4.xyz = float3(u_xlat15) * input.TEXCOORD2.xyz;
    u_xlat7.xyz = u_xlat3.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz + float3(0.220916301, 0.220916301, 0.220916301);
    u_xlat2.x = (-u_xlat2.x) * 0.779083729 + 0.779083729;
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat39) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat0.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat0.x = dot(Globals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, float2(u_xlat41));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat27 = u_xlat26 * u_xlat26;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat26 = u_xlat26 * u_xlat27;
    u_xlat26 = u_xlat13.x * u_xlat26 + 1.0;
    u_xlat27 = -abs(u_xlat39) + 1.0;
    u_xlat15 = u_xlat27 * u_xlat27;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat27 = u_xlat27 * u_xlat15;
    u_xlat13.x = u_xlat13.x * u_xlat27 + 1.0;
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat41 * u_xlat41;
    u_xlat15 = (-u_xlat41) * u_xlat41 + 1.0;
    u_xlat28 = abs(u_xlat39) * u_xlat15 + u_xlat26;
    u_xlat15 = u_xlat1.x * u_xlat15 + u_xlat26;
    u_xlat39 = abs(u_xlat39) * u_xlat15;
    u_xlat39 = u_xlat1.x * u_xlat28 + u_xlat39;
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat15 = u_xlat26 * u_xlat26;
    u_xlat28 = u_xlat14 * u_xlat15 + (-u_xlat14);
    u_xlat14 = u_xlat28 * u_xlat14 + 1.0;
    u_xlat15 = u_xlat15 * 0.318309873;
    u_xlat14 = u_xlat14 * u_xlat14 + 1.00000001e-07;
    u_xlat14 = u_xlat15 / u_xlat14;
    u_xlat39 = u_xlat39 * u_xlat14;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat13.z = sqrt(u_xlat39);
    u_xlat13.xz = u_xlat1.xx * u_xlat13.xz;
    u_xlat26 = u_xlat26 * u_xlat41;
    u_xlat26 = (-u_xlat26) * 0.280000001 + 1.0;
    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat13.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat2.x) + u_xlat3.w;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat2.xyz = u_xlat5.xyz * u_xlat13.xxx + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat5.xyz * float3(u_xlat39);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat0.x = u_xlat0.x * u_xlat13.x;
    u_xlat5.xyz = (-u_xlat7.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = u_xlat5.xyz * u_xlat0.xxx + u_xlat7.xyz;
    u_xlat0.xyw = u_xlat0.xyw * u_xlat4.xyz;
    u_xlat0.xyw = u_xlat3.xyz * u_xlat2.xyz + u_xlat0.xyw;
    u_xlat2.xyz = u_xlat8.xyz * float3(u_xlat26);
    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = float3(u_xlat27) * u_xlat3.xyz + u_xlat7.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyw;
    output.SV_Target0.xyz = float3(u_xlat40) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
out vec2 vs_TEXCOORD6;
out vec3 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
    u_xlat6 = u_xlat0.y * u_xlat0.y;
    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(unity_SHBr, u_xlat1);
    u_xlat0.y = dot(unity_SHBg, u_xlat1);
    u_xlat0.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  samplerCube unity_SpecCube0;
uniform  samplerCube unity_SpecCube1;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat16_2;
vec4 u_xlat10_2;
vec4 u_xlat3;
float u_xlat16_3;
vec4 u_xlat10_3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat10_6;
vec3 u_xlat7;
vec4 u_xlat10_7;
vec3 u_xlat8;
vec4 u_xlat10_8;
vec4 u_xlat9;
vec3 u_xlat10;
bvec3 u_xlatb10;
vec3 u_xlat11;
bvec3 u_xlatb12;
vec3 u_xlat13;
float u_xlat14;
float u_xlat15;
float u_xlat16_15;
bool u_xlatb15;
float u_xlat26;
float u_xlat27;
float u_xlat28;
float u_xlat16_28;
bool u_xlatb28;
float u_xlat39;
float u_xlat16_40;
float u_xlat41;
float u_xlat43;
bool u_xlatb43;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat1.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat10_2 = texture(_Control, vs_TEXCOORD4.xy);
    u_xlat16_40 = dot(u_xlat10_2, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = u_xlat16_40 + 0.00100000005;
    u_xlat16_2 = u_xlat10_2 / vec4(u_xlat16_3);
    u_xlat10_3 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat3 = u_xlat16_2.xxxx * u_xlat10_3;
    u_xlat3.w = u_xlat3.w * _Smoothness0;
    u_xlat10_4 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat4 = u_xlat16_2.yyyy * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat4 = u_xlat16_2.zzzz * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat4 = u_xlat16_2.wwww * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat2.x = dot(u_xlat16_2, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb15){
        u_xlatb28 = unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb28)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat28 = u_xlat4.y * 0.25 + 0.75;
        u_xlat41 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat4.x = max(u_xlat41, u_xlat28);
        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    //ENDIF
    }
    u_xlat28 = dot(u_xlat4, unity_OcclusionMaskSelector);
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
    u_xlat41 = (-u_xlat3.w) + 1.0;
    u_xlat4.x = dot((-u_xlat1.xyz), vs_TEXCOORD2.xyz);
    u_xlat4.x = u_xlat4.x + u_xlat4.x;
    u_xlat4.xyz = vs_TEXCOORD2.xyz * (-u_xlat4.xxx) + (-u_xlat1.xyz);
    u_xlat5.xyz = vec3(u_xlat28) * _LightColor0.xyz;
    if(u_xlatb15){
        u_xlatb15 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb15)) ? u_xlat6.xyz : vs_TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat15 = u_xlat6.y * 0.25;
        u_xlat28 = unity_ProbeVolumeParams.z * 0.5;
        u_xlat43 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat15 = max(u_xlat28, u_xlat15);
        u_xlat6.x = min(u_xlat43, u_xlat15);
        u_xlat10_7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
        u_xlat8.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
        u_xlat6.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
        u_xlat9.xyz = vs_TEXCOORD2.xyz;
        u_xlat9.w = 1.0;
        u_xlat7.x = dot(u_xlat10_7, u_xlat9);
        u_xlat7.y = dot(u_xlat10_8, u_xlat9);
        u_xlat7.z = dot(u_xlat10_6, u_xlat9);
    } else {
        u_xlat6.xyz = vs_TEXCOORD2.xyz;
        u_xlat6.w = 1.0;
        u_xlat7.x = dot(unity_SHAr, u_xlat6);
        u_xlat7.y = dot(unity_SHAg, u_xlat6);
        u_xlat7.z = dot(unity_SHAb, u_xlat6);
    //ENDIF
    }
    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD5.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat6.xyz = log2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb15 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb15){
        u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat15 = inversesqrt(u_xlat15);
        u_xlat7.xyz = vec3(u_xlat15) * u_xlat4.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
        u_xlat8.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
        u_xlat8.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
        u_xlat8.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
        u_xlat15 = min(u_xlat8.y, u_xlat8.x);
        u_xlat15 = min(u_xlat8.z, u_xlat15);
        u_xlat8.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat15) + u_xlat8.xyz;
    } else {
        u_xlat7.xyz = u_xlat4.xyz;
    //ENDIF
    }
    u_xlat15 = (-u_xlat41) * 0.699999988 + 1.70000005;
    u_xlat15 = u_xlat15 * u_xlat41;
    u_xlat15 = u_xlat15 * 6.0;
    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat15);
    u_xlat16_28 = u_xlat10_7.w + -1.0;
    u_xlat28 = unity_SpecCube0_HDR.w * u_xlat16_28 + 1.0;
    u_xlat28 = u_xlat28 * unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat10_7.xyz * vec3(u_xlat28);
    u_xlatb43 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat43 = inversesqrt(u_xlat43);
            u_xlat9.xyz = vec3(u_xlat43) * u_xlat4.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
            u_xlat10.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
            u_xlat10.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
            u_xlat10.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
            u_xlat43 = min(u_xlat10.y, u_xlat10.x);
            u_xlat43 = min(u_xlat10.z, u_xlat43);
            u_xlat10.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = u_xlat9.xyz * vec3(u_xlat43) + u_xlat10.xyz;
        //ENDIF
        }
        u_xlat10_4 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat15);
        u_xlat16_15 = u_xlat10_4.w + -1.0;
        u_xlat15 = unity_SpecCube1_HDR.w * u_xlat16_15 + 1.0;
        u_xlat15 = u_xlat15 * unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat10_4.xyz * vec3(u_xlat15);
        u_xlat7.xyz = vec3(u_xlat28) * u_xlat10_7.xyz + (-u_xlat4.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat4.xyz;
    //ENDIF
    }
    u_xlat15 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD2.xyz;
    u_xlat7.xyz = u_xlat3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat2.x = (-u_xlat2.x) * 0.779083729 + 0.779083729;
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, vec2(u_xlat41));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat27 = u_xlat26 * u_xlat26;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat26 = u_xlat26 * u_xlat27;
    u_xlat26 = u_xlat13.x * u_xlat26 + 1.0;
    u_xlat27 = -abs(u_xlat39) + 1.0;
    u_xlat15 = u_xlat27 * u_xlat27;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat27 = u_xlat27 * u_xlat15;
    u_xlat13.x = u_xlat13.x * u_xlat27 + 1.0;
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat41 * u_xlat41;
    u_xlat15 = (-u_xlat41) * u_xlat41 + 1.0;
    u_xlat28 = abs(u_xlat39) * u_xlat15 + u_xlat26;
    u_xlat15 = u_xlat1.x * u_xlat15 + u_xlat26;
    u_xlat39 = abs(u_xlat39) * u_xlat15;
    u_xlat39 = u_xlat1.x * u_xlat28 + u_xlat39;
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat15 = u_xlat26 * u_xlat26;
    u_xlat28 = u_xlat14 * u_xlat15 + (-u_xlat14);
    u_xlat14 = u_xlat28 * u_xlat14 + 1.0;
    u_xlat15 = u_xlat15 * 0.318309873;
    u_xlat14 = u_xlat14 * u_xlat14 + 1.00000001e-07;
    u_xlat14 = u_xlat15 / u_xlat14;
    u_xlat39 = u_xlat39 * u_xlat14;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat13.z = sqrt(u_xlat39);
    u_xlat13.xz = u_xlat1.xx * u_xlat13.xz;
    u_xlat26 = u_xlat26 * u_xlat41;
    u_xlat26 = (-u_xlat26) * 0.280000001 + 1.0;
    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat13.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat2.x) + u_xlat3.w;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat2.xyz = u_xlat5.xyz * u_xlat13.xxx + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat39);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat0.x = u_xlat0.x * u_xlat13.x;
    u_xlat5.xyz = (-u_xlat7.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyw = u_xlat5.xyz * u_xlat0.xxx + u_xlat7.xyz;
    u_xlat0.xyw = u_xlat0.xyw * u_xlat4.xyz;
    u_xlat0.xyw = u_xlat3.xyz * u_xlat2.xyz + u_xlat0.xyw;
    u_xlat2.xyz = u_xlat8.xyz * vec3(u_xlat26);
    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat7.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyw;
    SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL SHADOWS_SCREEN 
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (352 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 80
  Matrix4x4 unity_WorldToObject at 144
  Matrix4x4 unity_MatrixVP at 208
  Vector4 _ProjectionParams at 0
  Vector4 unity_SHBr at 16
  Vector4 unity_SHBg at 32
  Vector4 unity_SHBb at 48
  Vector4 unity_SHC at 64
  Vector4 _Control_ST at 272
  Vector4 _Splat0_ST at 288
  Vector4 _Splat1_ST at 304
  Vector4 _Splat2_ST at 320
  Vector4 _Splat3_ST at 336
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 _ProjectionParams;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float4 TEXCOORD7 [[ user(TEXCOORD7) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat10;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD3.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    output.mtl_Position = u_xlat0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    u_xlat1.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = rsqrt(u_xlat10);
    u_xlat1.xyz = float3(u_xlat10) * u_xlat1.xyz;
    output.TEXCOORD2.xyz = u_xlat1.xyz;
    output.TEXCOORD4.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    u_xlat10 = u_xlat1.y * u_xlat1.y;
    u_xlat10 = u_xlat1.x * u_xlat1.x + (-u_xlat10);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat1.x = dot(Globals.unity_SHBr, u_xlat2);
    u_xlat1.y = dot(Globals.unity_SHBg, u_xlat2);
    u_xlat1.z = dot(Globals.unity_SHBb, u_xlat2);
    output.TEXCOORD5.xyz = Globals.unity_SHC.xyz * float3(u_xlat10) + u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * Globals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD6.zw = u_xlat0.zw;
    output.TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    output.TEXCOORD7 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_ShadowMapTexture" to slot 5 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 6 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 7 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 8 sampler slot 1

Constant Buffer "Globals" (480 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 128
  Matrix4x4 unity_ProbeVolumeWorldToObject at 336
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 _LightShadowData at 96
  Vector4 unity_ShadowFadeCenterAndType at 112
  Vector4 unity_SpecCube0_BoxMax at 192
  Vector4 unity_SpecCube0_BoxMin at 208
  Vector4 unity_SpecCube0_ProbePosition at 224
  Vector4 unity_SpecCube0_HDR at 240
  Vector4 unity_SpecCube1_BoxMax at 256
  Vector4 unity_SpecCube1_BoxMin at 272
  Vector4 unity_SpecCube1_ProbePosition at 288
  Vector4 unity_SpecCube1_HDR at 304
  Vector4 unity_ProbeVolumeParams at 320
  Vector3 unity_ProbeVolumeSizeInv at 400
  Vector3 unity_ProbeVolumeMin at 416
  Vector4 _LightColor0 at 432
  Float _Metallic0 at 448
  Float _Metallic1 at 452
  Float _Metallic2 at 456
  Float _Metallic3 at 460
  Float _Smoothness0 at 464
  Float _Smoothness1 at 468
  Float _Smoothness2 at 472
  Float _Smoothness3 at 476
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    texture2d<float, access::sample > _Control [[ texture (0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture (2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture (3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture (4) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture (5) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture (6) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture (7) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float3 u_xlat1;
    bool u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    half4 u_xlat10_4;
    float3 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float3 u_xlat10;
    bool3 u_xlatb10;
    float3 u_xlat11;
    bool3 u_xlatb12;
    float3 u_xlat13;
    float u_xlat14;
    float u_xlat15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat26;
    float u_xlat27;
    float u_xlat28;
    bool u_xlatb28;
    float u_xlat39;
    float u_xlat40;
    float u_xlat41;
    bool u_xlatb41;
    float u_xlat43;
    bool u_xlatb43;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat2 = _Control.sample(sampler_Control, input.TEXCOORD4.xy);
    u_xlat40 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat40 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3 = _Splat0.sample(sampler_Splat0, input.TEXCOORD0.xy);
    u_xlat3 = u_xlat2.xxxx * u_xlat3;
    u_xlat3.w = u_xlat3.w * Globals._Smoothness0;
    u_xlat10_4 = half4(_Splat1.sample(sampler_Splat1, input.TEXCOORD0.zw));
    u_xlat4 = u_xlat2.yyyy * float4(u_xlat10_4);
    u_xlat4.w = u_xlat4.w * Globals._Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = half4(_Splat2.sample(sampler_Splat2, input.TEXCOORD1.xy));
    u_xlat4 = u_xlat2.zzzz * float4(u_xlat10_4);
    u_xlat4.w = u_xlat4.w * Globals._Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = half4(_Splat3.sample(sampler_Splat3, input.TEXCOORD1.zw));
    u_xlat4 = u_xlat2.wwww * float4(u_xlat10_4);
    u_xlat4.w = u_xlat4.w * Globals._Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat2.x = dot(u_xlat2, float4(Globals._Metallic0, Globals._Metallic1, Globals._Metallic2, Globals._Metallic3));
    u_xlat4.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = input.TEXCOORD3.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = sqrt(u_xlat28);
    u_xlat28 = (-u_xlat15) + u_xlat28;
    u_xlat15 = Globals.unity_ShadowFadeCenterAndType.w * u_xlat28 + u_xlat15;
    u_xlat15 = u_xlat15 * Globals._LightShadowData.z + Globals._LightShadowData.w;
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlatb28 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb28){
        u_xlatb41 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD3.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD3.xxx + u_xlat4.xyz;
        u_xlat4.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD3.zzz + u_xlat4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb41)) ? u_xlat4.xyz : input.TEXCOORD3.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat41 = u_xlat4.y * 0.25 + 0.75;
        u_xlat17 = Globals.unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat4.x = max(u_xlat41, u_xlat17);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat41 = dot(u_xlat4, Globals.unity_OcclusionMaskSelector);
    u_xlat41 = clamp(u_xlat41, 0.0f, 1.0f);
    u_xlat4.xy = input.TEXCOORD6.xy / input.TEXCOORD6.ww;
    u_xlat4.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat4.xy).x;
    u_xlat15 = u_xlat15 + u_xlat4.x;
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat41 = min(u_xlat15, u_xlat41);
    u_xlat15 = (u_xlatb28) ? u_xlat41 : u_xlat15;
    u_xlat41 = (-u_xlat3.w) + 1.0;
    u_xlat4.x = dot((-u_xlat1.xyz), input.TEXCOORD2.xyz);
    u_xlat4.x = u_xlat4.x + u_xlat4.x;
    u_xlat4.xyz = input.TEXCOORD2.xyz * (-u_xlat4.xxx) + (-u_xlat1.xyz);
    u_xlat5.xyz = float3(u_xlat15) * Globals._LightColor0.xyz;
    if(u_xlatb28){
        u_xlatb15 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD3.xxx + u_xlat6.xyz;
        u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD3.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb15)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat15 = u_xlat6.y * 0.25;
        u_xlat28 = Globals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat43 = (-Globals.unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat15 = max(u_xlat28, u_xlat15);
        u_xlat6.x = min(u_xlat43, u_xlat15);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
        u_xlat8.xyz = u_xlat6.xzw + float3(0.25, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xyz);
        u_xlat6.xyz = u_xlat6.xzw + float3(0.5, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xyz);
        u_xlat9.xyz = input.TEXCOORD2.xyz;
        u_xlat9.w = 1.0;
        u_xlat7.x = dot(u_xlat7, u_xlat9);
        u_xlat7.y = dot(u_xlat8, u_xlat9);
        u_xlat7.z = dot(u_xlat6, u_xlat9);
    } else {
        u_xlat6.xyz = input.TEXCOORD2.xyz;
        u_xlat6.w = 1.0;
        u_xlat7.x = dot(Globals.unity_SHAr, u_xlat6);
        u_xlat7.y = dot(Globals.unity_SHAg, u_xlat6);
        u_xlat7.z = dot(Globals.unity_SHAb, u_xlat6);
    }
    u_xlat6.xyz = u_xlat7.xyz + input.TEXCOORD5.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlat6.xyz = log2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(1.05499995, 1.05499995, 1.05499995) + float3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb15 = 0.0<Globals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb15){
        u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat15 = rsqrt(u_xlat15);
        u_xlat7.xyz = float3(u_xlat15) * u_xlat4.xyz;
        u_xlat8.xyz = (-input.TEXCOORD3.xyz) + Globals.unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-input.TEXCOORD3.xyz) + Globals.unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = (float3(0.0, 0.0, 0.0)<u_xlat7.xyz);
        u_xlat8.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
        u_xlat8.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
        u_xlat8.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
        u_xlat15 = min(u_xlat8.y, u_xlat8.x);
        u_xlat15 = min(u_xlat8.z, u_xlat15);
        u_xlat8.xyz = input.TEXCOORD3.xyz + (-Globals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = u_xlat7.xyz * float3(u_xlat15) + u_xlat8.xyz;
    } else {
        u_xlat7.xyz = u_xlat4.xyz;
    }
    u_xlat15 = (-u_xlat41) * 0.699999988 + 1.70000005;
    u_xlat15 = u_xlat15 * u_xlat41;
    u_xlat15 = u_xlat15 * 6.0;
    u_xlat7 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat7.xyz, level(u_xlat15));
    u_xlat28 = u_xlat7.w + -1.0;
    u_xlat28 = Globals.unity_SpecCube0_HDR.w * u_xlat28 + 1.0;
    u_xlat28 = u_xlat28 * Globals.unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * float3(u_xlat28);
    u_xlatb43 = Globals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<Globals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat43 = rsqrt(u_xlat43);
            u_xlat9.xyz = float3(u_xlat43) * u_xlat4.xyz;
            u_xlat10.xyz = (-input.TEXCOORD3.xyz) + Globals.unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-input.TEXCOORD3.xyz) + Globals.unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = (float3(0.0, 0.0, 0.0)<u_xlat9.xyz);
            u_xlat10.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
            u_xlat10.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
            u_xlat10.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
            u_xlat43 = min(u_xlat10.y, u_xlat10.x);
            u_xlat43 = min(u_xlat10.z, u_xlat43);
            u_xlat10.xyz = input.TEXCOORD3.xyz + (-Globals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = u_xlat9.xyz * float3(u_xlat43) + u_xlat10.xyz;
        }
        u_xlat4 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat4.xyz, level(u_xlat15));
        u_xlat15 = u_xlat4.w + -1.0;
        u_xlat15 = Globals.unity_SpecCube1_HDR.w * u_xlat15 + 1.0;
        u_xlat15 = u_xlat15 * Globals.unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * float3(u_xlat15);
        u_xlat7.xyz = float3(u_xlat28) * u_xlat7.xyz + (-u_xlat4.xyz);
        u_xlat8.xyz = Globals.unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat4.xyz;
    }
    u_xlat15 = dot(input.TEXCOORD2.xyz, input.TEXCOORD2.xyz);
    u_xlat15 = rsqrt(u_xlat15);
    u_xlat4.xyz = float3(u_xlat15) * input.TEXCOORD2.xyz;
    u_xlat7.xyz = u_xlat3.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz + float3(0.220916301, 0.220916301, 0.220916301);
    u_xlat2.x = (-u_xlat2.x) * 0.779083729 + 0.779083729;
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat39) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat0.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat0.x = dot(Globals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, float2(u_xlat41));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat27 = u_xlat26 * u_xlat26;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat26 = u_xlat26 * u_xlat27;
    u_xlat26 = u_xlat13.x * u_xlat26 + 1.0;
    u_xlat27 = -abs(u_xlat39) + 1.0;
    u_xlat15 = u_xlat27 * u_xlat27;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat27 = u_xlat27 * u_xlat15;
    u_xlat13.x = u_xlat13.x * u_xlat27 + 1.0;
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat41 * u_xlat41;
    u_xlat15 = (-u_xlat41) * u_xlat41 + 1.0;
    u_xlat28 = abs(u_xlat39) * u_xlat15 + u_xlat26;
    u_xlat15 = u_xlat1.x * u_xlat15 + u_xlat26;
    u_xlat39 = abs(u_xlat39) * u_xlat15;
    u_xlat39 = u_xlat1.x * u_xlat28 + u_xlat39;
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat15 = u_xlat26 * u_xlat26;
    u_xlat28 = u_xlat14 * u_xlat15 + (-u_xlat14);
    u_xlat14 = u_xlat28 * u_xlat14 + 1.0;
    u_xlat15 = u_xlat15 * 0.318309873;
    u_xlat14 = u_xlat14 * u_xlat14 + 1.00000001e-07;
    u_xlat14 = u_xlat15 / u_xlat14;
    u_xlat39 = u_xlat39 * u_xlat14;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat13.z = sqrt(u_xlat39);
    u_xlat13.xz = u_xlat1.xx * u_xlat13.xz;
    u_xlat26 = u_xlat26 * u_xlat41;
    u_xlat26 = (-u_xlat26) * 0.280000001 + 1.0;
    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat13.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat2.x) + u_xlat3.w;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat2.xyz = u_xlat5.xyz * u_xlat13.xxx + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat5.xyz * float3(u_xlat39);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat0.x = u_xlat0.x * u_xlat13.x;
    u_xlat5.xyz = (-u_xlat7.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = u_xlat5.xyz * u_xlat0.xxx + u_xlat7.xyz;
    u_xlat0.xyw = u_xlat0.xyw * u_xlat4.xyz;
    u_xlat0.xyw = u_xlat3.xyz * u_xlat2.xyz + u_xlat0.xyw;
    u_xlat2.xyz = u_xlat8.xyz * float3(u_xlat26);
    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = float3(u_xlat27) * u_xlat3.xyz + u_xlat7.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyw;
    output.SV_Target0.xyz = float3(u_xlat40) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    u_xlat10 = u_xlat1.y * u_xlat1.y;
    u_xlat10 = u_xlat1.x * u_xlat1.x + (-u_xlat10);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat1.x = dot(unity_SHBr, u_xlat2);
    u_xlat1.y = dot(unity_SHBg, u_xlat2);
    u_xlat1.z = dot(unity_SHBb, u_xlat2);
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat10) + u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat0.zw;
    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  sampler2D _ShadowMapTexture;
uniform  samplerCube unity_SpecCube0;
uniform  samplerCube unity_SpecCube1;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat16_2;
vec4 u_xlat10_2;
vec4 u_xlat3;
float u_xlat16_3;
vec4 u_xlat10_3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat10_6;
vec3 u_xlat7;
vec4 u_xlat10_7;
vec3 u_xlat8;
vec4 u_xlat10_8;
vec4 u_xlat9;
vec3 u_xlat10;
bvec3 u_xlatb10;
vec3 u_xlat11;
bvec3 u_xlatb12;
vec3 u_xlat13;
float u_xlat14;
float u_xlat15;
float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat26;
float u_xlat27;
float u_xlat28;
float u_xlat16_28;
bool u_xlatb28;
float u_xlat39;
float u_xlat16_40;
float u_xlat41;
bool u_xlatb41;
float u_xlat43;
bool u_xlatb43;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat1.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat10_2 = texture(_Control, vs_TEXCOORD4.xy);
    u_xlat16_40 = dot(u_xlat10_2, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = u_xlat16_40 + 0.00100000005;
    u_xlat16_2 = u_xlat10_2 / vec4(u_xlat16_3);
    u_xlat10_3 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat3 = u_xlat16_2.xxxx * u_xlat10_3;
    u_xlat3.w = u_xlat3.w * _Smoothness0;
    u_xlat10_4 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat4 = u_xlat16_2.yyyy * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat4 = u_xlat16_2.zzzz * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat4 = u_xlat16_2.wwww * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat2.x = dot(u_xlat16_2, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = sqrt(u_xlat28);
    u_xlat28 = (-u_xlat15) + u_xlat28;
    u_xlat15 = unity_ShadowFadeCenterAndType.w * u_xlat28 + u_xlat15;
    u_xlat15 = u_xlat15 * _LightShadowData.z + _LightShadowData.w;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlatb28 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb28){
        u_xlatb41 = unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb41)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat41 = u_xlat4.y * 0.25 + 0.75;
        u_xlat17 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat4.x = max(u_xlat41, u_xlat17);
        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    //ENDIF
    }
    u_xlat41 = dot(u_xlat4, unity_OcclusionMaskSelector);
    u_xlat41 = clamp(u_xlat41, 0.0, 1.0);
    u_xlat4.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_4 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat15 = u_xlat15 + u_xlat10_4.x;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat41 = min(u_xlat15, u_xlat41);
    u_xlat15 = (u_xlatb28) ? u_xlat41 : u_xlat15;
    u_xlat41 = (-u_xlat3.w) + 1.0;
    u_xlat4.x = dot((-u_xlat1.xyz), vs_TEXCOORD2.xyz);
    u_xlat4.x = u_xlat4.x + u_xlat4.x;
    u_xlat4.xyz = vs_TEXCOORD2.xyz * (-u_xlat4.xxx) + (-u_xlat1.xyz);
    u_xlat5.xyz = vec3(u_xlat15) * _LightColor0.xyz;
    if(u_xlatb28){
        u_xlatb15 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb15)) ? u_xlat6.xyz : vs_TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat15 = u_xlat6.y * 0.25;
        u_xlat28 = unity_ProbeVolumeParams.z * 0.5;
        u_xlat43 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat15 = max(u_xlat28, u_xlat15);
        u_xlat6.x = min(u_xlat43, u_xlat15);
        u_xlat10_7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
        u_xlat8.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
        u_xlat6.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
        u_xlat9.xyz = vs_TEXCOORD2.xyz;
        u_xlat9.w = 1.0;
        u_xlat7.x = dot(u_xlat10_7, u_xlat9);
        u_xlat7.y = dot(u_xlat10_8, u_xlat9);
        u_xlat7.z = dot(u_xlat10_6, u_xlat9);
    } else {
        u_xlat6.xyz = vs_TEXCOORD2.xyz;
        u_xlat6.w = 1.0;
        u_xlat7.x = dot(unity_SHAr, u_xlat6);
        u_xlat7.y = dot(unity_SHAg, u_xlat6);
        u_xlat7.z = dot(unity_SHAb, u_xlat6);
    //ENDIF
    }
    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD5.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat6.xyz = log2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb15 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb15){
        u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat15 = inversesqrt(u_xlat15);
        u_xlat7.xyz = vec3(u_xlat15) * u_xlat4.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
        u_xlat8.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
        u_xlat8.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
        u_xlat8.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
        u_xlat15 = min(u_xlat8.y, u_xlat8.x);
        u_xlat15 = min(u_xlat8.z, u_xlat15);
        u_xlat8.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat15) + u_xlat8.xyz;
    } else {
        u_xlat7.xyz = u_xlat4.xyz;
    //ENDIF
    }
    u_xlat15 = (-u_xlat41) * 0.699999988 + 1.70000005;
    u_xlat15 = u_xlat15 * u_xlat41;
    u_xlat15 = u_xlat15 * 6.0;
    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat15);
    u_xlat16_28 = u_xlat10_7.w + -1.0;
    u_xlat28 = unity_SpecCube0_HDR.w * u_xlat16_28 + 1.0;
    u_xlat28 = u_xlat28 * unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat10_7.xyz * vec3(u_xlat28);
    u_xlatb43 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat43 = inversesqrt(u_xlat43);
            u_xlat9.xyz = vec3(u_xlat43) * u_xlat4.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
            u_xlat10.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
            u_xlat10.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
            u_xlat10.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
            u_xlat43 = min(u_xlat10.y, u_xlat10.x);
            u_xlat43 = min(u_xlat10.z, u_xlat43);
            u_xlat10.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = u_xlat9.xyz * vec3(u_xlat43) + u_xlat10.xyz;
        //ENDIF
        }
        u_xlat10_4 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat15);
        u_xlat16_15 = u_xlat10_4.w + -1.0;
        u_xlat15 = unity_SpecCube1_HDR.w * u_xlat16_15 + 1.0;
        u_xlat15 = u_xlat15 * unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat10_4.xyz * vec3(u_xlat15);
        u_xlat7.xyz = vec3(u_xlat28) * u_xlat10_7.xyz + (-u_xlat4.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat4.xyz;
    //ENDIF
    }
    u_xlat15 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD2.xyz;
    u_xlat7.xyz = u_xlat3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat2.x = (-u_xlat2.x) * 0.779083729 + 0.779083729;
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, vec2(u_xlat41));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat27 = u_xlat26 * u_xlat26;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat26 = u_xlat26 * u_xlat27;
    u_xlat26 = u_xlat13.x * u_xlat26 + 1.0;
    u_xlat27 = -abs(u_xlat39) + 1.0;
    u_xlat15 = u_xlat27 * u_xlat27;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat27 = u_xlat27 * u_xlat15;
    u_xlat13.x = u_xlat13.x * u_xlat27 + 1.0;
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat41 * u_xlat41;
    u_xlat15 = (-u_xlat41) * u_xlat41 + 1.0;
    u_xlat28 = abs(u_xlat39) * u_xlat15 + u_xlat26;
    u_xlat15 = u_xlat1.x * u_xlat15 + u_xlat26;
    u_xlat39 = abs(u_xlat39) * u_xlat15;
    u_xlat39 = u_xlat1.x * u_xlat28 + u_xlat39;
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat15 = u_xlat26 * u_xlat26;
    u_xlat28 = u_xlat14 * u_xlat15 + (-u_xlat14);
    u_xlat14 = u_xlat28 * u_xlat14 + 1.0;
    u_xlat15 = u_xlat15 * 0.318309873;
    u_xlat14 = u_xlat14 * u_xlat14 + 1.00000001e-07;
    u_xlat14 = u_xlat15 / u_xlat14;
    u_xlat39 = u_xlat39 * u_xlat14;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat13.z = sqrt(u_xlat39);
    u_xlat13.xz = u_xlat1.xx * u_xlat13.xz;
    u_xlat26 = u_xlat26 * u_xlat41;
    u_xlat26 = (-u_xlat26) * 0.280000001 + 1.0;
    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat13.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat2.x) + u_xlat3.w;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat2.xyz = u_xlat5.xyz * u_xlat13.xxx + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat39);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat0.x = u_xlat0.x * u_xlat13.x;
    u_xlat5.xyz = (-u_xlat7.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyw = u_xlat5.xyz * u_xlat0.xxx + u_xlat7.xyz;
    u_xlat0.xyw = u_xlat0.xyw * u_xlat4.xyz;
    u_xlat0.xyw = u_xlat3.xyz * u_xlat2.xyz + u_xlat0.xyw;
    u_xlat2.xyz = u_xlat8.xyz * vec3(u_xlat26);
    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat7.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyw;
    SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL VERTEXLIGHT_ON 
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (528 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 256
  Matrix4x4 unity_WorldToObject at 320
  Matrix4x4 unity_MatrixVP at 384
  Vector4 unity_4LightPosX0 at 0
  Vector4 unity_4LightPosY0 at 16
  Vector4 unity_4LightPosZ0 at 32
  Vector4 unity_4LightAtten0 at 48
  Vector4 unity_LightColor[8] at 64
  Vector4 unity_SHBr at 192
  Vector4 unity_SHBg at 208
  Vector4 unity_SHBb at 224
  Vector4 unity_SHC at 240
  Vector4 _Control_ST at 448
  Vector4 _Splat0_ST at 464
  Vector4 _Splat1_ST at 480
  Vector4 _Splat2_ST at 496
  Vector4 _Splat3_ST at 512
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD7 [[ user(TEXCOORD7) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float u_xlat15;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    u_xlat1.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = rsqrt(u_xlat15);
    u_xlat1.xyz = float3(u_xlat15) * u_xlat1.xyz;
    output.TEXCOORD2.xyz = u_xlat1.xyz;
    output.TEXCOORD3.xyz = u_xlat0.xyz;
    output.TEXCOORD4.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    output.TEXCOORD6.xy = float2(0.0, 0.0);
    u_xlat2 = (-u_xlat0.xxxx) + Globals.unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + Globals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + Globals.unity_4LightPosZ0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = rsqrt(u_xlat0);
    u_xlat0 = u_xlat0 * Globals.unity_4LightAtten0 + float4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * Globals.unity_LightColor[1].xyz;
    u_xlat2.xyz = Globals.unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = Globals.unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = Globals.unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * float3(0.305306017, 0.305306017, 0.305306017) + float3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + float3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat15 = u_xlat1.y * u_xlat1.y;
    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(Globals.unity_SHBr, u_xlat1);
    u_xlat3.y = dot(Globals.unity_SHBg, u_xlat1);
    u_xlat3.z = dot(Globals.unity_SHBb, u_xlat1);
    u_xlat1.xyz = Globals.unity_SHC.xyz * float3(u_xlat15) + u_xlat3.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
    output.TEXCOORD7 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
out vec2 vs_TEXCOORD6;
out vec3 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat15 = u_xlat1.y * u_xlat1.y;
    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat1);
    u_xlat3.y = dot(unity_SHBg, u_xlat1);
    u_xlat3.z = dot(unity_SHBb, u_xlat1);
    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  samplerCube unity_SpecCube0;
uniform  samplerCube unity_SpecCube1;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat16_2;
vec4 u_xlat10_2;
vec4 u_xlat3;
float u_xlat16_3;
vec4 u_xlat10_3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat10_6;
vec3 u_xlat7;
vec4 u_xlat10_7;
vec3 u_xlat8;
vec4 u_xlat10_8;
vec4 u_xlat9;
vec3 u_xlat10;
bvec3 u_xlatb10;
vec3 u_xlat11;
bvec3 u_xlatb12;
vec3 u_xlat13;
float u_xlat14;
float u_xlat15;
float u_xlat16_15;
bool u_xlatb15;
float u_xlat26;
float u_xlat27;
float u_xlat28;
float u_xlat16_28;
bool u_xlatb28;
float u_xlat39;
float u_xlat16_40;
float u_xlat41;
float u_xlat43;
bool u_xlatb43;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat1.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat10_2 = texture(_Control, vs_TEXCOORD4.xy);
    u_xlat16_40 = dot(u_xlat10_2, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = u_xlat16_40 + 0.00100000005;
    u_xlat16_2 = u_xlat10_2 / vec4(u_xlat16_3);
    u_xlat10_3 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat3 = u_xlat16_2.xxxx * u_xlat10_3;
    u_xlat3.w = u_xlat3.w * _Smoothness0;
    u_xlat10_4 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat4 = u_xlat16_2.yyyy * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat4 = u_xlat16_2.zzzz * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat4 = u_xlat16_2.wwww * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat2.x = dot(u_xlat16_2, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb15){
        u_xlatb28 = unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb28)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat28 = u_xlat4.y * 0.25 + 0.75;
        u_xlat41 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat4.x = max(u_xlat41, u_xlat28);
        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    //ENDIF
    }
    u_xlat28 = dot(u_xlat4, unity_OcclusionMaskSelector);
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
    u_xlat41 = (-u_xlat3.w) + 1.0;
    u_xlat4.x = dot((-u_xlat1.xyz), vs_TEXCOORD2.xyz);
    u_xlat4.x = u_xlat4.x + u_xlat4.x;
    u_xlat4.xyz = vs_TEXCOORD2.xyz * (-u_xlat4.xxx) + (-u_xlat1.xyz);
    u_xlat5.xyz = vec3(u_xlat28) * _LightColor0.xyz;
    if(u_xlatb15){
        u_xlatb15 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb15)) ? u_xlat6.xyz : vs_TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat15 = u_xlat6.y * 0.25;
        u_xlat28 = unity_ProbeVolumeParams.z * 0.5;
        u_xlat43 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat15 = max(u_xlat28, u_xlat15);
        u_xlat6.x = min(u_xlat43, u_xlat15);
        u_xlat10_7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
        u_xlat8.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
        u_xlat6.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
        u_xlat9.xyz = vs_TEXCOORD2.xyz;
        u_xlat9.w = 1.0;
        u_xlat7.x = dot(u_xlat10_7, u_xlat9);
        u_xlat7.y = dot(u_xlat10_8, u_xlat9);
        u_xlat7.z = dot(u_xlat10_6, u_xlat9);
    } else {
        u_xlat6.xyz = vs_TEXCOORD2.xyz;
        u_xlat6.w = 1.0;
        u_xlat7.x = dot(unity_SHAr, u_xlat6);
        u_xlat7.y = dot(unity_SHAg, u_xlat6);
        u_xlat7.z = dot(unity_SHAb, u_xlat6);
    //ENDIF
    }
    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD5.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat6.xyz = log2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb15 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb15){
        u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat15 = inversesqrt(u_xlat15);
        u_xlat7.xyz = vec3(u_xlat15) * u_xlat4.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
        u_xlat8.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
        u_xlat8.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
        u_xlat8.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
        u_xlat15 = min(u_xlat8.y, u_xlat8.x);
        u_xlat15 = min(u_xlat8.z, u_xlat15);
        u_xlat8.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat15) + u_xlat8.xyz;
    } else {
        u_xlat7.xyz = u_xlat4.xyz;
    //ENDIF
    }
    u_xlat15 = (-u_xlat41) * 0.699999988 + 1.70000005;
    u_xlat15 = u_xlat15 * u_xlat41;
    u_xlat15 = u_xlat15 * 6.0;
    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat15);
    u_xlat16_28 = u_xlat10_7.w + -1.0;
    u_xlat28 = unity_SpecCube0_HDR.w * u_xlat16_28 + 1.0;
    u_xlat28 = u_xlat28 * unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat10_7.xyz * vec3(u_xlat28);
    u_xlatb43 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat43 = inversesqrt(u_xlat43);
            u_xlat9.xyz = vec3(u_xlat43) * u_xlat4.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
            u_xlat10.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
            u_xlat10.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
            u_xlat10.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
            u_xlat43 = min(u_xlat10.y, u_xlat10.x);
            u_xlat43 = min(u_xlat10.z, u_xlat43);
            u_xlat10.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = u_xlat9.xyz * vec3(u_xlat43) + u_xlat10.xyz;
        //ENDIF
        }
        u_xlat10_4 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat15);
        u_xlat16_15 = u_xlat10_4.w + -1.0;
        u_xlat15 = unity_SpecCube1_HDR.w * u_xlat16_15 + 1.0;
        u_xlat15 = u_xlat15 * unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat10_4.xyz * vec3(u_xlat15);
        u_xlat7.xyz = vec3(u_xlat28) * u_xlat10_7.xyz + (-u_xlat4.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat4.xyz;
    //ENDIF
    }
    u_xlat15 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD2.xyz;
    u_xlat7.xyz = u_xlat3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat2.x = (-u_xlat2.x) * 0.779083729 + 0.779083729;
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, vec2(u_xlat41));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat27 = u_xlat26 * u_xlat26;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat26 = u_xlat26 * u_xlat27;
    u_xlat26 = u_xlat13.x * u_xlat26 + 1.0;
    u_xlat27 = -abs(u_xlat39) + 1.0;
    u_xlat15 = u_xlat27 * u_xlat27;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat27 = u_xlat27 * u_xlat15;
    u_xlat13.x = u_xlat13.x * u_xlat27 + 1.0;
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat41 * u_xlat41;
    u_xlat15 = (-u_xlat41) * u_xlat41 + 1.0;
    u_xlat28 = abs(u_xlat39) * u_xlat15 + u_xlat26;
    u_xlat15 = u_xlat1.x * u_xlat15 + u_xlat26;
    u_xlat39 = abs(u_xlat39) * u_xlat15;
    u_xlat39 = u_xlat1.x * u_xlat28 + u_xlat39;
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat15 = u_xlat26 * u_xlat26;
    u_xlat28 = u_xlat14 * u_xlat15 + (-u_xlat14);
    u_xlat14 = u_xlat28 * u_xlat14 + 1.0;
    u_xlat15 = u_xlat15 * 0.318309873;
    u_xlat14 = u_xlat14 * u_xlat14 + 1.00000001e-07;
    u_xlat14 = u_xlat15 / u_xlat14;
    u_xlat39 = u_xlat39 * u_xlat14;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat13.z = sqrt(u_xlat39);
    u_xlat13.xz = u_xlat1.xx * u_xlat13.xz;
    u_xlat26 = u_xlat26 * u_xlat41;
    u_xlat26 = (-u_xlat26) * 0.280000001 + 1.0;
    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat13.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat2.x) + u_xlat3.w;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat2.xyz = u_xlat5.xyz * u_xlat13.xxx + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat39);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat0.x = u_xlat0.x * u_xlat13.x;
    u_xlat5.xyz = (-u_xlat7.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyw = u_xlat5.xyz * u_xlat0.xxx + u_xlat7.xyz;
    u_xlat0.xyw = u_xlat0.xyw * u_xlat4.xyz;
    u_xlat0.xyw = u_xlat3.xyz * u_xlat2.xyz + u_xlat0.xyw;
    u_xlat2.xyz = u_xlat8.xyz * vec3(u_xlat26);
    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat7.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyw;
    SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL SHADOWS_SCREEN VERTEXLIGHT_ON 
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (544 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 272
  Matrix4x4 unity_WorldToObject at 336
  Matrix4x4 unity_MatrixVP at 400
  Vector4 _ProjectionParams at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  Vector4 unity_4LightAtten0 at 64
  Vector4 unity_LightColor[8] at 80
  Vector4 unity_SHBr at 208
  Vector4 unity_SHBg at 224
  Vector4 unity_SHBb at 240
  Vector4 unity_SHC at 256
  Vector4 _Control_ST at 464
  Vector4 _Splat0_ST at 480
  Vector4 _Splat1_ST at 496
  Vector4 _Splat2_ST at 512
  Vector4 _Splat3_ST at 528
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 _ProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float4 TEXCOORD7 [[ user(TEXCOORD7) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float u_xlat18;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    output.mtl_Position = u_xlat1;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    u_xlat2.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat2.xyz = float3(u_xlat18) * u_xlat2.xyz;
    output.TEXCOORD2.xyz = u_xlat2.xyz;
    output.TEXCOORD3.xyz = u_xlat0.xyz;
    output.TEXCOORD4.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    u_xlat3 = (-u_xlat0.xxxx) + Globals.unity_4LightPosX0;
    u_xlat4 = (-u_xlat0.yyyy) + Globals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + Globals.unity_4LightPosZ0;
    u_xlat5 = u_xlat2.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;
    u_xlat3 = u_xlat3 * u_xlat2.xxxx + u_xlat5;
    u_xlat3 = u_xlat0 * u_xlat2.zzzz + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat4 = rsqrt(u_xlat0);
    u_xlat0 = u_xlat0 * Globals.unity_4LightAtten0 + float4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat3 = u_xlat3 * u_xlat4;
    u_xlat3 = max(u_xlat3, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat3.xyz = u_xlat0.yyy * Globals.unity_LightColor[1].xyz;
    u_xlat3.xyz = Globals.unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = Globals.unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat0.xyz = Globals.unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat3.xyz = u_xlat0.xyz * float3(0.305306017, 0.305306017, 0.305306017) + float3(0.682171106, 0.682171106, 0.682171106);
    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + float3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat18 = u_xlat2.y * u_xlat2.y;
    u_xlat18 = u_xlat2.x * u_xlat2.x + (-u_xlat18);
    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat4.x = dot(Globals.unity_SHBr, u_xlat2);
    u_xlat4.y = dot(Globals.unity_SHBg, u_xlat2);
    u_xlat4.z = dot(Globals.unity_SHBb, u_xlat2);
    u_xlat2.xyz = Globals.unity_SHC.xyz * float3(u_xlat18) + u_xlat4.xyz;
    output.TEXCOORD5.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat2.xyz;
    u_xlat0.x = u_xlat1.y * Globals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * float2(0.5, 0.5);
    output.TEXCOORD6.zw = u_xlat1.zw;
    output.TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD7 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    u_xlat3 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat5 = u_xlat2.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;
    u_xlat3 = u_xlat3 * u_xlat2.xxxx + u_xlat5;
    u_xlat3 = u_xlat0 * u_xlat2.zzzz + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat4 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat3 = u_xlat3 * u_xlat4;
    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat18 = u_xlat2.y * u_xlat2.y;
    u_xlat18 = u_xlat2.x * u_xlat2.x + (-u_xlat18);
    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat2);
    u_xlat4.y = dot(unity_SHBg, u_xlat2);
    u_xlat4.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat4.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat2.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD6.zw = u_xlat1.zw;
    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  sampler2D _ShadowMapTexture;
uniform  samplerCube unity_SpecCube0;
uniform  samplerCube unity_SpecCube1;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat16_2;
vec4 u_xlat10_2;
vec4 u_xlat3;
float u_xlat16_3;
vec4 u_xlat10_3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat10_6;
vec3 u_xlat7;
vec4 u_xlat10_7;
vec3 u_xlat8;
vec4 u_xlat10_8;
vec4 u_xlat9;
vec3 u_xlat10;
bvec3 u_xlatb10;
vec3 u_xlat11;
bvec3 u_xlatb12;
vec3 u_xlat13;
float u_xlat14;
float u_xlat15;
float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat26;
float u_xlat27;
float u_xlat28;
float u_xlat16_28;
bool u_xlatb28;
float u_xlat39;
float u_xlat16_40;
float u_xlat41;
bool u_xlatb41;
float u_xlat43;
bool u_xlatb43;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat1.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat10_2 = texture(_Control, vs_TEXCOORD4.xy);
    u_xlat16_40 = dot(u_xlat10_2, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = u_xlat16_40 + 0.00100000005;
    u_xlat16_2 = u_xlat10_2 / vec4(u_xlat16_3);
    u_xlat10_3 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat3 = u_xlat16_2.xxxx * u_xlat10_3;
    u_xlat3.w = u_xlat3.w * _Smoothness0;
    u_xlat10_4 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat4 = u_xlat16_2.yyyy * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat4 = u_xlat16_2.zzzz * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat4 = u_xlat16_2.wwww * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat2.x = dot(u_xlat16_2, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = sqrt(u_xlat28);
    u_xlat28 = (-u_xlat15) + u_xlat28;
    u_xlat15 = unity_ShadowFadeCenterAndType.w * u_xlat28 + u_xlat15;
    u_xlat15 = u_xlat15 * _LightShadowData.z + _LightShadowData.w;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlatb28 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb28){
        u_xlatb41 = unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb41)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat41 = u_xlat4.y * 0.25 + 0.75;
        u_xlat17 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat4.x = max(u_xlat41, u_xlat17);
        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    //ENDIF
    }
    u_xlat41 = dot(u_xlat4, unity_OcclusionMaskSelector);
    u_xlat41 = clamp(u_xlat41, 0.0, 1.0);
    u_xlat4.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_4 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat15 = u_xlat15 + u_xlat10_4.x;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat41 = min(u_xlat15, u_xlat41);
    u_xlat15 = (u_xlatb28) ? u_xlat41 : u_xlat15;
    u_xlat41 = (-u_xlat3.w) + 1.0;
    u_xlat4.x = dot((-u_xlat1.xyz), vs_TEXCOORD2.xyz);
    u_xlat4.x = u_xlat4.x + u_xlat4.x;
    u_xlat4.xyz = vs_TEXCOORD2.xyz * (-u_xlat4.xxx) + (-u_xlat1.xyz);
    u_xlat5.xyz = vec3(u_xlat15) * _LightColor0.xyz;
    if(u_xlatb28){
        u_xlatb15 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb15)) ? u_xlat6.xyz : vs_TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat15 = u_xlat6.y * 0.25;
        u_xlat28 = unity_ProbeVolumeParams.z * 0.5;
        u_xlat43 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat15 = max(u_xlat28, u_xlat15);
        u_xlat6.x = min(u_xlat43, u_xlat15);
        u_xlat10_7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
        u_xlat8.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
        u_xlat6.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
        u_xlat9.xyz = vs_TEXCOORD2.xyz;
        u_xlat9.w = 1.0;
        u_xlat7.x = dot(u_xlat10_7, u_xlat9);
        u_xlat7.y = dot(u_xlat10_8, u_xlat9);
        u_xlat7.z = dot(u_xlat10_6, u_xlat9);
    } else {
        u_xlat6.xyz = vs_TEXCOORD2.xyz;
        u_xlat6.w = 1.0;
        u_xlat7.x = dot(unity_SHAr, u_xlat6);
        u_xlat7.y = dot(unity_SHAg, u_xlat6);
        u_xlat7.z = dot(unity_SHAb, u_xlat6);
    //ENDIF
    }
    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD5.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat6.xyz = log2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb15 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb15){
        u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat15 = inversesqrt(u_xlat15);
        u_xlat7.xyz = vec3(u_xlat15) * u_xlat4.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
        u_xlat8.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
        u_xlat8.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
        u_xlat8.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
        u_xlat15 = min(u_xlat8.y, u_xlat8.x);
        u_xlat15 = min(u_xlat8.z, u_xlat15);
        u_xlat8.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat15) + u_xlat8.xyz;
    } else {
        u_xlat7.xyz = u_xlat4.xyz;
    //ENDIF
    }
    u_xlat15 = (-u_xlat41) * 0.699999988 + 1.70000005;
    u_xlat15 = u_xlat15 * u_xlat41;
    u_xlat15 = u_xlat15 * 6.0;
    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat15);
    u_xlat16_28 = u_xlat10_7.w + -1.0;
    u_xlat28 = unity_SpecCube0_HDR.w * u_xlat16_28 + 1.0;
    u_xlat28 = u_xlat28 * unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat10_7.xyz * vec3(u_xlat28);
    u_xlatb43 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat43 = inversesqrt(u_xlat43);
            u_xlat9.xyz = vec3(u_xlat43) * u_xlat4.xyz;
            u_xlat10.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-vs_TEXCOORD3.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
            u_xlat10.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
            u_xlat10.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
            u_xlat10.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
            u_xlat43 = min(u_xlat10.y, u_xlat10.x);
            u_xlat43 = min(u_xlat10.z, u_xlat43);
            u_xlat10.xyz = vs_TEXCOORD3.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = u_xlat9.xyz * vec3(u_xlat43) + u_xlat10.xyz;
        //ENDIF
        }
        u_xlat10_4 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat15);
        u_xlat16_15 = u_xlat10_4.w + -1.0;
        u_xlat15 = unity_SpecCube1_HDR.w * u_xlat16_15 + 1.0;
        u_xlat15 = u_xlat15 * unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat10_4.xyz * vec3(u_xlat15);
        u_xlat7.xyz = vec3(u_xlat28) * u_xlat10_7.xyz + (-u_xlat4.xyz);
        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat4.xyz;
    //ENDIF
    }
    u_xlat15 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD2.xyz;
    u_xlat7.xyz = u_xlat3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat2.x = (-u_xlat2.x) * 0.779083729 + 0.779083729;
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, vec2(u_xlat41));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat27 = u_xlat26 * u_xlat26;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat26 = u_xlat26 * u_xlat27;
    u_xlat26 = u_xlat13.x * u_xlat26 + 1.0;
    u_xlat27 = -abs(u_xlat39) + 1.0;
    u_xlat15 = u_xlat27 * u_xlat27;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat27 = u_xlat27 * u_xlat15;
    u_xlat13.x = u_xlat13.x * u_xlat27 + 1.0;
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat41 * u_xlat41;
    u_xlat15 = (-u_xlat41) * u_xlat41 + 1.0;
    u_xlat28 = abs(u_xlat39) * u_xlat15 + u_xlat26;
    u_xlat15 = u_xlat1.x * u_xlat15 + u_xlat26;
    u_xlat39 = abs(u_xlat39) * u_xlat15;
    u_xlat39 = u_xlat1.x * u_xlat28 + u_xlat39;
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat15 = u_xlat26 * u_xlat26;
    u_xlat28 = u_xlat14 * u_xlat15 + (-u_xlat14);
    u_xlat14 = u_xlat28 * u_xlat14 + 1.0;
    u_xlat15 = u_xlat15 * 0.318309873;
    u_xlat14 = u_xlat14 * u_xlat14 + 1.00000001e-07;
    u_xlat14 = u_xlat15 / u_xlat14;
    u_xlat39 = u_xlat39 * u_xlat14;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat13.z = sqrt(u_xlat39);
    u_xlat13.xz = u_xlat1.xx * u_xlat13.xz;
    u_xlat26 = u_xlat26 * u_xlat41;
    u_xlat26 = (-u_xlat26) * 0.280000001 + 1.0;
    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat13.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat2.x) + u_xlat3.w;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat2.xyz = u_xlat5.xyz * u_xlat13.xxx + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat39);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat0.x = u_xlat0.x * u_xlat13.x;
    u_xlat5.xyz = (-u_xlat7.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyw = u_xlat5.xyz * u_xlat0.xxx + u_xlat7.xyz;
    u_xlat0.xyw = u_xlat0.xyw * u_xlat4.xyz;
    u_xlat0.xyw = u_xlat3.xyz * u_xlat2.xyz + u_xlat0.xyw;
    u_xlat2.xyz = u_xlat8.xyz * vec3(u_xlat26);
    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat7.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyw;
    SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL _TERRAIN_NORMAL_MAP 
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (352 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 64
  Matrix4x4 unity_WorldToObject at 128
  Matrix4x4 unity_MatrixVP at 208
  Vector4 unity_SHBr at 0
  Vector4 unity_SHBg at 16
  Vector4 unity_SHBb at 32
  Vector4 unity_SHC at 48
  Vector4 unity_WorldTransformParams at 192
  Vector4 _Control_ST at 272
  Vector4 _Splat0_ST at 288
  Vector4 _Splat1_ST at 304
  Vector4 _Splat2_ST at 320
  Vector4 _Splat3_ST at 336
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float4 TEXCOORD8 [[ user(TEXCOORD8) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    output.TEXCOORD2.w = u_xlat0.x;
    u_xlat0.xw = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat0.xw = input.NORMAL0.yz * float2(1.0, 0.0) + (-u_xlat0.xw);
    u_xlat1.xyz = u_xlat0.www * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    output.TEXCOORD2.x = u_xlat1.z;
    u_xlat2.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * (-Globals.unity_WorldTransformParams.www);
    output.TEXCOORD2.y = u_xlat3.x;
    output.TEXCOORD2.z = u_xlat2.x;
    output.TEXCOORD3.x = u_xlat1.x;
    output.TEXCOORD4.x = u_xlat1.y;
    output.TEXCOORD3.w = u_xlat0.y;
    output.TEXCOORD4.w = u_xlat0.z;
    output.TEXCOORD3.y = u_xlat3.y;
    output.TEXCOORD4.y = u_xlat3.z;
    output.TEXCOORD3.z = u_xlat2.y;
    output.TEXCOORD4.z = u_xlat2.w;
    output.TEXCOORD5.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    output.TEXCOORD7.xy = float2(0.0, 0.0);
    u_xlat0.x = u_xlat2.y * u_xlat2.y;
    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
    u_xlat1 = u_xlat2.ywzx * u_xlat2;
    u_xlat2.x = dot(Globals.unity_SHBr, u_xlat1);
    u_xlat2.y = dot(Globals.unity_SHBg, u_xlat1);
    u_xlat2.z = dot(Globals.unity_SHBb, u_xlat1);
    output.TEXCOORD6.xyz = Globals.unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
    output.TEXCOORD8 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 2
Set 2D Texture "_Splat0" to slot 1 sampler slot 3
Set 2D Texture "_Splat1" to slot 2 sampler slot 4
Set 2D Texture "_Splat2" to slot 3 sampler slot 5
Set 2D Texture "_Splat3" to slot 4 sampler slot 6
Set 2D Texture "_Normal0" to slot 5 sampler slot 7
Set 2D Texture "_Normal1" to slot 6 sampler slot 8
Set 2D Texture "_Normal2" to slot 7 sampler slot 9
Set 2D Texture "_Normal3" to slot 8 sampler slot 10
Set CUBE Texture "unity_SpecCube0" to slot 9 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 10 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 1

Constant Buffer "Globals" (384 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 240
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 unity_SpecCube0_BoxMax at 96
  Vector4 unity_SpecCube0_BoxMin at 112
  Vector4 unity_SpecCube0_ProbePosition at 128
  Vector4 unity_SpecCube0_HDR at 144
  Vector4 unity_SpecCube1_BoxMax at 160
  Vector4 unity_SpecCube1_BoxMin at 176
  Vector4 unity_SpecCube1_ProbePosition at 192
  Vector4 unity_SpecCube1_HDR at 208
  Vector4 unity_ProbeVolumeParams at 224
  Vector3 unity_ProbeVolumeSizeInv at 304
  Vector3 unity_ProbeVolumeMin at 320
  Vector4 _LightColor0 at 336
  Float _Metallic0 at 352
  Float _Metallic1 at 356
  Float _Metallic2 at 360
  Float _Metallic3 at 364
  Float _Smoothness0 at 368
  Float _Smoothness1 at 372
  Float _Smoothness2 at 376
  Float _Smoothness3 at 380
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler_Normal0 [[ sampler (7) ]],
    sampler sampler_Normal1 [[ sampler (8) ]],
    sampler sampler_Normal2 [[ sampler (9) ]],
    sampler sampler_Normal3 [[ sampler (10) ]],
    texture2d<float, access::sample > _Control [[ texture (0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture (2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture (3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture (4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture (5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture (6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture (7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture (8) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture (9) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture (10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (11) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    float4 u_xlat3;
    bool u_xlatb3;
    float4 u_xlat4;
    float4 u_xlat5;
    half4 u_xlat10_5;
    float4 u_xlat6;
    float3 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float3 u_xlat11;
    bool3 u_xlatb11;
    float3 u_xlat12;
    bool3 u_xlatb13;
    float u_xlat14;
    float u_xlat15;
    float u_xlat16;
    float3 u_xlat17;
    bool u_xlatb17;
    float u_xlat28;
    float u_xlat29;
    float u_xlat31;
    float2 u_xlat33;
    half2 u_xlat10_33;
    float u_xlat42;
    float u_xlat43;
    float u_xlat44;
    float u_xlat45;
    float u_xlat47;
    bool u_xlatb47;
    float u_xlat48;
    float u_xlat49;
    bool u_xlatb49;
    u_xlat0.x = input.TEXCOORD2.w;
    u_xlat0.y = input.TEXCOORD3.w;
    u_xlat0.z = input.TEXCOORD4.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat1.xyz;
    u_xlat3 = _Control.sample(sampler_Control, input.TEXCOORD5.xy);
    u_xlat43 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat44 = u_xlat43 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat44);
    u_xlat4 = _Splat0.sample(sampler_Splat0, input.TEXCOORD0.xy);
    u_xlat4 = u_xlat3.xxxx * u_xlat4;
    u_xlat4.w = u_xlat4.w * Globals._Smoothness0;
    u_xlat10_5 = half4(_Splat1.sample(sampler_Splat1, input.TEXCOORD0.zw));
    u_xlat5 = u_xlat3.yyyy * float4(u_xlat10_5);
    u_xlat5.w = u_xlat5.w * Globals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = half4(_Splat2.sample(sampler_Splat2, input.TEXCOORD1.xy));
    u_xlat5 = u_xlat3.zzzz * float4(u_xlat10_5);
    u_xlat5.w = u_xlat5.w * Globals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = half4(_Splat3.sample(sampler_Splat3, input.TEXCOORD1.zw));
    u_xlat5 = u_xlat3.wwww * float4(u_xlat10_5);
    u_xlat5.w = u_xlat5.w * Globals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5.xy = _Normal0.sample(sampler_Normal0, input.TEXCOORD0.xy).yw;
    u_xlat10_33.xy = half2(_Normal1.sample(sampler_Normal1, input.TEXCOORD0.zw).yw);
    u_xlat33.xy = u_xlat3.yy * float2(u_xlat10_33.yx);
    u_xlat5.xy = u_xlat3.xx * u_xlat5.yx + u_xlat33.xy;
    u_xlat10_33.xy = half2(_Normal2.sample(sampler_Normal2, input.TEXCOORD1.xy).yw);
    u_xlat5.xy = u_xlat3.zz * float2(u_xlat10_33.yx) + u_xlat5.xy;
    u_xlat10_33.xy = half2(_Normal3.sample(sampler_Normal3, input.TEXCOORD1.zw).yw);
    u_xlat5.xy = u_xlat3.ww * float2(u_xlat10_33.yx) + u_xlat5.xy;
    u_xlat5.xy = u_xlat5.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
    u_xlat44 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat5.z = sqrt(u_xlat44);
    u_xlat44 = dot(u_xlat3, float4(Globals._Metallic0, Globals._Metallic1, Globals._Metallic2, Globals._Metallic3));
    u_xlatb3 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb3){
        u_xlatb17 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.www * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD2.www + u_xlat6.xyz;
        u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD4.www + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat17.xyz = (bool(u_xlatb17)) ? u_xlat6.xyz : u_xlat0.xyz;
        u_xlat17.xyz = u_xlat17.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat17.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat17.x = u_xlat6.y * 0.25 + 0.75;
        u_xlat31 = Globals.unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat6.x = max(u_xlat31, u_xlat17.x);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat17.x = dot(u_xlat6, Globals.unity_OcclusionMaskSelector);
    u_xlat17.x = clamp(u_xlat17.x, 0.0f, 1.0f);
    u_xlat6.x = dot(input.TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat6.y = dot(input.TEXCOORD3.xyz, u_xlat5.xyz);
    u_xlat6.z = dot(input.TEXCOORD4.xyz, u_xlat5.xyz);
    u_xlat31 = (-u_xlat4.w) + 1.0;
    u_xlat45 = dot((-u_xlat2.xyz), u_xlat6.xyz);
    u_xlat45 = u_xlat45 + u_xlat45;
    u_xlat5.xyz = u_xlat6.xyz * (-float3(u_xlat45)) + (-u_xlat2.xyz);
    u_xlat7.xyz = u_xlat17.xxx * Globals._LightColor0.xyz;
    if(u_xlatb3){
        u_xlatb3 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = input.TEXCOORD3.www * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD2.www + u_xlat8.xyz;
        u_xlat8.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD4.www + u_xlat8.xyz;
        u_xlat8.xyz = u_xlat8.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyw = (bool(u_xlatb3)) ? u_xlat8.xyz : u_xlat0.xyz;
        u_xlat3.xyw = u_xlat3.xyw + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat8.yzw = u_xlat3.xyw * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat3.x = u_xlat8.y * 0.25;
        u_xlat17.x = Globals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat45 = (-Globals.unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat3.x = max(u_xlat17.x, u_xlat3.x);
        u_xlat8.x = min(u_xlat45, u_xlat3.x);
        u_xlat9 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xzw);
        u_xlat3.xyw = u_xlat8.xzw + float3(0.25, 0.0, 0.0);
        u_xlat10 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat3.xyw = u_xlat8.xzw + float3(0.5, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat6.w = 1.0;
        u_xlat9.x = dot(u_xlat9, u_xlat6);
        u_xlat9.y = dot(u_xlat10, u_xlat6);
        u_xlat9.z = dot(u_xlat8, u_xlat6);
    } else {
        u_xlat6.w = 1.0;
        u_xlat9.x = dot(Globals.unity_SHAr, u_xlat6);
        u_xlat9.y = dot(Globals.unity_SHAg, u_xlat6);
        u_xlat9.z = dot(Globals.unity_SHAb, u_xlat6);
    }
    u_xlat3.xyw = u_xlat9.xyz + input.TEXCOORD6.xyz;
    u_xlat3.xyw = max(u_xlat3.xyw, float3(0.0, 0.0, 0.0));
    u_xlat3.xyw = log2(u_xlat3.xyw);
    u_xlat3.xyw = u_xlat3.xyw * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyw = exp2(u_xlat3.xyw);
    u_xlat3.xyw = u_xlat3.xyw * float3(1.05499995, 1.05499995, 1.05499995) + float3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyw = max(u_xlat3.xyw, float3(0.0, 0.0, 0.0));
    u_xlatb47 = 0.0<Globals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb47){
        u_xlat47 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat47 = rsqrt(u_xlat47);
        u_xlat8.xyz = float3(u_xlat47) * u_xlat5.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + Globals.unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-u_xlat0.xyz) + Globals.unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = (float3(0.0, 0.0, 0.0)<u_xlat8.xyz);
        u_xlat9.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
        u_xlat9.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
        u_xlat9.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
        u_xlat47 = min(u_xlat9.y, u_xlat9.x);
        u_xlat47 = min(u_xlat9.z, u_xlat47);
        u_xlat9.xyz = u_xlat0.xyz + (-Globals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = u_xlat8.xyz * float3(u_xlat47) + u_xlat9.xyz;
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    }
    u_xlat47 = (-u_xlat31) * 0.699999988 + 1.70000005;
    u_xlat47 = u_xlat31 * u_xlat47;
    u_xlat47 = u_xlat47 * 6.0;
    u_xlat8 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat8.xyz, level(u_xlat47));
    u_xlat48 = u_xlat8.w + -1.0;
    u_xlat48 = Globals.unity_SpecCube0_HDR.w * u_xlat48 + 1.0;
    u_xlat48 = u_xlat48 * Globals.unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat8.xyz * float3(u_xlat48);
    u_xlatb49 = Globals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb49){
        u_xlatb49 = 0.0<Globals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb49){
            u_xlat49 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat49 = rsqrt(u_xlat49);
            u_xlat10.xyz = u_xlat5.xyz * float3(u_xlat49);
            u_xlat11.xyz = (-u_xlat0.xyz) + Globals.unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-u_xlat0.xyz) + Globals.unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = (float3(0.0, 0.0, 0.0)<u_xlat10.xyz);
            u_xlat11.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
            u_xlat11.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
            u_xlat11.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
            u_xlat49 = min(u_xlat11.y, u_xlat11.x);
            u_xlat49 = min(u_xlat11.z, u_xlat49);
            u_xlat0.xyz = u_xlat0.xyz + (-Globals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = u_xlat10.xyz * float3(u_xlat49) + u_xlat0.xyz;
        }
        u_xlat5 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat5.xyz, level(u_xlat47));
        u_xlat0.x = u_xlat5.w + -1.0;
        u_xlat0.x = Globals.unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
        u_xlat0.x = u_xlat0.x * Globals.unity_SpecCube1_HDR.x;
        u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx;
        u_xlat5.xyz = float3(u_xlat48) * u_xlat8.xyz + (-u_xlat0.xyz);
        u_xlat9.xyz = Globals.unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat0.xyz;
    }
    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = float3(u_xlat44) * u_xlat5.xyz + float3(0.220916301, 0.220916301, 0.220916301);
    u_xlat44 = (-u_xlat44) * 0.779083729 + 0.779083729;
    u_xlat4.xyz = float3(u_xlat44) * u_xlat4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(u_xlat42) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat1.xyz = float3(u_xlat42) * u_xlat1.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat0.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat14 = dot(Globals._WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat28 = u_xlat14 * u_xlat14;
    u_xlat28 = dot(float2(u_xlat28), float2(u_xlat31));
    u_xlat28 = u_xlat28 + -0.5;
    u_xlat1.x = (-u_xlat2.x) + 1.0;
    u_xlat15 = u_xlat1.x * u_xlat1.x;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat1.x = u_xlat1.x * u_xlat15;
    u_xlat1.x = u_xlat28 * u_xlat1.x + 1.0;
    u_xlat15 = -abs(u_xlat42) + 1.0;
    u_xlat29 = u_xlat15 * u_xlat15;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat15 = u_xlat15 * u_xlat29;
    u_xlat28 = u_xlat28 * u_xlat15 + 1.0;
    u_xlat0.z = u_xlat28 * u_xlat1.x;
    u_xlat1.x = u_xlat31 * u_xlat31;
    u_xlat29 = (-u_xlat31) * u_xlat31 + 1.0;
    u_xlat16 = abs(u_xlat42) * u_xlat29 + u_xlat1.x;
    u_xlat29 = u_xlat2.x * u_xlat29 + u_xlat1.x;
    u_xlat42 = abs(u_xlat42) * u_xlat29;
    u_xlat42 = u_xlat2.x * u_xlat16 + u_xlat42;
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat29 = u_xlat1.x * u_xlat1.x;
    u_xlat16 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);
    u_xlat0.x = u_xlat16 * u_xlat0.x + 1.0;
    u_xlat29 = u_xlat29 * 0.318309873;
    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;
    u_xlat0.x = u_xlat29 / u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat42;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.xz = u_xlat2.xx * u_xlat0.xz;
    u_xlat42 = u_xlat1.x * u_xlat31;
    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat1.x = (-u_xlat44) + u_xlat4.w;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat2.xyz = u_xlat7.xyz * u_xlat0.zzz + u_xlat3.xyw;
    u_xlat3.xyz = u_xlat7.xyz * u_xlat0.xxx;
    u_xlat0.x = (-u_xlat14) + 1.0;
    u_xlat14 = u_xlat0.x * u_xlat0.x;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat0.x = u_xlat0.x * u_xlat14;
    u_xlat6.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyz = u_xlat6.xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat9.xyz * float3(u_xlat42);
    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = float3(u_xlat15) * u_xlat3.xyz + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    output.SV_Target0.xyz = float3(u_xlat43) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec2 vs_TEXCOORD5;
out vec2 vs_TEXCOORD7;
out vec3 vs_TEXCOORD6;
out vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
    u_xlat1.xyz = u_xlat0.www * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD2.x = u_xlat1.z;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD2.y = u_xlat3.x;
    vs_TEXCOORD2.z = u_xlat2.x;
    vs_TEXCOORD3.x = u_xlat1.x;
    vs_TEXCOORD4.x = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat3.y;
    vs_TEXCOORD4.y = u_xlat3.z;
    vs_TEXCOORD3.z = u_xlat2.y;
    vs_TEXCOORD4.z = u_xlat2.w;
    vs_TEXCOORD5.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    vs_TEXCOORD7.xy = vec2(0.0, 0.0);
    u_xlat0.x = u_xlat2.y * u_xlat2.y;
    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
    u_xlat1 = u_xlat2.ywzx * u_xlat2;
    u_xlat2.x = dot(unity_SHBr, u_xlat1);
    u_xlat2.y = dot(unity_SHBg, u_xlat1);
    u_xlat2.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD6.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  sampler2D _Normal0;
uniform  sampler2D _Normal1;
uniform  sampler2D _Normal2;
uniform  sampler2D _Normal3;
uniform  samplerCube unity_SpecCube0;
uniform  samplerCube unity_SpecCube1;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec2 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
float u_xlat16_0;
vec3 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat16_3;
vec4 u_xlat10_3;
bool u_xlatb3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec3 u_xlat16_5;
vec4 u_xlat10_5;
vec4 u_xlat6;
vec4 u_xlat10_6;
vec3 u_xlat7;
vec4 u_xlat8;
vec4 u_xlat10_8;
vec3 u_xlat9;
vec4 u_xlat10_9;
vec3 u_xlat10;
vec4 u_xlat10_10;
vec3 u_xlat11;
bvec3 u_xlatb11;
vec3 u_xlat12;
bvec3 u_xlatb13;
float u_xlat14;
float u_xlat15;
float u_xlat16;
vec3 u_xlat17;
bool u_xlatb17;
float u_xlat28;
float u_xlat29;
float u_xlat31;
float u_xlat42;
float u_xlat16_43;
float u_xlat44;
float u_xlat16_44;
float u_xlat45;
float u_xlat47;
bool u_xlatb47;
float u_xlat48;
float u_xlat16_48;
float u_xlat49;
bool u_xlatb49;
void main()
{
    u_xlat0.x = vs_TEXCOORD2.w;
    u_xlat0.y = vs_TEXCOORD3.w;
    u_xlat0.z = vs_TEXCOORD4.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat2.xyz = vec3(u_xlat42) * u_xlat1.xyz;
    u_xlat10_3 = texture(_Control, vs_TEXCOORD5.xy);
    u_xlat16_43 = dot(u_xlat10_3, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_44 = u_xlat16_43 + 0.00100000005;
    u_xlat16_3 = u_xlat10_3 / vec4(u_xlat16_44);
    u_xlat10_4 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat4 = u_xlat16_3.xxxx * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness0;
    u_xlat10_5 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat5 = u_xlat16_3.yyyy * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat5 = u_xlat16_3.zzzz * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat5 = u_xlat16_3.wwww * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = texture(_Normal0, vs_TEXCOORD0.xy);
    u_xlat10_6 = texture(_Normal1, vs_TEXCOORD0.zw);
    u_xlat16_5.xz = u_xlat16_3.yy * u_xlat10_6.wy;
    u_xlat16_5.xy = u_xlat16_3.xx * u_xlat10_5.wy + u_xlat16_5.xz;
    u_xlat10_6 = texture(_Normal2, vs_TEXCOORD1.xy);
    u_xlat16_5.xy = u_xlat16_3.zz * u_xlat10_6.wy + u_xlat16_5.xy;
    u_xlat10_6 = texture(_Normal3, vs_TEXCOORD1.zw);
    u_xlat16_5.xy = u_xlat16_3.ww * u_xlat10_6.wy + u_xlat16_5.xy;
    u_xlat5.xy = u_xlat16_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat44 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat5.z = sqrt(u_xlat44);
    u_xlat44 = dot(u_xlat16_3, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlatb3 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb3){
        u_xlatb17 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD3.www * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat17.xyz = (bool(u_xlatb17)) ? u_xlat6.xyz : u_xlat0.xyz;
        u_xlat17.xyz = u_xlat17.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat6.yzw = u_xlat17.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat17.x = u_xlat6.y * 0.25 + 0.75;
        u_xlat31 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat6.x = max(u_xlat31, u_xlat17.x);
        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    //ENDIF
    }
    u_xlat17.x = dot(u_xlat6, unity_OcclusionMaskSelector);
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
    u_xlat6.x = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat6.y = dot(vs_TEXCOORD3.xyz, u_xlat5.xyz);
    u_xlat6.z = dot(vs_TEXCOORD4.xyz, u_xlat5.xyz);
    u_xlat31 = (-u_xlat4.w) + 1.0;
    u_xlat45 = dot((-u_xlat2.xyz), u_xlat6.xyz);
    u_xlat45 = u_xlat45 + u_xlat45;
    u_xlat5.xyz = u_xlat6.xyz * (-vec3(u_xlat45)) + (-u_xlat2.xyz);
    u_xlat7.xyz = u_xlat17.xxx * _LightColor0.xyz;
    if(u_xlatb3){
        u_xlatb3 = unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = vs_TEXCOORD3.www * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat8.xyz;
        u_xlat8.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat8.xyz;
        u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyw = (bool(u_xlatb3)) ? u_xlat8.xyz : u_xlat0.xyz;
        u_xlat3.xyw = u_xlat3.xyw + (-unity_ProbeVolumeMin.xyz);
        u_xlat8.yzw = u_xlat3.xyw * unity_ProbeVolumeSizeInv.xyz;
        u_xlat3.x = u_xlat8.y * 0.25;
        u_xlat17.x = unity_ProbeVolumeParams.z * 0.5;
        u_xlat45 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat3.x = max(u_xlat17.x, u_xlat3.x);
        u_xlat8.x = min(u_xlat45, u_xlat3.x);
        u_xlat10_9 = texture(unity_ProbeVolumeSH, u_xlat8.xzw);
        u_xlat3.xyw = u_xlat8.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_10 = texture(unity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat3.xyw = u_xlat8.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_8 = texture(unity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat6.w = 1.0;
        u_xlat9.x = dot(u_xlat10_9, u_xlat6);
        u_xlat9.y = dot(u_xlat10_10, u_xlat6);
        u_xlat9.z = dot(u_xlat10_8, u_xlat6);
    } else {
        u_xlat6.w = 1.0;
        u_xlat9.x = dot(unity_SHAr, u_xlat6);
        u_xlat9.y = dot(unity_SHAg, u_xlat6);
        u_xlat9.z = dot(unity_SHAb, u_xlat6);
    //ENDIF
    }
    u_xlat3.xyw = u_xlat9.xyz + vs_TEXCOORD6.xyz;
    u_xlat3.xyw = max(u_xlat3.xyw, vec3(0.0, 0.0, 0.0));
    u_xlat3.xyw = log2(u_xlat3.xyw);
    u_xlat3.xyw = u_xlat3.xyw * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyw = exp2(u_xlat3.xyw);
    u_xlat3.xyw = u_xlat3.xyw * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyw = max(u_xlat3.xyw, vec3(0.0, 0.0, 0.0));
    u_xlatb47 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb47){
        u_xlat47 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat47 = inversesqrt(u_xlat47);
        u_xlat8.xyz = vec3(u_xlat47) * u_xlat5.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
        u_xlat9.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
        u_xlat9.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
        u_xlat9.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
        u_xlat47 = min(u_xlat9.y, u_xlat9.x);
        u_xlat47 = min(u_xlat9.z, u_xlat47);
        u_xlat9.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat47) + u_xlat9.xyz;
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    //ENDIF
    }
    u_xlat47 = (-u_xlat31) * 0.699999988 + 1.70000005;
    u_xlat47 = u_xlat31 * u_xlat47;
    u_xlat47 = u_xlat47 * 6.0;
    u_xlat10_8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat47);
    u_xlat16_48 = u_xlat10_8.w + -1.0;
    u_xlat48 = unity_SpecCube0_HDR.w * u_xlat16_48 + 1.0;
    u_xlat48 = u_xlat48 * unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat10_8.xyz * vec3(u_xlat48);
    u_xlatb49 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb49){
        u_xlatb49 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb49){
            u_xlat49 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat49 = inversesqrt(u_xlat49);
            u_xlat10.xyz = u_xlat5.xyz * vec3(u_xlat49);
            u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
            u_xlat11.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
            u_xlat11.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
            u_xlat11.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
            u_xlat49 = min(u_xlat11.y, u_xlat11.x);
            u_xlat49 = min(u_xlat11.z, u_xlat49);
            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = u_xlat10.xyz * vec3(u_xlat49) + u_xlat0.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat47);
        u_xlat16_0 = u_xlat10_5.w + -1.0;
        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat16_0 + 1.0;
        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
        u_xlat0.xyz = u_xlat10_5.xyz * u_xlat0.xxx;
        u_xlat5.xyz = vec3(u_xlat48) * u_xlat10_8.xyz + (-u_xlat0.xyz);
        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = vec3(u_xlat44) * u_xlat5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat44 = (-u_xlat44) * 0.779083729 + 0.779083729;
    u_xlat4.xyz = vec3(u_xlat44) * u_xlat4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat42) + _WorldSpaceLightPos0.xyz;
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
    u_xlat28 = u_xlat14 * u_xlat14;
    u_xlat28 = dot(vec2(u_xlat28), vec2(u_xlat31));
    u_xlat28 = u_xlat28 + -0.5;
    u_xlat1.x = (-u_xlat2.x) + 1.0;
    u_xlat15 = u_xlat1.x * u_xlat1.x;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat1.x = u_xlat1.x * u_xlat15;
    u_xlat1.x = u_xlat28 * u_xlat1.x + 1.0;
    u_xlat15 = -abs(u_xlat42) + 1.0;
    u_xlat29 = u_xlat15 * u_xlat15;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat15 = u_xlat15 * u_xlat29;
    u_xlat28 = u_xlat28 * u_xlat15 + 1.0;
    u_xlat0.z = u_xlat28 * u_xlat1.x;
    u_xlat1.x = u_xlat31 * u_xlat31;
    u_xlat29 = (-u_xlat31) * u_xlat31 + 1.0;
    u_xlat16 = abs(u_xlat42) * u_xlat29 + u_xlat1.x;
    u_xlat29 = u_xlat2.x * u_xlat29 + u_xlat1.x;
    u_xlat42 = abs(u_xlat42) * u_xlat29;
    u_xlat42 = u_xlat2.x * u_xlat16 + u_xlat42;
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat29 = u_xlat1.x * u_xlat1.x;
    u_xlat16 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);
    u_xlat0.x = u_xlat16 * u_xlat0.x + 1.0;
    u_xlat29 = u_xlat29 * 0.318309873;
    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;
    u_xlat0.x = u_xlat29 / u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat42;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.xz = u_xlat2.xx * u_xlat0.xz;
    u_xlat42 = u_xlat1.x * u_xlat31;
    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat1.x = (-u_xlat44) + u_xlat4.w;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat2.xyz = u_xlat7.xyz * u_xlat0.zzz + u_xlat3.xyw;
    u_xlat3.xyz = u_xlat7.xyz * u_xlat0.xxx;
    u_xlat0.x = (-u_xlat14) + 1.0;
    u_xlat14 = u_xlat0.x * u_xlat0.x;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat0.x = u_xlat0.x * u_xlat14;
    u_xlat6.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyz = u_xlat6.xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat9.xyz * vec3(u_xlat42);
    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat3.xyz + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_43) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL SHADOWS_SCREEN _TERRAIN_NORMAL_MAP 
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (368 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 80
  Matrix4x4 unity_WorldToObject at 144
  Matrix4x4 unity_MatrixVP at 224
  Vector4 _ProjectionParams at 0
  Vector4 unity_SHBr at 16
  Vector4 unity_SHBg at 32
  Vector4 unity_SHBb at 48
  Vector4 unity_SHC at 64
  Vector4 unity_WorldTransformParams at 208
  Vector4 _Control_ST at 288
  Vector4 _Splat0_ST at 304
  Vector4 _Splat1_ST at 320
  Vector4 _Splat2_ST at 336
  Vector4 _Splat3_ST at 352
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 _ProjectionParams;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float4 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float4 TEXCOORD8 [[ user(TEXCOORD8) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float3 u_xlat4;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    output.mtl_Position = u_xlat1;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    output.TEXCOORD2.w = u_xlat0.x;
    u_xlat0.xw = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat0.xw = input.NORMAL0.yz * float2(1.0, 0.0) + (-u_xlat0.xw);
    u_xlat2.xyz = u_xlat0.www * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    output.TEXCOORD2.x = u_xlat2.z;
    u_xlat3.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz * (-Globals.unity_WorldTransformParams.www);
    output.TEXCOORD2.y = u_xlat4.x;
    output.TEXCOORD2.z = u_xlat3.x;
    output.TEXCOORD3.x = u_xlat2.x;
    output.TEXCOORD4.x = u_xlat2.y;
    output.TEXCOORD3.w = u_xlat0.y;
    output.TEXCOORD4.w = u_xlat0.z;
    output.TEXCOORD3.y = u_xlat4.y;
    output.TEXCOORD4.y = u_xlat4.z;
    output.TEXCOORD3.z = u_xlat3.y;
    output.TEXCOORD4.z = u_xlat3.w;
    output.TEXCOORD5.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    u_xlat0.x = u_xlat3.y * u_xlat3.y;
    u_xlat0.x = u_xlat3.x * u_xlat3.x + (-u_xlat0.x);
    u_xlat2 = u_xlat3.ywzx * u_xlat3;
    u_xlat3.x = dot(Globals.unity_SHBr, u_xlat2);
    u_xlat3.y = dot(Globals.unity_SHBg, u_xlat2);
    u_xlat3.z = dot(Globals.unity_SHBb, u_xlat2);
    output.TEXCOORD6.xyz = Globals.unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.x = u_xlat1.y * Globals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * float2(0.5, 0.5);
    output.TEXCOORD7.zw = u_xlat1.zw;
    output.TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD8 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_Normal0" to slot 5 sampler slot 8
Set 2D Texture "_Normal1" to slot 6 sampler slot 9
Set 2D Texture "_Normal2" to slot 7 sampler slot 10
Set 2D Texture "_Normal3" to slot 8 sampler slot 11
Set 2D Texture "_ShadowMapTexture" to slot 9 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 10 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 11 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 12 sampler slot 1

Constant Buffer "Globals" (480 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 128
  Matrix4x4 unity_ProbeVolumeWorldToObject at 336
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 _LightShadowData at 96
  Vector4 unity_ShadowFadeCenterAndType at 112
  Vector4 unity_SpecCube0_BoxMax at 192
  Vector4 unity_SpecCube0_BoxMin at 208
  Vector4 unity_SpecCube0_ProbePosition at 224
  Vector4 unity_SpecCube0_HDR at 240
  Vector4 unity_SpecCube1_BoxMax at 256
  Vector4 unity_SpecCube1_BoxMin at 272
  Vector4 unity_SpecCube1_ProbePosition at 288
  Vector4 unity_SpecCube1_HDR at 304
  Vector4 unity_ProbeVolumeParams at 320
  Vector3 unity_ProbeVolumeSizeInv at 400
  Vector3 unity_ProbeVolumeMin at 416
  Vector4 _LightColor0 at 432
  Float _Metallic0 at 448
  Float _Metallic1 at 452
  Float _Metallic2 at 456
  Float _Metallic3 at 460
  Float _Smoothness0 at 464
  Float _Smoothness1 at 468
  Float _Smoothness2 at 472
  Float _Smoothness3 at 476
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
    float4 TEXCOORD7 [[ user(TEXCOORD7) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler_Normal0 [[ sampler (8) ]],
    sampler sampler_Normal1 [[ sampler (9) ]],
    sampler sampler_Normal2 [[ sampler (10) ]],
    sampler sampler_Normal3 [[ sampler (11) ]],
    texture2d<float, access::sample > _Control [[ texture (0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture (2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture (3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture (4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture (5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture (6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture (7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture (8) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture (9) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture (10) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture (11) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (12) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    float4 u_xlat3;
    bool u_xlatb3;
    float4 u_xlat4;
    float4 u_xlat5;
    half4 u_xlat10_5;
    float4 u_xlat6;
    float3 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float3 u_xlat11;
    bool3 u_xlatb11;
    float3 u_xlat12;
    bool3 u_xlatb13;
    float u_xlat14;
    float u_xlat15;
    float u_xlat16;
    float3 u_xlat17;
    bool u_xlatb17;
    float u_xlat28;
    float u_xlat29;
    float u_xlat31;
    bool u_xlatb31;
    float2 u_xlat33;
    half2 u_xlat10_33;
    float u_xlat42;
    float u_xlat43;
    float u_xlat44;
    float u_xlat45;
    float u_xlat47;
    bool u_xlatb47;
    float u_xlat48;
    float u_xlat49;
    bool u_xlatb49;
    u_xlat0.x = input.TEXCOORD2.w;
    u_xlat0.y = input.TEXCOORD3.w;
    u_xlat0.z = input.TEXCOORD4.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat1.xyz;
    u_xlat3 = _Control.sample(sampler_Control, input.TEXCOORD5.xy);
    u_xlat43 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat44 = u_xlat43 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat44);
    u_xlat4 = _Splat0.sample(sampler_Splat0, input.TEXCOORD0.xy);
    u_xlat4 = u_xlat3.xxxx * u_xlat4;
    u_xlat4.w = u_xlat4.w * Globals._Smoothness0;
    u_xlat10_5 = half4(_Splat1.sample(sampler_Splat1, input.TEXCOORD0.zw));
    u_xlat5 = u_xlat3.yyyy * float4(u_xlat10_5);
    u_xlat5.w = u_xlat5.w * Globals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = half4(_Splat2.sample(sampler_Splat2, input.TEXCOORD1.xy));
    u_xlat5 = u_xlat3.zzzz * float4(u_xlat10_5);
    u_xlat5.w = u_xlat5.w * Globals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = half4(_Splat3.sample(sampler_Splat3, input.TEXCOORD1.zw));
    u_xlat5 = u_xlat3.wwww * float4(u_xlat10_5);
    u_xlat5.w = u_xlat5.w * Globals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5.xy = _Normal0.sample(sampler_Normal0, input.TEXCOORD0.xy).yw;
    u_xlat10_33.xy = half2(_Normal1.sample(sampler_Normal1, input.TEXCOORD0.zw).yw);
    u_xlat33.xy = u_xlat3.yy * float2(u_xlat10_33.yx);
    u_xlat5.xy = u_xlat3.xx * u_xlat5.yx + u_xlat33.xy;
    u_xlat10_33.xy = half2(_Normal2.sample(sampler_Normal2, input.TEXCOORD1.xy).yw);
    u_xlat5.xy = u_xlat3.zz * float2(u_xlat10_33.yx) + u_xlat5.xy;
    u_xlat10_33.xy = half2(_Normal3.sample(sampler_Normal3, input.TEXCOORD1.zw).yw);
    u_xlat5.xy = u_xlat3.ww * float2(u_xlat10_33.yx) + u_xlat5.xy;
    u_xlat5.xy = u_xlat5.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
    u_xlat44 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat5.z = sqrt(u_xlat44);
    u_xlat44 = dot(u_xlat3, float4(Globals._Metallic0, Globals._Metallic1, Globals._Metallic2, Globals._Metallic3));
    u_xlat3.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat17.xyz = u_xlat0.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat17.x = dot(u_xlat17.xyz, u_xlat17.xyz);
    u_xlat17.x = sqrt(u_xlat17.x);
    u_xlat17.x = (-u_xlat3.x) + u_xlat17.x;
    u_xlat3.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat17.x + u_xlat3.x;
    u_xlat3.x = u_xlat3.x * Globals._LightShadowData.z + Globals._LightShadowData.w;
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlatb17 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb17){
        u_xlatb31 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.www * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD2.www + u_xlat6.xyz;
        u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD4.www + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb31)) ? u_xlat6.xyz : u_xlat0.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat31 = u_xlat6.y * 0.25 + 0.75;
        u_xlat45 = Globals.unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat6.x = max(u_xlat45, u_xlat31);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat31 = dot(u_xlat6, Globals.unity_OcclusionMaskSelector);
    u_xlat31 = clamp(u_xlat31, 0.0f, 1.0f);
    u_xlat6.xy = input.TEXCOORD7.xy / input.TEXCOORD7.ww;
    u_xlat45 = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat6.xy).x;
    u_xlat3.x = u_xlat3.x + u_xlat45;
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat31 = min(u_xlat3.x, u_xlat31);
    u_xlat3.x = (u_xlatb17) ? u_xlat31 : u_xlat3.x;
    u_xlat6.x = dot(input.TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat6.y = dot(input.TEXCOORD3.xyz, u_xlat5.xyz);
    u_xlat6.z = dot(input.TEXCOORD4.xyz, u_xlat5.xyz);
    u_xlat31 = (-u_xlat4.w) + 1.0;
    u_xlat45 = dot((-u_xlat2.xyz), u_xlat6.xyz);
    u_xlat45 = u_xlat45 + u_xlat45;
    u_xlat5.xyz = u_xlat6.xyz * (-float3(u_xlat45)) + (-u_xlat2.xyz);
    u_xlat7.xyz = u_xlat3.xxx * Globals._LightColor0.xyz;
    if(u_xlatb17){
        u_xlatb3 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = input.TEXCOORD3.www * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD2.www + u_xlat8.xyz;
        u_xlat8.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD4.www + u_xlat8.xyz;
        u_xlat8.xyz = u_xlat8.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyw = (bool(u_xlatb3)) ? u_xlat8.xyz : u_xlat0.xyz;
        u_xlat3.xyw = u_xlat3.xyw + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat8.yzw = u_xlat3.xyw * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat3.x = u_xlat8.y * 0.25;
        u_xlat17.x = Globals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat45 = (-Globals.unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat3.x = max(u_xlat17.x, u_xlat3.x);
        u_xlat8.x = min(u_xlat45, u_xlat3.x);
        u_xlat9 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xzw);
        u_xlat3.xyw = u_xlat8.xzw + float3(0.25, 0.0, 0.0);
        u_xlat10 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat3.xyw = u_xlat8.xzw + float3(0.5, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat6.w = 1.0;
        u_xlat9.x = dot(u_xlat9, u_xlat6);
        u_xlat9.y = dot(u_xlat10, u_xlat6);
        u_xlat9.z = dot(u_xlat8, u_xlat6);
    } else {
        u_xlat6.w = 1.0;
        u_xlat9.x = dot(Globals.unity_SHAr, u_xlat6);
        u_xlat9.y = dot(Globals.unity_SHAg, u_xlat6);
        u_xlat9.z = dot(Globals.unity_SHAb, u_xlat6);
    }
    u_xlat3.xyw = u_xlat9.xyz + input.TEXCOORD6.xyz;
    u_xlat3.xyw = max(u_xlat3.xyw, float3(0.0, 0.0, 0.0));
    u_xlat3.xyw = log2(u_xlat3.xyw);
    u_xlat3.xyw = u_xlat3.xyw * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyw = exp2(u_xlat3.xyw);
    u_xlat3.xyw = u_xlat3.xyw * float3(1.05499995, 1.05499995, 1.05499995) + float3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyw = max(u_xlat3.xyw, float3(0.0, 0.0, 0.0));
    u_xlatb47 = 0.0<Globals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb47){
        u_xlat47 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat47 = rsqrt(u_xlat47);
        u_xlat8.xyz = float3(u_xlat47) * u_xlat5.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + Globals.unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-u_xlat0.xyz) + Globals.unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = (float3(0.0, 0.0, 0.0)<u_xlat8.xyz);
        u_xlat9.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
        u_xlat9.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
        u_xlat9.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
        u_xlat47 = min(u_xlat9.y, u_xlat9.x);
        u_xlat47 = min(u_xlat9.z, u_xlat47);
        u_xlat9.xyz = u_xlat0.xyz + (-Globals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = u_xlat8.xyz * float3(u_xlat47) + u_xlat9.xyz;
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    }
    u_xlat47 = (-u_xlat31) * 0.699999988 + 1.70000005;
    u_xlat47 = u_xlat31 * u_xlat47;
    u_xlat47 = u_xlat47 * 6.0;
    u_xlat8 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat8.xyz, level(u_xlat47));
    u_xlat48 = u_xlat8.w + -1.0;
    u_xlat48 = Globals.unity_SpecCube0_HDR.w * u_xlat48 + 1.0;
    u_xlat48 = u_xlat48 * Globals.unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat8.xyz * float3(u_xlat48);
    u_xlatb49 = Globals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb49){
        u_xlatb49 = 0.0<Globals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb49){
            u_xlat49 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat49 = rsqrt(u_xlat49);
            u_xlat10.xyz = u_xlat5.xyz * float3(u_xlat49);
            u_xlat11.xyz = (-u_xlat0.xyz) + Globals.unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-u_xlat0.xyz) + Globals.unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = (float3(0.0, 0.0, 0.0)<u_xlat10.xyz);
            u_xlat11.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
            u_xlat11.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
            u_xlat11.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
            u_xlat49 = min(u_xlat11.y, u_xlat11.x);
            u_xlat49 = min(u_xlat11.z, u_xlat49);
            u_xlat0.xyz = u_xlat0.xyz + (-Globals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = u_xlat10.xyz * float3(u_xlat49) + u_xlat0.xyz;
        }
        u_xlat5 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat5.xyz, level(u_xlat47));
        u_xlat0.x = u_xlat5.w + -1.0;
        u_xlat0.x = Globals.unity_SpecCube1_HDR.w * u_xlat0.x + 1.0;
        u_xlat0.x = u_xlat0.x * Globals.unity_SpecCube1_HDR.x;
        u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xxx;
        u_xlat5.xyz = float3(u_xlat48) * u_xlat8.xyz + (-u_xlat0.xyz);
        u_xlat9.xyz = Globals.unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat0.xyz;
    }
    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = float3(u_xlat44) * u_xlat5.xyz + float3(0.220916301, 0.220916301, 0.220916301);
    u_xlat44 = (-u_xlat44) * 0.779083729 + 0.779083729;
    u_xlat4.xyz = float3(u_xlat44) * u_xlat4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * float3(u_xlat42) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat1.xyz = float3(u_xlat42) * u_xlat1.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat0.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat14 = dot(Globals._WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat28 = u_xlat14 * u_xlat14;
    u_xlat28 = dot(float2(u_xlat28), float2(u_xlat31));
    u_xlat28 = u_xlat28 + -0.5;
    u_xlat1.x = (-u_xlat2.x) + 1.0;
    u_xlat15 = u_xlat1.x * u_xlat1.x;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat1.x = u_xlat1.x * u_xlat15;
    u_xlat1.x = u_xlat28 * u_xlat1.x + 1.0;
    u_xlat15 = -abs(u_xlat42) + 1.0;
    u_xlat29 = u_xlat15 * u_xlat15;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat15 = u_xlat15 * u_xlat29;
    u_xlat28 = u_xlat28 * u_xlat15 + 1.0;
    u_xlat0.z = u_xlat28 * u_xlat1.x;
    u_xlat1.x = u_xlat31 * u_xlat31;
    u_xlat29 = (-u_xlat31) * u_xlat31 + 1.0;
    u_xlat16 = abs(u_xlat42) * u_xlat29 + u_xlat1.x;
    u_xlat29 = u_xlat2.x * u_xlat29 + u_xlat1.x;
    u_xlat42 = abs(u_xlat42) * u_xlat29;
    u_xlat42 = u_xlat2.x * u_xlat16 + u_xlat42;
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat29 = u_xlat1.x * u_xlat1.x;
    u_xlat16 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);
    u_xlat0.x = u_xlat16 * u_xlat0.x + 1.0;
    u_xlat29 = u_xlat29 * 0.318309873;
    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;
    u_xlat0.x = u_xlat29 / u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat42;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.xz = u_xlat2.xx * u_xlat0.xz;
    u_xlat42 = u_xlat1.x * u_xlat31;
    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat1.x = (-u_xlat44) + u_xlat4.w;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat2.xyz = u_xlat7.xyz * u_xlat0.zzz + u_xlat3.xyw;
    u_xlat3.xyz = u_xlat7.xyz * u_xlat0.xxx;
    u_xlat0.x = (-u_xlat14) + 1.0;
    u_xlat14 = u_xlat0.x * u_xlat0.x;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat0.x = u_xlat0.x * u_xlat14;
    u_xlat6.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyz = u_xlat6.xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat9.xyz * float3(u_xlat42);
    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = float3(u_xlat15) * u_xlat3.xyz + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    output.SV_Target0.xyz = float3(u_xlat43) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec2 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
out vec4 vs_TEXCOORD7;
out vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
    u_xlat2.xyz = u_xlat0.www * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD2.x = u_xlat2.z;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.z = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat2.y;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    vs_TEXCOORD3.z = u_xlat3.y;
    vs_TEXCOORD4.z = u_xlat3.w;
    vs_TEXCOORD5.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    u_xlat0.x = u_xlat3.y * u_xlat3.y;
    u_xlat0.x = u_xlat3.x * u_xlat3.x + (-u_xlat0.x);
    u_xlat2 = u_xlat3.ywzx * u_xlat3;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    vs_TEXCOORD6.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  sampler2D _Normal0;
uniform  sampler2D _Normal1;
uniform  sampler2D _Normal2;
uniform  sampler2D _Normal3;
uniform  sampler2D _ShadowMapTexture;
uniform  samplerCube unity_SpecCube0;
uniform  samplerCube unity_SpecCube1;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec2 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
in  vec4 vs_TEXCOORD7;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
float u_xlat16_0;
vec3 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat16_3;
vec4 u_xlat10_3;
bool u_xlatb3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec3 u_xlat16_5;
vec4 u_xlat10_5;
vec4 u_xlat6;
vec4 u_xlat10_6;
vec3 u_xlat7;
vec4 u_xlat8;
vec4 u_xlat10_8;
vec3 u_xlat9;
vec4 u_xlat10_9;
vec3 u_xlat10;
vec4 u_xlat10_10;
vec3 u_xlat11;
bvec3 u_xlatb11;
vec3 u_xlat12;
bvec3 u_xlatb13;
float u_xlat14;
float u_xlat15;
float u_xlat16;
vec3 u_xlat17;
bool u_xlatb17;
float u_xlat28;
float u_xlat29;
float u_xlat31;
bool u_xlatb31;
float u_xlat42;
float u_xlat16_43;
float u_xlat44;
float u_xlat16_44;
float u_xlat45;
float u_xlat47;
bool u_xlatb47;
float u_xlat48;
float u_xlat16_48;
float u_xlat49;
bool u_xlatb49;
void main()
{
    u_xlat0.x = vs_TEXCOORD2.w;
    u_xlat0.y = vs_TEXCOORD3.w;
    u_xlat0.z = vs_TEXCOORD4.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat2.xyz = vec3(u_xlat42) * u_xlat1.xyz;
    u_xlat10_3 = texture(_Control, vs_TEXCOORD5.xy);
    u_xlat16_43 = dot(u_xlat10_3, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_44 = u_xlat16_43 + 0.00100000005;
    u_xlat16_3 = u_xlat10_3 / vec4(u_xlat16_44);
    u_xlat10_4 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat4 = u_xlat16_3.xxxx * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness0;
    u_xlat10_5 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat5 = u_xlat16_3.yyyy * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat5 = u_xlat16_3.zzzz * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat5 = u_xlat16_3.wwww * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = texture(_Normal0, vs_TEXCOORD0.xy);
    u_xlat10_6 = texture(_Normal1, vs_TEXCOORD0.zw);
    u_xlat16_5.xz = u_xlat16_3.yy * u_xlat10_6.wy;
    u_xlat16_5.xy = u_xlat16_3.xx * u_xlat10_5.wy + u_xlat16_5.xz;
    u_xlat10_6 = texture(_Normal2, vs_TEXCOORD1.xy);
    u_xlat16_5.xy = u_xlat16_3.zz * u_xlat10_6.wy + u_xlat16_5.xy;
    u_xlat10_6 = texture(_Normal3, vs_TEXCOORD1.zw);
    u_xlat16_5.xy = u_xlat16_3.ww * u_xlat10_6.wy + u_xlat16_5.xy;
    u_xlat5.xy = u_xlat16_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat44 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat5.z = sqrt(u_xlat44);
    u_xlat44 = dot(u_xlat16_3, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat17.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat17.x = dot(u_xlat17.xyz, u_xlat17.xyz);
    u_xlat17.x = sqrt(u_xlat17.x);
    u_xlat17.x = (-u_xlat3.x) + u_xlat17.x;
    u_xlat3.x = unity_ShadowFadeCenterAndType.w * u_xlat17.x + u_xlat3.x;
    u_xlat3.x = u_xlat3.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlatb17 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb17){
        u_xlatb31 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD3.www * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb31)) ? u_xlat6.xyz : u_xlat0.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat31 = u_xlat6.y * 0.25 + 0.75;
        u_xlat45 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat6.x = max(u_xlat45, u_xlat31);
        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    //ENDIF
    }
    u_xlat31 = dot(u_xlat6, unity_OcclusionMaskSelector);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat10_6 = texture(_ShadowMapTexture, u_xlat6.xy);
    u_xlat3.x = u_xlat3.x + u_xlat10_6.x;
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat31 = min(u_xlat3.x, u_xlat31);
    u_xlat3.x = (u_xlatb17) ? u_xlat31 : u_xlat3.x;
    u_xlat6.x = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat6.y = dot(vs_TEXCOORD3.xyz, u_xlat5.xyz);
    u_xlat6.z = dot(vs_TEXCOORD4.xyz, u_xlat5.xyz);
    u_xlat31 = (-u_xlat4.w) + 1.0;
    u_xlat45 = dot((-u_xlat2.xyz), u_xlat6.xyz);
    u_xlat45 = u_xlat45 + u_xlat45;
    u_xlat5.xyz = u_xlat6.xyz * (-vec3(u_xlat45)) + (-u_xlat2.xyz);
    u_xlat7.xyz = u_xlat3.xxx * _LightColor0.xyz;
    if(u_xlatb17){
        u_xlatb3 = unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = vs_TEXCOORD3.www * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat8.xyz;
        u_xlat8.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat8.xyz;
        u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyw = (bool(u_xlatb3)) ? u_xlat8.xyz : u_xlat0.xyz;
        u_xlat3.xyw = u_xlat3.xyw + (-unity_ProbeVolumeMin.xyz);
        u_xlat8.yzw = u_xlat3.xyw * unity_ProbeVolumeSizeInv.xyz;
        u_xlat3.x = u_xlat8.y * 0.25;
        u_xlat17.x = unity_ProbeVolumeParams.z * 0.5;
        u_xlat45 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat3.x = max(u_xlat17.x, u_xlat3.x);
        u_xlat8.x = min(u_xlat45, u_xlat3.x);
        u_xlat10_9 = texture(unity_ProbeVolumeSH, u_xlat8.xzw);
        u_xlat3.xyw = u_xlat8.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_10 = texture(unity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat3.xyw = u_xlat8.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_8 = texture(unity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat6.w = 1.0;
        u_xlat9.x = dot(u_xlat10_9, u_xlat6);
        u_xlat9.y = dot(u_xlat10_10, u_xlat6);
        u_xlat9.z = dot(u_xlat10_8, u_xlat6);
    } else {
        u_xlat6.w = 1.0;
        u_xlat9.x = dot(unity_SHAr, u_xlat6);
        u_xlat9.y = dot(unity_SHAg, u_xlat6);
        u_xlat9.z = dot(unity_SHAb, u_xlat6);
    //ENDIF
    }
    u_xlat3.xyw = u_xlat9.xyz + vs_TEXCOORD6.xyz;
    u_xlat3.xyw = max(u_xlat3.xyw, vec3(0.0, 0.0, 0.0));
    u_xlat3.xyw = log2(u_xlat3.xyw);
    u_xlat3.xyw = u_xlat3.xyw * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyw = exp2(u_xlat3.xyw);
    u_xlat3.xyw = u_xlat3.xyw * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyw = max(u_xlat3.xyw, vec3(0.0, 0.0, 0.0));
    u_xlatb47 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb47){
        u_xlat47 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat47 = inversesqrt(u_xlat47);
        u_xlat8.xyz = vec3(u_xlat47) * u_xlat5.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
        u_xlat9.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
        u_xlat9.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
        u_xlat9.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
        u_xlat47 = min(u_xlat9.y, u_xlat9.x);
        u_xlat47 = min(u_xlat9.z, u_xlat47);
        u_xlat9.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat47) + u_xlat9.xyz;
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    //ENDIF
    }
    u_xlat47 = (-u_xlat31) * 0.699999988 + 1.70000005;
    u_xlat47 = u_xlat31 * u_xlat47;
    u_xlat47 = u_xlat47 * 6.0;
    u_xlat10_8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat47);
    u_xlat16_48 = u_xlat10_8.w + -1.0;
    u_xlat48 = unity_SpecCube0_HDR.w * u_xlat16_48 + 1.0;
    u_xlat48 = u_xlat48 * unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat10_8.xyz * vec3(u_xlat48);
    u_xlatb49 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb49){
        u_xlatb49 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb49){
            u_xlat49 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat49 = inversesqrt(u_xlat49);
            u_xlat10.xyz = u_xlat5.xyz * vec3(u_xlat49);
            u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
            u_xlat11.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
            u_xlat11.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
            u_xlat11.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
            u_xlat49 = min(u_xlat11.y, u_xlat11.x);
            u_xlat49 = min(u_xlat11.z, u_xlat49);
            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = u_xlat10.xyz * vec3(u_xlat49) + u_xlat0.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat47);
        u_xlat16_0 = u_xlat10_5.w + -1.0;
        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat16_0 + 1.0;
        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
        u_xlat0.xyz = u_xlat10_5.xyz * u_xlat0.xxx;
        u_xlat5.xyz = vec3(u_xlat48) * u_xlat10_8.xyz + (-u_xlat0.xyz);
        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = vec3(u_xlat44) * u_xlat5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat44 = (-u_xlat44) * 0.779083729 + 0.779083729;
    u_xlat4.xyz = vec3(u_xlat44) * u_xlat4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat42) + _WorldSpaceLightPos0.xyz;
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
    u_xlat28 = u_xlat14 * u_xlat14;
    u_xlat28 = dot(vec2(u_xlat28), vec2(u_xlat31));
    u_xlat28 = u_xlat28 + -0.5;
    u_xlat1.x = (-u_xlat2.x) + 1.0;
    u_xlat15 = u_xlat1.x * u_xlat1.x;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat1.x = u_xlat1.x * u_xlat15;
    u_xlat1.x = u_xlat28 * u_xlat1.x + 1.0;
    u_xlat15 = -abs(u_xlat42) + 1.0;
    u_xlat29 = u_xlat15 * u_xlat15;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat15 = u_xlat15 * u_xlat29;
    u_xlat28 = u_xlat28 * u_xlat15 + 1.0;
    u_xlat0.z = u_xlat28 * u_xlat1.x;
    u_xlat1.x = u_xlat31 * u_xlat31;
    u_xlat29 = (-u_xlat31) * u_xlat31 + 1.0;
    u_xlat16 = abs(u_xlat42) * u_xlat29 + u_xlat1.x;
    u_xlat29 = u_xlat2.x * u_xlat29 + u_xlat1.x;
    u_xlat42 = abs(u_xlat42) * u_xlat29;
    u_xlat42 = u_xlat2.x * u_xlat16 + u_xlat42;
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat29 = u_xlat1.x * u_xlat1.x;
    u_xlat16 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);
    u_xlat0.x = u_xlat16 * u_xlat0.x + 1.0;
    u_xlat29 = u_xlat29 * 0.318309873;
    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;
    u_xlat0.x = u_xlat29 / u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat42;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.xz = u_xlat2.xx * u_xlat0.xz;
    u_xlat42 = u_xlat1.x * u_xlat31;
    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat1.x = (-u_xlat44) + 1.0;
    u_xlat1.x = u_xlat1.x + u_xlat4.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat2.xyz = u_xlat7.xyz * u_xlat0.zzz + u_xlat3.xyw;
    u_xlat3.xyz = u_xlat7.xyz * u_xlat0.xxx;
    u_xlat0.x = (-u_xlat14) + 1.0;
    u_xlat14 = u_xlat0.x * u_xlat0.x;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat0.x = u_xlat0.x * u_xlat14;
    u_xlat6.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyz = u_xlat6.xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat9.xyz * vec3(u_xlat42);
    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat3.xyz + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_43) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL VERTEXLIGHT_ON _TERRAIN_NORMAL_MAP 
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (544 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 256
  Matrix4x4 unity_WorldToObject at 320
  Matrix4x4 unity_MatrixVP at 400
  Vector4 unity_4LightPosX0 at 0
  Vector4 unity_4LightPosY0 at 16
  Vector4 unity_4LightPosZ0 at 32
  Vector4 unity_4LightAtten0 at 48
  Vector4 unity_LightColor[8] at 64
  Vector4 unity_SHBr at 192
  Vector4 unity_SHBg at 208
  Vector4 unity_SHBb at 224
  Vector4 unity_SHC at 240
  Vector4 unity_WorldTransformParams at 384
  Vector4 _Control_ST at 464
  Vector4 _Splat0_ST at 480
  Vector4 _Splat1_ST at 496
  Vector4 _Splat2_ST at 512
  Vector4 _Splat3_ST at 528
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float4 TEXCOORD8 [[ user(TEXCOORD8) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float3 u_xlat6;
    float u_xlat15;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    u_xlat1.xy = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat1.xy = input.NORMAL0.yz * float2(1.0, 0.0) + (-u_xlat1.xy);
    u_xlat6.xyz = u_xlat1.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat6.xyz;
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = rsqrt(u_xlat15);
    u_xlat1.xyz = float3(u_xlat15) * u_xlat1.xyz;
    output.TEXCOORD2.x = u_xlat1.z;
    u_xlat2.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = rsqrt(u_xlat15);
    u_xlat2 = float4(u_xlat15) * u_xlat2.xyzz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * (-Globals.unity_WorldTransformParams.www);
    output.TEXCOORD2.y = u_xlat3.x;
    output.TEXCOORD2.w = u_xlat0.x;
    output.TEXCOORD2.z = u_xlat2.x;
    output.TEXCOORD3.x = u_xlat1.x;
    output.TEXCOORD4.x = u_xlat1.y;
    output.TEXCOORD3.y = u_xlat3.y;
    output.TEXCOORD4.y = u_xlat3.z;
    output.TEXCOORD3.w = u_xlat0.y;
    output.TEXCOORD3.z = u_xlat2.y;
    output.TEXCOORD4.w = u_xlat0.z;
    output.TEXCOORD4.z = u_xlat2.w;
    output.TEXCOORD5.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    output.TEXCOORD7.xy = float2(0.0, 0.0);
    u_xlat1 = (-u_xlat0.xxxx) + Globals.unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + Globals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + Globals.unity_4LightPosZ0;
    u_xlat4 = u_xlat2.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = rsqrt(u_xlat0);
    u_xlat0 = u_xlat0 * Globals.unity_4LightAtten0 + float4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * Globals.unity_LightColor[1].xyz;
    u_xlat1.xyz = Globals.unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = Globals.unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = Globals.unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * float3(0.305306017, 0.305306017, 0.305306017) + float3(0.682171106, 0.682171106, 0.682171106);
    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + float3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat15 = u_xlat2.y * u_xlat2.y;
    u_xlat15 = u_xlat2.x * u_xlat2.x + (-u_xlat15);
    u_xlat2 = u_xlat2.ywzx * u_xlat2;
    u_xlat3.x = dot(Globals.unity_SHBr, u_xlat2);
    u_xlat3.y = dot(Globals.unity_SHBg, u_xlat2);
    u_xlat3.z = dot(Globals.unity_SHBb, u_xlat2);
    u_xlat2.xyz = Globals.unity_SHC.xyz * float3(u_xlat15) + u_xlat3.xyz;
    output.TEXCOORD6.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
    output.TEXCOORD8 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec2 vs_TEXCOORD5;
out vec2 vs_TEXCOORD7;
out vec3 vs_TEXCOORD6;
out vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat6;
float u_xlat15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
    u_xlat6.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat6.xyz;
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD2.x = u_xlat1.z;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2 = vec4(u_xlat15) * u_xlat2.xyzz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD2.y = u_xlat3.x;
    vs_TEXCOORD2.w = u_xlat0.x;
    vs_TEXCOORD2.z = u_xlat2.x;
    vs_TEXCOORD3.x = u_xlat1.x;
    vs_TEXCOORD4.x = u_xlat1.y;
    vs_TEXCOORD3.y = u_xlat3.y;
    vs_TEXCOORD4.y = u_xlat3.z;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD3.z = u_xlat2.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD4.z = u_xlat2.w;
    vs_TEXCOORD5.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    vs_TEXCOORD7.xy = vec2(0.0, 0.0);
    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat2.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat15 = u_xlat2.y * u_xlat2.y;
    u_xlat15 = u_xlat2.x * u_xlat2.x + (-u_xlat15);
    u_xlat2 = u_xlat2.ywzx * u_xlat2;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat3.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  sampler2D _Normal0;
uniform  sampler2D _Normal1;
uniform  sampler2D _Normal2;
uniform  sampler2D _Normal3;
uniform  samplerCube unity_SpecCube0;
uniform  samplerCube unity_SpecCube1;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec2 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
float u_xlat16_0;
vec3 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat16_3;
vec4 u_xlat10_3;
bool u_xlatb3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec3 u_xlat16_5;
vec4 u_xlat10_5;
vec4 u_xlat6;
vec4 u_xlat10_6;
vec3 u_xlat7;
vec4 u_xlat8;
vec4 u_xlat10_8;
vec3 u_xlat9;
vec4 u_xlat10_9;
vec3 u_xlat10;
vec4 u_xlat10_10;
vec3 u_xlat11;
bvec3 u_xlatb11;
vec3 u_xlat12;
bvec3 u_xlatb13;
float u_xlat14;
float u_xlat15;
float u_xlat16;
vec3 u_xlat17;
bool u_xlatb17;
float u_xlat28;
float u_xlat29;
float u_xlat31;
float u_xlat42;
float u_xlat16_43;
float u_xlat44;
float u_xlat16_44;
float u_xlat45;
float u_xlat47;
bool u_xlatb47;
float u_xlat48;
float u_xlat16_48;
float u_xlat49;
bool u_xlatb49;
void main()
{
    u_xlat0.x = vs_TEXCOORD2.w;
    u_xlat0.y = vs_TEXCOORD3.w;
    u_xlat0.z = vs_TEXCOORD4.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat2.xyz = vec3(u_xlat42) * u_xlat1.xyz;
    u_xlat10_3 = texture(_Control, vs_TEXCOORD5.xy);
    u_xlat16_43 = dot(u_xlat10_3, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_44 = u_xlat16_43 + 0.00100000005;
    u_xlat16_3 = u_xlat10_3 / vec4(u_xlat16_44);
    u_xlat10_4 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat4 = u_xlat16_3.xxxx * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness0;
    u_xlat10_5 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat5 = u_xlat16_3.yyyy * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat5 = u_xlat16_3.zzzz * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat5 = u_xlat16_3.wwww * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = texture(_Normal0, vs_TEXCOORD0.xy);
    u_xlat10_6 = texture(_Normal1, vs_TEXCOORD0.zw);
    u_xlat16_5.xz = u_xlat16_3.yy * u_xlat10_6.wy;
    u_xlat16_5.xy = u_xlat16_3.xx * u_xlat10_5.wy + u_xlat16_5.xz;
    u_xlat10_6 = texture(_Normal2, vs_TEXCOORD1.xy);
    u_xlat16_5.xy = u_xlat16_3.zz * u_xlat10_6.wy + u_xlat16_5.xy;
    u_xlat10_6 = texture(_Normal3, vs_TEXCOORD1.zw);
    u_xlat16_5.xy = u_xlat16_3.ww * u_xlat10_6.wy + u_xlat16_5.xy;
    u_xlat5.xy = u_xlat16_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat44 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat5.z = sqrt(u_xlat44);
    u_xlat44 = dot(u_xlat16_3, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlatb3 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb3){
        u_xlatb17 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD3.www * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat17.xyz = (bool(u_xlatb17)) ? u_xlat6.xyz : u_xlat0.xyz;
        u_xlat17.xyz = u_xlat17.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat6.yzw = u_xlat17.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat17.x = u_xlat6.y * 0.25 + 0.75;
        u_xlat31 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat6.x = max(u_xlat31, u_xlat17.x);
        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    //ENDIF
    }
    u_xlat17.x = dot(u_xlat6, unity_OcclusionMaskSelector);
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
    u_xlat6.x = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat6.y = dot(vs_TEXCOORD3.xyz, u_xlat5.xyz);
    u_xlat6.z = dot(vs_TEXCOORD4.xyz, u_xlat5.xyz);
    u_xlat31 = (-u_xlat4.w) + 1.0;
    u_xlat45 = dot((-u_xlat2.xyz), u_xlat6.xyz);
    u_xlat45 = u_xlat45 + u_xlat45;
    u_xlat5.xyz = u_xlat6.xyz * (-vec3(u_xlat45)) + (-u_xlat2.xyz);
    u_xlat7.xyz = u_xlat17.xxx * _LightColor0.xyz;
    if(u_xlatb3){
        u_xlatb3 = unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = vs_TEXCOORD3.www * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat8.xyz;
        u_xlat8.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat8.xyz;
        u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyw = (bool(u_xlatb3)) ? u_xlat8.xyz : u_xlat0.xyz;
        u_xlat3.xyw = u_xlat3.xyw + (-unity_ProbeVolumeMin.xyz);
        u_xlat8.yzw = u_xlat3.xyw * unity_ProbeVolumeSizeInv.xyz;
        u_xlat3.x = u_xlat8.y * 0.25;
        u_xlat17.x = unity_ProbeVolumeParams.z * 0.5;
        u_xlat45 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat3.x = max(u_xlat17.x, u_xlat3.x);
        u_xlat8.x = min(u_xlat45, u_xlat3.x);
        u_xlat10_9 = texture(unity_ProbeVolumeSH, u_xlat8.xzw);
        u_xlat3.xyw = u_xlat8.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_10 = texture(unity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat3.xyw = u_xlat8.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_8 = texture(unity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat6.w = 1.0;
        u_xlat9.x = dot(u_xlat10_9, u_xlat6);
        u_xlat9.y = dot(u_xlat10_10, u_xlat6);
        u_xlat9.z = dot(u_xlat10_8, u_xlat6);
    } else {
        u_xlat6.w = 1.0;
        u_xlat9.x = dot(unity_SHAr, u_xlat6);
        u_xlat9.y = dot(unity_SHAg, u_xlat6);
        u_xlat9.z = dot(unity_SHAb, u_xlat6);
    //ENDIF
    }
    u_xlat3.xyw = u_xlat9.xyz + vs_TEXCOORD6.xyz;
    u_xlat3.xyw = max(u_xlat3.xyw, vec3(0.0, 0.0, 0.0));
    u_xlat3.xyw = log2(u_xlat3.xyw);
    u_xlat3.xyw = u_xlat3.xyw * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyw = exp2(u_xlat3.xyw);
    u_xlat3.xyw = u_xlat3.xyw * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyw = max(u_xlat3.xyw, vec3(0.0, 0.0, 0.0));
    u_xlatb47 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb47){
        u_xlat47 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat47 = inversesqrt(u_xlat47);
        u_xlat8.xyz = vec3(u_xlat47) * u_xlat5.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
        u_xlat9.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
        u_xlat9.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
        u_xlat9.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
        u_xlat47 = min(u_xlat9.y, u_xlat9.x);
        u_xlat47 = min(u_xlat9.z, u_xlat47);
        u_xlat9.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat47) + u_xlat9.xyz;
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    //ENDIF
    }
    u_xlat47 = (-u_xlat31) * 0.699999988 + 1.70000005;
    u_xlat47 = u_xlat31 * u_xlat47;
    u_xlat47 = u_xlat47 * 6.0;
    u_xlat10_8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat47);
    u_xlat16_48 = u_xlat10_8.w + -1.0;
    u_xlat48 = unity_SpecCube0_HDR.w * u_xlat16_48 + 1.0;
    u_xlat48 = u_xlat48 * unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat10_8.xyz * vec3(u_xlat48);
    u_xlatb49 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb49){
        u_xlatb49 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb49){
            u_xlat49 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat49 = inversesqrt(u_xlat49);
            u_xlat10.xyz = u_xlat5.xyz * vec3(u_xlat49);
            u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
            u_xlat11.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
            u_xlat11.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
            u_xlat11.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
            u_xlat49 = min(u_xlat11.y, u_xlat11.x);
            u_xlat49 = min(u_xlat11.z, u_xlat49);
            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = u_xlat10.xyz * vec3(u_xlat49) + u_xlat0.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat47);
        u_xlat16_0 = u_xlat10_5.w + -1.0;
        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat16_0 + 1.0;
        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
        u_xlat0.xyz = u_xlat10_5.xyz * u_xlat0.xxx;
        u_xlat5.xyz = vec3(u_xlat48) * u_xlat10_8.xyz + (-u_xlat0.xyz);
        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = vec3(u_xlat44) * u_xlat5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat44 = (-u_xlat44) * 0.779083729 + 0.779083729;
    u_xlat4.xyz = vec3(u_xlat44) * u_xlat4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat42) + _WorldSpaceLightPos0.xyz;
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
    u_xlat28 = u_xlat14 * u_xlat14;
    u_xlat28 = dot(vec2(u_xlat28), vec2(u_xlat31));
    u_xlat28 = u_xlat28 + -0.5;
    u_xlat1.x = (-u_xlat2.x) + 1.0;
    u_xlat15 = u_xlat1.x * u_xlat1.x;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat1.x = u_xlat1.x * u_xlat15;
    u_xlat1.x = u_xlat28 * u_xlat1.x + 1.0;
    u_xlat15 = -abs(u_xlat42) + 1.0;
    u_xlat29 = u_xlat15 * u_xlat15;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat15 = u_xlat15 * u_xlat29;
    u_xlat28 = u_xlat28 * u_xlat15 + 1.0;
    u_xlat0.z = u_xlat28 * u_xlat1.x;
    u_xlat1.x = u_xlat31 * u_xlat31;
    u_xlat29 = (-u_xlat31) * u_xlat31 + 1.0;
    u_xlat16 = abs(u_xlat42) * u_xlat29 + u_xlat1.x;
    u_xlat29 = u_xlat2.x * u_xlat29 + u_xlat1.x;
    u_xlat42 = abs(u_xlat42) * u_xlat29;
    u_xlat42 = u_xlat2.x * u_xlat16 + u_xlat42;
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat29 = u_xlat1.x * u_xlat1.x;
    u_xlat16 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);
    u_xlat0.x = u_xlat16 * u_xlat0.x + 1.0;
    u_xlat29 = u_xlat29 * 0.318309873;
    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;
    u_xlat0.x = u_xlat29 / u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat42;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.xz = u_xlat2.xx * u_xlat0.xz;
    u_xlat42 = u_xlat1.x * u_xlat31;
    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat1.x = (-u_xlat44) + u_xlat4.w;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat2.xyz = u_xlat7.xyz * u_xlat0.zzz + u_xlat3.xyw;
    u_xlat3.xyz = u_xlat7.xyz * u_xlat0.xxx;
    u_xlat0.x = (-u_xlat14) + 1.0;
    u_xlat14 = u_xlat0.x * u_xlat0.x;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat0.x = u_xlat0.x * u_xlat14;
    u_xlat6.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyz = u_xlat6.xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat9.xyz * vec3(u_xlat42);
    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat3.xyz + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_43) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL SHADOWS_SCREEN VERTEXLIGHT_ON _TERRAIN_NORMAL_MAP 
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (560 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 272
  Matrix4x4 unity_WorldToObject at 336
  Matrix4x4 unity_MatrixVP at 416
  Vector4 _ProjectionParams at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  Vector4 unity_4LightAtten0 at 64
  Vector4 unity_LightColor[8] at 80
  Vector4 unity_SHBr at 208
  Vector4 unity_SHBg at 224
  Vector4 unity_SHBb at 240
  Vector4 unity_SHC at 256
  Vector4 unity_WorldTransformParams at 400
  Vector4 _Control_ST at 480
  Vector4 _Splat0_ST at 496
  Vector4 _Splat1_ST at 512
  Vector4 _Splat2_ST at 528
  Vector4 _Splat3_ST at 544
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 _ProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float4 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float4 TEXCOORD8 [[ user(TEXCOORD8) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat8;
    float u_xlat18;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    output.mtl_Position = u_xlat1;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    u_xlat2.xy = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat2.xy = input.NORMAL0.yz * float2(1.0, 0.0) + (-u_xlat2.xy);
    u_xlat8.xyz = u_xlat2.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat2.xxx + u_xlat8.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat2.xyz = float3(u_xlat18) * u_xlat2.xyz;
    output.TEXCOORD2.x = u_xlat2.z;
    u_xlat3.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat3 = float4(u_xlat18) * u_xlat3.xyzz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz * (-Globals.unity_WorldTransformParams.www);
    output.TEXCOORD2.y = u_xlat4.x;
    output.TEXCOORD2.w = u_xlat0.x;
    output.TEXCOORD2.z = u_xlat3.x;
    output.TEXCOORD3.x = u_xlat2.x;
    output.TEXCOORD4.x = u_xlat2.y;
    output.TEXCOORD3.y = u_xlat4.y;
    output.TEXCOORD4.y = u_xlat4.z;
    output.TEXCOORD3.w = u_xlat0.y;
    output.TEXCOORD3.z = u_xlat3.y;
    output.TEXCOORD4.w = u_xlat0.z;
    output.TEXCOORD4.z = u_xlat3.w;
    output.TEXCOORD5.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    u_xlat2 = (-u_xlat0.xxxx) + Globals.unity_4LightPosX0;
    u_xlat4 = (-u_xlat0.yyyy) + Globals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + Globals.unity_4LightPosZ0;
    u_xlat5 = u_xlat3.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat4 = u_xlat2 * u_xlat2 + u_xlat4;
    u_xlat2 = u_xlat2 * u_xlat3.xxxx + u_xlat5;
    u_xlat2 = u_xlat0 * u_xlat3.wwzw + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat4 = rsqrt(u_xlat0);
    u_xlat0 = u_xlat0 * Globals.unity_4LightAtten0 + float4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat4;
    u_xlat2 = max(u_xlat2, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * Globals.unity_LightColor[1].xyz;
    u_xlat2.xyz = Globals.unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = Globals.unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = Globals.unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * float3(0.305306017, 0.305306017, 0.305306017) + float3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + float3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat18 = u_xlat3.y * u_xlat3.y;
    u_xlat18 = u_xlat3.x * u_xlat3.x + (-u_xlat18);
    u_xlat3 = u_xlat3.ywzx * u_xlat3;
    u_xlat4.x = dot(Globals.unity_SHBr, u_xlat3);
    u_xlat4.y = dot(Globals.unity_SHBg, u_xlat3);
    u_xlat4.z = dot(Globals.unity_SHBb, u_xlat3);
    u_xlat3.xyz = Globals.unity_SHC.xyz * float3(u_xlat18) + u_xlat4.xyz;
    output.TEXCOORD6.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat0.x = u_xlat1.y * Globals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * float2(0.5, 0.5);
    output.TEXCOORD7.zw = u_xlat1.zw;
    output.TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD8 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec2 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
out vec4 vs_TEXCOORD7;
out vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat8;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlat2.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
    u_xlat2.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat2.xy);
    u_xlat8.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat2.xxx + u_xlat8.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    vs_TEXCOORD2.x = u_xlat2.z;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3 = vec4(u_xlat18) * u_xlat3.xyzz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.w = u_xlat0.x;
    vs_TEXCOORD2.z = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat2.y;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD3.z = u_xlat3.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD4.z = u_xlat3.w;
    vs_TEXCOORD5.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat5 = u_xlat3.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat4 = u_xlat2 * u_xlat2 + u_xlat4;
    u_xlat2 = u_xlat2 * u_xlat3.xxxx + u_xlat5;
    u_xlat2 = u_xlat0 * u_xlat3.wwzw + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat4 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat4;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat18 = u_xlat3.y * u_xlat3.y;
    u_xlat18 = u_xlat3.x * u_xlat3.x + (-u_xlat18);
    u_xlat3 = u_xlat3.ywzx * u_xlat3;
    u_xlat4.x = dot(unity_SHBr, u_xlat3);
    u_xlat4.y = dot(unity_SHBg, u_xlat3);
    u_xlat4.z = dot(unity_SHBb, u_xlat3);
    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat4.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  sampler2D _Normal0;
uniform  sampler2D _Normal1;
uniform  sampler2D _Normal2;
uniform  sampler2D _Normal3;
uniform  sampler2D _ShadowMapTexture;
uniform  samplerCube unity_SpecCube0;
uniform  samplerCube unity_SpecCube1;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec2 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
in  vec4 vs_TEXCOORD7;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
float u_xlat16_0;
vec3 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat16_3;
vec4 u_xlat10_3;
bool u_xlatb3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec3 u_xlat16_5;
vec4 u_xlat10_5;
vec4 u_xlat6;
vec4 u_xlat10_6;
vec3 u_xlat7;
vec4 u_xlat8;
vec4 u_xlat10_8;
vec3 u_xlat9;
vec4 u_xlat10_9;
vec3 u_xlat10;
vec4 u_xlat10_10;
vec3 u_xlat11;
bvec3 u_xlatb11;
vec3 u_xlat12;
bvec3 u_xlatb13;
float u_xlat14;
float u_xlat15;
float u_xlat16;
vec3 u_xlat17;
bool u_xlatb17;
float u_xlat28;
float u_xlat29;
float u_xlat31;
bool u_xlatb31;
float u_xlat42;
float u_xlat16_43;
float u_xlat44;
float u_xlat16_44;
float u_xlat45;
float u_xlat47;
bool u_xlatb47;
float u_xlat48;
float u_xlat16_48;
float u_xlat49;
bool u_xlatb49;
void main()
{
    u_xlat0.x = vs_TEXCOORD2.w;
    u_xlat0.y = vs_TEXCOORD3.w;
    u_xlat0.z = vs_TEXCOORD4.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat2.xyz = vec3(u_xlat42) * u_xlat1.xyz;
    u_xlat10_3 = texture(_Control, vs_TEXCOORD5.xy);
    u_xlat16_43 = dot(u_xlat10_3, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_44 = u_xlat16_43 + 0.00100000005;
    u_xlat16_3 = u_xlat10_3 / vec4(u_xlat16_44);
    u_xlat10_4 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat4 = u_xlat16_3.xxxx * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness0;
    u_xlat10_5 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat5 = u_xlat16_3.yyyy * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat5 = u_xlat16_3.zzzz * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat5 = u_xlat16_3.wwww * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = texture(_Normal0, vs_TEXCOORD0.xy);
    u_xlat10_6 = texture(_Normal1, vs_TEXCOORD0.zw);
    u_xlat16_5.xz = u_xlat16_3.yy * u_xlat10_6.wy;
    u_xlat16_5.xy = u_xlat16_3.xx * u_xlat10_5.wy + u_xlat16_5.xz;
    u_xlat10_6 = texture(_Normal2, vs_TEXCOORD1.xy);
    u_xlat16_5.xy = u_xlat16_3.zz * u_xlat10_6.wy + u_xlat16_5.xy;
    u_xlat10_6 = texture(_Normal3, vs_TEXCOORD1.zw);
    u_xlat16_5.xy = u_xlat16_3.ww * u_xlat10_6.wy + u_xlat16_5.xy;
    u_xlat5.xy = u_xlat16_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat44 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat5.z = sqrt(u_xlat44);
    u_xlat44 = dot(u_xlat16_3, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat17.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat17.x = dot(u_xlat17.xyz, u_xlat17.xyz);
    u_xlat17.x = sqrt(u_xlat17.x);
    u_xlat17.x = (-u_xlat3.x) + u_xlat17.x;
    u_xlat3.x = unity_ShadowFadeCenterAndType.w * u_xlat17.x + u_xlat3.x;
    u_xlat3.x = u_xlat3.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlatb17 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb17){
        u_xlatb31 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD3.www * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb31)) ? u_xlat6.xyz : u_xlat0.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat31 = u_xlat6.y * 0.25 + 0.75;
        u_xlat45 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat6.x = max(u_xlat45, u_xlat31);
        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    //ENDIF
    }
    u_xlat31 = dot(u_xlat6, unity_OcclusionMaskSelector);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat10_6 = texture(_ShadowMapTexture, u_xlat6.xy);
    u_xlat3.x = u_xlat3.x + u_xlat10_6.x;
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat31 = min(u_xlat3.x, u_xlat31);
    u_xlat3.x = (u_xlatb17) ? u_xlat31 : u_xlat3.x;
    u_xlat6.x = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat6.y = dot(vs_TEXCOORD3.xyz, u_xlat5.xyz);
    u_xlat6.z = dot(vs_TEXCOORD4.xyz, u_xlat5.xyz);
    u_xlat31 = (-u_xlat4.w) + 1.0;
    u_xlat45 = dot((-u_xlat2.xyz), u_xlat6.xyz);
    u_xlat45 = u_xlat45 + u_xlat45;
    u_xlat5.xyz = u_xlat6.xyz * (-vec3(u_xlat45)) + (-u_xlat2.xyz);
    u_xlat7.xyz = u_xlat3.xxx * _LightColor0.xyz;
    if(u_xlatb17){
        u_xlatb3 = unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = vs_TEXCOORD3.www * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat8.xyz;
        u_xlat8.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat8.xyz;
        u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyw = (bool(u_xlatb3)) ? u_xlat8.xyz : u_xlat0.xyz;
        u_xlat3.xyw = u_xlat3.xyw + (-unity_ProbeVolumeMin.xyz);
        u_xlat8.yzw = u_xlat3.xyw * unity_ProbeVolumeSizeInv.xyz;
        u_xlat3.x = u_xlat8.y * 0.25;
        u_xlat17.x = unity_ProbeVolumeParams.z * 0.5;
        u_xlat45 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat3.x = max(u_xlat17.x, u_xlat3.x);
        u_xlat8.x = min(u_xlat45, u_xlat3.x);
        u_xlat10_9 = texture(unity_ProbeVolumeSH, u_xlat8.xzw);
        u_xlat3.xyw = u_xlat8.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_10 = texture(unity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat3.xyw = u_xlat8.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_8 = texture(unity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat6.w = 1.0;
        u_xlat9.x = dot(u_xlat10_9, u_xlat6);
        u_xlat9.y = dot(u_xlat10_10, u_xlat6);
        u_xlat9.z = dot(u_xlat10_8, u_xlat6);
    } else {
        u_xlat6.w = 1.0;
        u_xlat9.x = dot(unity_SHAr, u_xlat6);
        u_xlat9.y = dot(unity_SHAg, u_xlat6);
        u_xlat9.z = dot(unity_SHAb, u_xlat6);
    //ENDIF
    }
    u_xlat3.xyw = u_xlat9.xyz + vs_TEXCOORD6.xyz;
    u_xlat3.xyw = max(u_xlat3.xyw, vec3(0.0, 0.0, 0.0));
    u_xlat3.xyw = log2(u_xlat3.xyw);
    u_xlat3.xyw = u_xlat3.xyw * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyw = exp2(u_xlat3.xyw);
    u_xlat3.xyw = u_xlat3.xyw * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyw = max(u_xlat3.xyw, vec3(0.0, 0.0, 0.0));
    u_xlatb47 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb47){
        u_xlat47 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat47 = inversesqrt(u_xlat47);
        u_xlat8.xyz = vec3(u_xlat47) * u_xlat5.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
        u_xlat9.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
        u_xlat9.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
        u_xlat9.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
        u_xlat47 = min(u_xlat9.y, u_xlat9.x);
        u_xlat47 = min(u_xlat9.z, u_xlat47);
        u_xlat9.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat47) + u_xlat9.xyz;
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    //ENDIF
    }
    u_xlat47 = (-u_xlat31) * 0.699999988 + 1.70000005;
    u_xlat47 = u_xlat31 * u_xlat47;
    u_xlat47 = u_xlat47 * 6.0;
    u_xlat10_8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat47);
    u_xlat16_48 = u_xlat10_8.w + -1.0;
    u_xlat48 = unity_SpecCube0_HDR.w * u_xlat16_48 + 1.0;
    u_xlat48 = u_xlat48 * unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat10_8.xyz * vec3(u_xlat48);
    u_xlatb49 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb49){
        u_xlatb49 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb49){
            u_xlat49 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat49 = inversesqrt(u_xlat49);
            u_xlat10.xyz = u_xlat5.xyz * vec3(u_xlat49);
            u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-u_xlat0.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
            u_xlat11.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
            u_xlat11.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
            u_xlat11.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
            u_xlat49 = min(u_xlat11.y, u_xlat11.x);
            u_xlat49 = min(u_xlat11.z, u_xlat49);
            u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = u_xlat10.xyz * vec3(u_xlat49) + u_xlat0.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat47);
        u_xlat16_0 = u_xlat10_5.w + -1.0;
        u_xlat0.x = unity_SpecCube1_HDR.w * u_xlat16_0 + 1.0;
        u_xlat0.x = u_xlat0.x * unity_SpecCube1_HDR.x;
        u_xlat0.xyz = u_xlat10_5.xyz * u_xlat0.xxx;
        u_xlat5.xyz = vec3(u_xlat48) * u_xlat10_8.xyz + (-u_xlat0.xyz);
        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = vec3(u_xlat44) * u_xlat5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat44 = (-u_xlat44) * 0.779083729 + 0.779083729;
    u_xlat4.xyz = vec3(u_xlat44) * u_xlat4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat42) + _WorldSpaceLightPos0.xyz;
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
    u_xlat28 = u_xlat14 * u_xlat14;
    u_xlat28 = dot(vec2(u_xlat28), vec2(u_xlat31));
    u_xlat28 = u_xlat28 + -0.5;
    u_xlat1.x = (-u_xlat2.x) + 1.0;
    u_xlat15 = u_xlat1.x * u_xlat1.x;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat1.x = u_xlat1.x * u_xlat15;
    u_xlat1.x = u_xlat28 * u_xlat1.x + 1.0;
    u_xlat15 = -abs(u_xlat42) + 1.0;
    u_xlat29 = u_xlat15 * u_xlat15;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat15 = u_xlat15 * u_xlat29;
    u_xlat28 = u_xlat28 * u_xlat15 + 1.0;
    u_xlat0.z = u_xlat28 * u_xlat1.x;
    u_xlat1.x = u_xlat31 * u_xlat31;
    u_xlat29 = (-u_xlat31) * u_xlat31 + 1.0;
    u_xlat16 = abs(u_xlat42) * u_xlat29 + u_xlat1.x;
    u_xlat29 = u_xlat2.x * u_xlat29 + u_xlat1.x;
    u_xlat42 = abs(u_xlat42) * u_xlat29;
    u_xlat42 = u_xlat2.x * u_xlat16 + u_xlat42;
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat29 = u_xlat1.x * u_xlat1.x;
    u_xlat16 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);
    u_xlat0.x = u_xlat16 * u_xlat0.x + 1.0;
    u_xlat29 = u_xlat29 * 0.318309873;
    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;
    u_xlat0.x = u_xlat29 / u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat42;
    u_xlat0.x = u_xlat0.x * 3.14159274;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.xz = u_xlat2.xx * u_xlat0.xz;
    u_xlat42 = u_xlat1.x * u_xlat31;
    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat1.x = (-u_xlat44) + 1.0;
    u_xlat1.x = u_xlat1.x + u_xlat4.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat2.xyz = u_xlat7.xyz * u_xlat0.zzz + u_xlat3.xyw;
    u_xlat3.xyz = u_xlat7.xyz * u_xlat0.xxx;
    u_xlat0.x = (-u_xlat14) + 1.0;
    u_xlat14 = u_xlat0.x * u_xlat0.x;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat0.x = u_xlat0.x * u_xlat14;
    u_xlat6.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyz = u_xlat6.xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat9.xyz * vec3(u_xlat42);
    u_xlat3.xyz = (-u_xlat5.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat3.xyz + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_43) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

 }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="FORWARDADD" "QUEUE"="Geometry-100" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
  ZWrite Off
  Blend One One
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
Keywords set in this variant: POINT 
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (272 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 128
  Vector4 _Control_ST at 192
  Vector4 _Splat0_ST at 208
  Vector4 _Splat1_ST at 224
  Vector4 _Splat2_ST at 240
  Vector4 _Splat3_ST at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD3.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD2.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    output.TEXCOORD5.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 2
Set 2D Texture "_Splat0" to slot 1 sampler slot 3
Set 2D Texture "_Splat1" to slot 2 sampler slot 4
Set 2D Texture "_Splat2" to slot 3 sampler slot 5
Set 2D Texture "_Splat3" to slot 4 sampler slot 6
Set 2D Texture "_LightTexture0" to slot 5 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 6 sampler slot 0

Constant Buffer "Globals" (272 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Float _Metallic0 at 240
  Float _Metallic1 at 244
  Float _Metallic2 at 248
  Float _Metallic3 at 252
  Float _Smoothness0 at 256
  Float _Smoothness1 at 260
  Float _Smoothness2 at 264
  Float _Smoothness3 at 268
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    texture2d<float, access::sample > _Control [[ texture (0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture (2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture (3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture (4) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture (5) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    half4 u_xlat10_5;
    float3 u_xlat6;
    float3 u_xlat7;
    float u_xlat8;
    float u_xlat9;
    float u_xlat12;
    float u_xlat14;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    bool u_xlatb24;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
    u_xlat3 = _Control.sample(sampler_Control, input.TEXCOORD4.xy);
    u_xlat22 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat23 = u_xlat22 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat23);
    u_xlat4 = _Splat0.sample(sampler_Splat0, input.TEXCOORD0.xy);
    u_xlat4 = u_xlat3.xxxx * u_xlat4;
    u_xlat4.w = u_xlat4.w * Globals._Smoothness0;
    u_xlat10_5 = half4(_Splat1.sample(sampler_Splat1, input.TEXCOORD0.zw));
    u_xlat5 = u_xlat3.yyyy * float4(u_xlat10_5);
    u_xlat5.w = u_xlat5.w * Globals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = half4(_Splat2.sample(sampler_Splat2, input.TEXCOORD1.xy));
    u_xlat5 = u_xlat3.zzzz * float4(u_xlat10_5);
    u_xlat5.w = u_xlat5.w * Globals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = half4(_Splat3.sample(sampler_Splat3, input.TEXCOORD1.zw));
    u_xlat5 = u_xlat3.wwww * float4(u_xlat10_5);
    u_xlat5.w = u_xlat5.w * Globals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat23 = dot(u_xlat3, float4(Globals._Metallic0, Globals._Metallic1, Globals._Metallic2, Globals._Metallic3));
    u_xlat3.xyz = input.TEXCOORD3.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD3.xxx + u_xlat3.xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD3.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb24 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb24){
        u_xlatb24 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD3.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD3.xxx + u_xlat5.xyz;
        u_xlat5.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD3.zzz + u_xlat5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb24)) ? u_xlat5.xyz : input.TEXCOORD3.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat24 = u_xlat5.y * 0.25 + 0.75;
        u_xlat12 = Globals.unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat5.x = max(u_xlat24, u_xlat12);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat24 = dot(u_xlat5, Globals.unity_OcclusionMaskSelector);
    u_xlat24 = clamp(u_xlat24, 0.0f, 1.0f);
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xx).w;
    u_xlat3.x = u_xlat24 * u_xlat3.x;
    u_xlat3.xyz = u_xlat3.xxx * Globals._LightColor0.xyz;
    u_xlat24 = dot(input.TEXCOORD2.xyz, input.TEXCOORD2.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat5.xyz = float3(u_xlat24) * input.TEXCOORD2.xyz;
    u_xlat6.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = float3(u_xlat23) * u_xlat6.xyz + float3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = (-u_xlat23) * 0.779083729 + 0.779083729;
    u_xlat4.xyz = float3(u_xlat23) * u_xlat4.xyz;
    u_xlat23 = (-u_xlat4.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat21) + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, float2(u_xlat23));
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat1.x;
    u_xlat14 = u_xlat7.x * u_xlat14 + 1.0;
    u_xlat1.x = -abs(u_xlat21) + 1.0;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat7.x = u_xlat7.x * u_xlat1.x + 1.0;
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat23 * u_xlat23;
    u_xlat1.x = (-u_xlat23) * u_xlat23 + 1.0;
    u_xlat8 = abs(u_xlat21) * u_xlat1.x + u_xlat14;
    u_xlat1.x = u_xlat2.x * u_xlat1.x + u_xlat14;
    u_xlat21 = abs(u_xlat21) * u_xlat1.x;
    u_xlat21 = u_xlat2.x * u_xlat8 + u_xlat21;
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat9 * u_xlat14 + (-u_xlat9);
    u_xlat1.x = u_xlat1.x * u_xlat9 + 1.0;
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat14 = u_xlat14 / u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat2.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat3.xyz;
    u_xlat7.xyz = u_xlat3.xyz * float3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat0.xyz;
    output.SV_Target0.xyz = float3(u_xlat22) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
out vec2 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat16_3;
vec4 u_xlat10_3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat10_5;
vec3 u_xlat6;
vec3 u_xlat7;
float u_xlat8;
float u_xlat9;
float u_xlat12;
float u_xlat14;
float u_xlat21;
bool u_xlatb21;
float u_xlat22;
float u_xlat16_22;
float u_xlat23;
float u_xlat16_23;
float u_xlat24;
bool u_xlatb24;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
    u_xlat10_3 = texture(_Control, vs_TEXCOORD4.xy);
    u_xlat16_22 = dot(u_xlat10_3, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_23 = u_xlat16_22 + 0.00100000005;
    u_xlat16_3 = u_xlat10_3 / vec4(u_xlat16_23);
    u_xlat10_4 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat4 = u_xlat16_3.xxxx * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness0;
    u_xlat10_5 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat5 = u_xlat16_3.yyyy * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat5 = u_xlat16_3.zzzz * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat5 = u_xlat16_3.wwww * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat23 = dot(u_xlat16_3, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlat3.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb24 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb24){
        u_xlatb24 = unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat5.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb24)) ? u_xlat5.xyz : vs_TEXCOORD3.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat24 = u_xlat5.y * 0.25 + 0.75;
        u_xlat12 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat5.x = max(u_xlat24, u_xlat12);
        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    //ENDIF
    }
    u_xlat24 = dot(u_xlat5, unity_OcclusionMaskSelector);
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10_5 = texture(_LightTexture0, u_xlat3.xx);
    u_xlat3.x = u_xlat24 * u_xlat10_5.w;
    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
    u_xlat24 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * vs_TEXCOORD2.xyz;
    u_xlat6.xyz = u_xlat4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = vec3(u_xlat23) * u_xlat6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = (-u_xlat23) * 0.779083729 + 0.779083729;
    u_xlat4.xyz = vec3(u_xlat23) * u_xlat4.xyz;
    u_xlat23 = (-u_xlat4.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21) + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat9 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, vec2(u_xlat23));
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat1.x;
    u_xlat14 = u_xlat7.x * u_xlat14 + 1.0;
    u_xlat1.x = -abs(u_xlat21) + 1.0;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat7.x = u_xlat7.x * u_xlat1.x + 1.0;
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat23 * u_xlat23;
    u_xlat1.x = (-u_xlat23) * u_xlat23 + 1.0;
    u_xlat8 = abs(u_xlat21) * u_xlat1.x + u_xlat14;
    u_xlat1.x = u_xlat2.x * u_xlat1.x + u_xlat14;
    u_xlat21 = abs(u_xlat21) * u_xlat1.x;
    u_xlat21 = u_xlat2.x * u_xlat8 + u_xlat21;
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat9 * u_xlat14 + (-u_xlat9);
    u_xlat1.x = u_xlat1.x * u_xlat9 + 1.0;
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat14 = u_xlat14 / u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat2.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat3.xyz;
    u_xlat7.xyz = u_xlat3.xyz * vec3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_22) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (272 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 128
  Vector4 _Control_ST at 192
  Vector4 _Splat0_ST at 208
  Vector4 _Splat1_ST at 224
  Vector4 _Splat2_ST at 240
  Vector4 _Splat3_ST at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD3.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD2.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    output.TEXCOORD5.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 1
Set 2D Texture "_Splat0" to slot 1 sampler slot 2
Set 2D Texture "_Splat1" to slot 2 sampler slot 3
Set 2D Texture "_Splat2" to slot 3 sampler slot 4
Set 2D Texture "_Splat3" to slot 4 sampler slot 5
Set 3D Texture "unity_ProbeVolumeSH" to slot 5 sampler slot 0

Constant Buffer "Globals" (208 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Float _Metallic0 at 176
  Float _Metallic1 at 180
  Float _Metallic2 at 184
  Float _Metallic3 at 188
  Float _Smoothness0 at 192
  Float _Smoothness1 at 196
  Float _Smoothness2 at 200
  Float _Smoothness3 at 204
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_Control [[ sampler (1) ]],
    sampler sampler_Splat0 [[ sampler (2) ]],
    sampler sampler_Splat1 [[ sampler (3) ]],
    sampler sampler_Splat2 [[ sampler (4) ]],
    sampler sampler_Splat3 [[ sampler (5) ]],
    texture2d<float, access::sample > _Control [[ texture (0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture (2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture (3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture (4) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    half4 u_xlat10_4;
    float3 u_xlat5;
    float3 u_xlat6;
    float u_xlat7;
    float3 u_xlat8;
    bool u_xlatb8;
    float u_xlat12;
    float u_xlat13;
    float u_xlat14;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    float u_xlat21;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat1.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat2 = _Control.sample(sampler_Control, input.TEXCOORD4.xy);
    u_xlat19 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat19 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3 = _Splat0.sample(sampler_Splat0, input.TEXCOORD0.xy);
    u_xlat3 = u_xlat2.xxxx * u_xlat3;
    u_xlat3.w = u_xlat3.w * Globals._Smoothness0;
    u_xlat10_4 = half4(_Splat1.sample(sampler_Splat1, input.TEXCOORD0.zw));
    u_xlat4 = u_xlat2.yyyy * float4(u_xlat10_4);
    u_xlat4.w = u_xlat4.w * Globals._Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = half4(_Splat2.sample(sampler_Splat2, input.TEXCOORD1.xy));
    u_xlat4 = u_xlat2.zzzz * float4(u_xlat10_4);
    u_xlat4.w = u_xlat4.w * Globals._Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = half4(_Splat3.sample(sampler_Splat3, input.TEXCOORD1.zw));
    u_xlat4 = u_xlat2.wwww * float4(u_xlat10_4);
    u_xlat4.w = u_xlat4.w * Globals._Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat2.x = dot(u_xlat2, float4(Globals._Metallic0, Globals._Metallic1, Globals._Metallic2, Globals._Metallic3));
    u_xlatb8 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb8){
        u_xlatb8 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD3.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD3.xxx + u_xlat4.xyz;
        u_xlat4.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD3.zzz + u_xlat4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat8.xyz = (bool(u_xlatb8)) ? u_xlat4.xyz : input.TEXCOORD3.xyz;
        u_xlat8.xyz = u_xlat8.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat8.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat8.x = u_xlat4.y * 0.25 + 0.75;
        u_xlat14 = Globals.unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat4.x = max(u_xlat14, u_xlat8.x);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat8.x = dot(u_xlat4, Globals.unity_OcclusionMaskSelector);
    u_xlat8.x = clamp(u_xlat8.x, 0.0f, 1.0f);
    u_xlat8.xyz = u_xlat8.xxx * Globals._LightColor0.xyz;
    u_xlat4.x = dot(input.TEXCOORD2.xyz, input.TEXCOORD2.xyz);
    u_xlat4.x = rsqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * input.TEXCOORD2.xyz;
    u_xlat5.xyz = u_xlat3.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz + float3(0.220916301, 0.220916301, 0.220916301);
    u_xlat2.x = (-u_xlat2.x) * 0.779083729 + 0.779083729;
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat2.x = (-u_xlat3.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat18) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat0.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat7 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat7 = clamp(u_xlat7, 0.0f, 1.0f);
    u_xlat0.x = dot(Globals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.x = u_xlat0.x * u_xlat0.x;
    u_xlat6.x = dot(u_xlat6.xx, u_xlat2.xx);
    u_xlat6.x = u_xlat6.x + -0.5;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat12 = u_xlat6.x * u_xlat12 + 1.0;
    u_xlat13 = -abs(u_xlat18) + 1.0;
    u_xlat21 = u_xlat13 * u_xlat13;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat13 = u_xlat13 * u_xlat21;
    u_xlat6.x = u_xlat6.x * u_xlat13 + 1.0;
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat12 = u_xlat2.x * u_xlat2.x;
    u_xlat13 = (-u_xlat2.x) * u_xlat2.x + 1.0;
    u_xlat2.x = abs(u_xlat18) * u_xlat13 + u_xlat12;
    u_xlat13 = u_xlat1.x * u_xlat13 + u_xlat12;
    u_xlat18 = abs(u_xlat18) * u_xlat13;
    u_xlat18 = u_xlat1.x * u_xlat2.x + u_xlat18;
    u_xlat18 = u_xlat18 + 9.99999975e-06;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat7 * u_xlat12 + (-u_xlat7);
    u_xlat7 = u_xlat13 * u_xlat7 + 1.0;
    u_xlat12 = u_xlat12 * 0.318309873;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat12 = u_xlat12 / u_xlat7;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat6.y = sqrt(u_xlat12);
    u_xlat6.xy = u_xlat1.xx * u_xlat6.xy;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat6.y;
    u_xlat1.xyz = u_xlat6.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat8.xyz * float3(u_xlat12);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
    output.SV_Target0.xyz = float3(u_xlat19) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
out vec2 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec4 u_xlat16_2;
vec4 u_xlat10_2;
vec4 u_xlat3;
float u_xlat16_3;
vec4 u_xlat10_3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
float u_xlat14;
float u_xlat18;
bool u_xlatb18;
float u_xlat16_19;
float u_xlat21;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat10_2 = texture(_Control, vs_TEXCOORD4.xy);
    u_xlat16_19 = dot(u_xlat10_2, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = u_xlat16_19 + 0.00100000005;
    u_xlat16_2 = u_xlat10_2 / vec4(u_xlat16_3);
    u_xlat10_3 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat3 = u_xlat16_2.xxxx * u_xlat10_3;
    u_xlat3.w = u_xlat3.w * _Smoothness0;
    u_xlat10_4 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat4 = u_xlat16_2.yyyy * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat4 = u_xlat16_2.zzzz * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat4 = u_xlat16_2.wwww * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat2.x = dot(u_xlat16_2, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlatb8 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb8){
        u_xlatb8 = unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat8.xyz = (bool(u_xlatb8)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
        u_xlat8.xyz = u_xlat8.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat4.yzw = u_xlat8.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat8.x = u_xlat4.y * 0.25 + 0.75;
        u_xlat14 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat4.x = max(u_xlat14, u_xlat8.x);
        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    //ENDIF
    }
    u_xlat8.x = dot(u_xlat4, unity_OcclusionMaskSelector);
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
    u_xlat8.xyz = u_xlat8.xxx * _LightColor0.xyz;
    u_xlat4.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD2.xyz;
    u_xlat5.xyz = u_xlat3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat2.x = (-u_xlat2.x) * 0.779083729 + 0.779083729;
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat2.x = (-u_xlat3.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat7 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat6.x = u_xlat0.x * u_xlat0.x;
    u_xlat6.x = dot(u_xlat6.xx, u_xlat2.xx);
    u_xlat6.x = u_xlat6.x + -0.5;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat12 = u_xlat6.x * u_xlat12 + 1.0;
    u_xlat13 = -abs(u_xlat18) + 1.0;
    u_xlat21 = u_xlat13 * u_xlat13;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat13 = u_xlat13 * u_xlat21;
    u_xlat6.x = u_xlat6.x * u_xlat13 + 1.0;
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat12 = u_xlat2.x * u_xlat2.x;
    u_xlat13 = (-u_xlat2.x) * u_xlat2.x + 1.0;
    u_xlat2.x = abs(u_xlat18) * u_xlat13 + u_xlat12;
    u_xlat13 = u_xlat1.x * u_xlat13 + u_xlat12;
    u_xlat18 = abs(u_xlat18) * u_xlat13;
    u_xlat18 = u_xlat1.x * u_xlat2.x + u_xlat18;
    u_xlat18 = u_xlat18 + 9.99999975e-06;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat7 * u_xlat12 + (-u_xlat7);
    u_xlat7 = u_xlat13 * u_xlat7 + 1.0;
    u_xlat12 = u_xlat12 * 0.318309873;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat12 = u_xlat12 / u_xlat7;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat6.y = sqrt(u_xlat12);
    u_xlat6.xy = u_xlat1.xx * u_xlat6.xy;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat6.y;
    u_xlat1.xyz = u_xlat6.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat8.xyz * vec3(u_xlat12);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_19) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (272 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 128
  Vector4 _Control_ST at 192
  Vector4 _Splat0_ST at 208
  Vector4 _Splat1_ST at 224
  Vector4 _Splat2_ST at 240
  Vector4 _Splat3_ST at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD3.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD2.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    output.TEXCOORD5.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_LightTexture0" to slot 5 sampler slot 1
Set 2D Texture "_LightTextureB0" to slot 6 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 0

Constant Buffer "Globals" (272 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Float _Metallic0 at 240
  Float _Metallic1 at 244
  Float _Metallic2 at 248
  Float _Metallic3 at 252
  Float _Smoothness0 at 256
  Float _Smoothness1 at 260
  Float _Smoothness2 at 264
  Float _Smoothness3 at 268
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_LightTextureB0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    texture2d<float, access::sample > _Control [[ texture (0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture (2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture (3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture (4) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture (5) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture (6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    half4 u_xlat10_5;
    bool u_xlatb5;
    float3 u_xlat6;
    float3 u_xlat7;
    float u_xlat8;
    float u_xlat9;
    float3 u_xlat12;
    bool u_xlatb12;
    float u_xlat14;
    float2 u_xlat19;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
    u_xlat3 = _Control.sample(sampler_Control, input.TEXCOORD4.xy);
    u_xlat22 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat23 = u_xlat22 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat23);
    u_xlat4 = _Splat0.sample(sampler_Splat0, input.TEXCOORD0.xy);
    u_xlat4 = u_xlat3.xxxx * u_xlat4;
    u_xlat4.w = u_xlat4.w * Globals._Smoothness0;
    u_xlat10_5 = half4(_Splat1.sample(sampler_Splat1, input.TEXCOORD0.zw));
    u_xlat5 = u_xlat3.yyyy * float4(u_xlat10_5);
    u_xlat5.w = u_xlat5.w * Globals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = half4(_Splat2.sample(sampler_Splat2, input.TEXCOORD1.xy));
    u_xlat5 = u_xlat3.zzzz * float4(u_xlat10_5);
    u_xlat5.w = u_xlat5.w * Globals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = half4(_Splat3.sample(sampler_Splat3, input.TEXCOORD1.zw));
    u_xlat5 = u_xlat3.wwww * float4(u_xlat10_5);
    u_xlat5.w = u_xlat5.w * Globals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat23 = dot(u_xlat3, float4(Globals._Metallic0, Globals._Metallic1, Globals._Metallic2, Globals._Metallic3));
    u_xlat3 = input.TEXCOORD3.yyyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat3 = Globals.hlslcc_mtx4x4unity_WorldToLight[0] * input.TEXCOORD3.xxxx + u_xlat3;
    u_xlat3 = Globals.hlslcc_mtx4x4unity_WorldToLight[2] * input.TEXCOORD3.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + Globals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlatb5 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb5){
        u_xlatb5 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat12.xyz = input.TEXCOORD3.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat12.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD3.xxx + u_xlat12.xyz;
        u_xlat12.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD3.zzz + u_xlat12.xyz;
        u_xlat12.xyz = u_xlat12.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb5)) ? u_xlat12.xyz : input.TEXCOORD3.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat12.x = u_xlat5.y * 0.25 + 0.75;
        u_xlat6.x = Globals.unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat5.x = max(u_xlat12.x, u_xlat6.x);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat5.x = dot(u_xlat5, Globals.unity_OcclusionMaskSelector);
    u_xlat5.x = clamp(u_xlat5.x, 0.0f, 1.0f);
    u_xlatb12 = 0.0<u_xlat3.z;
    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat19.xy = u_xlat3.xy / u_xlat3.ww;
    u_xlat19.xy = u_xlat19.xy + float2(0.5, 0.5);
    u_xlat24 = _LightTexture0.sample(sampler_LightTexture0, u_xlat19.xy).w;
    u_xlat24 = u_xlat24 * u_xlat12.x;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.x = _LightTextureB0.sample(sampler_LightTextureB0, u_xlat3.xx).w;
    u_xlat3.x = u_xlat3.x * u_xlat24;
    u_xlat3.x = u_xlat5.x * u_xlat3.x;
    u_xlat3.xyz = u_xlat3.xxx * Globals._LightColor0.xyz;
    u_xlat24 = dot(input.TEXCOORD2.xyz, input.TEXCOORD2.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat5.xyz = float3(u_xlat24) * input.TEXCOORD2.xyz;
    u_xlat6.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = float3(u_xlat23) * u_xlat6.xyz + float3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = (-u_xlat23) * 0.779083729 + 0.779083729;
    u_xlat4.xyz = float3(u_xlat23) * u_xlat4.xyz;
    u_xlat23 = (-u_xlat4.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat21) + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, float2(u_xlat23));
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat1.x;
    u_xlat14 = u_xlat7.x * u_xlat14 + 1.0;
    u_xlat1.x = -abs(u_xlat21) + 1.0;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat7.x = u_xlat7.x * u_xlat1.x + 1.0;
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat23 * u_xlat23;
    u_xlat1.x = (-u_xlat23) * u_xlat23 + 1.0;
    u_xlat8 = abs(u_xlat21) * u_xlat1.x + u_xlat14;
    u_xlat1.x = u_xlat2.x * u_xlat1.x + u_xlat14;
    u_xlat21 = abs(u_xlat21) * u_xlat1.x;
    u_xlat21 = u_xlat2.x * u_xlat8 + u_xlat21;
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat9 * u_xlat14 + (-u_xlat9);
    u_xlat1.x = u_xlat1.x * u_xlat9 + 1.0;
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat14 = u_xlat14 / u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat2.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat3.xyz;
    u_xlat7.xyz = u_xlat3.xyz * float3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat0.xyz;
    output.SV_Target0.xyz = float3(u_xlat22) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
out vec2 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat16_3;
vec4 u_xlat10_3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat10_5;
bool u_xlatb5;
vec3 u_xlat6;
vec4 u_xlat10_6;
vec3 u_xlat7;
float u_xlat8;
float u_xlat9;
vec3 u_xlat12;
bool u_xlatb12;
float u_xlat14;
vec2 u_xlat19;
float u_xlat21;
bool u_xlatb21;
float u_xlat22;
float u_xlat16_22;
float u_xlat23;
float u_xlat16_23;
float u_xlat24;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
    u_xlat10_3 = texture(_Control, vs_TEXCOORD4.xy);
    u_xlat16_22 = dot(u_xlat10_3, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_23 = u_xlat16_22 + 0.00100000005;
    u_xlat16_3 = u_xlat10_3 / vec4(u_xlat16_23);
    u_xlat10_4 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat4 = u_xlat16_3.xxxx * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness0;
    u_xlat10_5 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat5 = u_xlat16_3.yyyy * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat5 = u_xlat16_3.zzzz * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat5 = u_xlat16_3.wwww * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat23 = dot(u_xlat16_3, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlat3 = vs_TEXCOORD3.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD3.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD3.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlatb5 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb5){
        u_xlatb5 = unity_ProbeVolumeParams.y==1.0;
        u_xlat12.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat12.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat12.xyz;
        u_xlat12.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat12.xyz;
        u_xlat12.xyz = u_xlat12.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb5)) ? u_xlat12.xyz : vs_TEXCOORD3.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat12.x = u_xlat5.y * 0.25 + 0.75;
        u_xlat6.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat5.x = max(u_xlat12.x, u_xlat6.x);
        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    //ENDIF
    }
    u_xlat5.x = dot(u_xlat5, unity_OcclusionMaskSelector);
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
    u_xlatb12 = 0.0<u_xlat3.z;
    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat19.xy = u_xlat3.xy / u_xlat3.ww;
    u_xlat19.xy = u_xlat19.xy + vec2(0.5, 0.5);
    u_xlat10_6 = texture(_LightTexture0, u_xlat19.xy);
    u_xlat24 = u_xlat12.x * u_xlat10_6.w;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10_6 = texture(_LightTextureB0, u_xlat3.xx);
    u_xlat3.x = u_xlat24 * u_xlat10_6.w;
    u_xlat3.x = u_xlat5.x * u_xlat3.x;
    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
    u_xlat24 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * vs_TEXCOORD2.xyz;
    u_xlat6.xyz = u_xlat4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = vec3(u_xlat23) * u_xlat6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = (-u_xlat23) * 0.779083729 + 0.779083729;
    u_xlat4.xyz = vec3(u_xlat23) * u_xlat4.xyz;
    u_xlat23 = (-u_xlat4.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21) + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat9 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, vec2(u_xlat23));
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat1.x;
    u_xlat14 = u_xlat7.x * u_xlat14 + 1.0;
    u_xlat1.x = -abs(u_xlat21) + 1.0;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat7.x = u_xlat7.x * u_xlat1.x + 1.0;
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat23 * u_xlat23;
    u_xlat1.x = (-u_xlat23) * u_xlat23 + 1.0;
    u_xlat8 = abs(u_xlat21) * u_xlat1.x + u_xlat14;
    u_xlat1.x = u_xlat2.x * u_xlat1.x + u_xlat14;
    u_xlat21 = abs(u_xlat21) * u_xlat1.x;
    u_xlat21 = u_xlat2.x * u_xlat8 + u_xlat21;
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat9 * u_xlat14 + (-u_xlat9);
    u_xlat1.x = u_xlat1.x * u_xlat9 + 1.0;
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat14 = u_xlat14 / u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat2.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat3.xyz;
    u_xlat7.xyz = u_xlat3.xyz * vec3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_22) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: POINT_COOKIE 
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (272 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 128
  Vector4 _Control_ST at 192
  Vector4 _Splat0_ST at 208
  Vector4 _Splat1_ST at 224
  Vector4 _Splat2_ST at 240
  Vector4 _Splat3_ST at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD3.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD2.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    output.TEXCOORD5.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_LightTextureB0" to slot 5 sampler slot 2
Set CUBE Texture "_LightTexture0" to slot 6 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 0

Constant Buffer "Globals" (272 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Float _Metallic0 at 240
  Float _Metallic1 at 244
  Float _Metallic2 at 248
  Float _Metallic3 at 252
  Float _Smoothness0 at 256
  Float _Smoothness1 at 260
  Float _Smoothness2 at 264
  Float _Smoothness3 at 268
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_LightTextureB0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    texture2d<float, access::sample > _Control [[ texture (0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture (2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture (3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture (4) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture (5) ]] ,
    texturecube<float, access::sample > _LightTexture0 [[ texture (6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    half4 u_xlat10_5;
    float3 u_xlat6;
    float3 u_xlat7;
    float u_xlat8;
    float u_xlat9;
    float u_xlat12;
    float u_xlat14;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    bool u_xlatb24;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
    u_xlat3 = _Control.sample(sampler_Control, input.TEXCOORD4.xy);
    u_xlat22 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat23 = u_xlat22 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat23);
    u_xlat4 = _Splat0.sample(sampler_Splat0, input.TEXCOORD0.xy);
    u_xlat4 = u_xlat3.xxxx * u_xlat4;
    u_xlat4.w = u_xlat4.w * Globals._Smoothness0;
    u_xlat10_5 = half4(_Splat1.sample(sampler_Splat1, input.TEXCOORD0.zw));
    u_xlat5 = u_xlat3.yyyy * float4(u_xlat10_5);
    u_xlat5.w = u_xlat5.w * Globals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = half4(_Splat2.sample(sampler_Splat2, input.TEXCOORD1.xy));
    u_xlat5 = u_xlat3.zzzz * float4(u_xlat10_5);
    u_xlat5.w = u_xlat5.w * Globals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = half4(_Splat3.sample(sampler_Splat3, input.TEXCOORD1.zw));
    u_xlat5 = u_xlat3.wwww * float4(u_xlat10_5);
    u_xlat5.w = u_xlat5.w * Globals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat23 = dot(u_xlat3, float4(Globals._Metallic0, Globals._Metallic1, Globals._Metallic2, Globals._Metallic3));
    u_xlat3.xyz = input.TEXCOORD3.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD3.xxx + u_xlat3.xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD3.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb24 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb24){
        u_xlatb24 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD3.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD3.xxx + u_xlat5.xyz;
        u_xlat5.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD3.zzz + u_xlat5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb24)) ? u_xlat5.xyz : input.TEXCOORD3.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat24 = u_xlat5.y * 0.25 + 0.75;
        u_xlat12 = Globals.unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat5.x = max(u_xlat24, u_xlat12);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat24 = dot(u_xlat5, Globals.unity_OcclusionMaskSelector);
    u_xlat24 = clamp(u_xlat24, 0.0f, 1.0f);
    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat5.x = _LightTextureB0.sample(sampler_LightTextureB0, u_xlat5.xx).w;
    u_xlat3.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xyz).w;
    u_xlat3.x = u_xlat3.x * u_xlat5.x;
    u_xlat3.x = u_xlat24 * u_xlat3.x;
    u_xlat3.xyz = u_xlat3.xxx * Globals._LightColor0.xyz;
    u_xlat24 = dot(input.TEXCOORD2.xyz, input.TEXCOORD2.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat5.xyz = float3(u_xlat24) * input.TEXCOORD2.xyz;
    u_xlat6.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = float3(u_xlat23) * u_xlat6.xyz + float3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = (-u_xlat23) * 0.779083729 + 0.779083729;
    u_xlat4.xyz = float3(u_xlat23) * u_xlat4.xyz;
    u_xlat23 = (-u_xlat4.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat21) + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, float2(u_xlat23));
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat1.x;
    u_xlat14 = u_xlat7.x * u_xlat14 + 1.0;
    u_xlat1.x = -abs(u_xlat21) + 1.0;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat7.x = u_xlat7.x * u_xlat1.x + 1.0;
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat23 * u_xlat23;
    u_xlat1.x = (-u_xlat23) * u_xlat23 + 1.0;
    u_xlat8 = abs(u_xlat21) * u_xlat1.x + u_xlat14;
    u_xlat1.x = u_xlat2.x * u_xlat1.x + u_xlat14;
    u_xlat21 = abs(u_xlat21) * u_xlat1.x;
    u_xlat21 = u_xlat2.x * u_xlat8 + u_xlat21;
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat9 * u_xlat14 + (-u_xlat9);
    u_xlat1.x = u_xlat1.x * u_xlat9 + 1.0;
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat14 = u_xlat14 / u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat2.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat3.xyz;
    u_xlat7.xyz = u_xlat3.xyz * float3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat0.xyz;
    output.SV_Target0.xyz = float3(u_xlat22) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
out vec2 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat16_3;
vec4 u_xlat10_3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat10_5;
vec3 u_xlat6;
vec4 u_xlat10_6;
vec3 u_xlat7;
float u_xlat8;
float u_xlat9;
float u_xlat12;
float u_xlat14;
float u_xlat21;
bool u_xlatb21;
float u_xlat22;
float u_xlat16_22;
float u_xlat23;
float u_xlat16_23;
float u_xlat24;
bool u_xlatb24;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
    u_xlat10_3 = texture(_Control, vs_TEXCOORD4.xy);
    u_xlat16_22 = dot(u_xlat10_3, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_23 = u_xlat16_22 + 0.00100000005;
    u_xlat16_3 = u_xlat10_3 / vec4(u_xlat16_23);
    u_xlat10_4 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat4 = u_xlat16_3.xxxx * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness0;
    u_xlat10_5 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat5 = u_xlat16_3.yyyy * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat5 = u_xlat16_3.zzzz * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat5 = u_xlat16_3.wwww * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat23 = dot(u_xlat16_3, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlat3.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb24 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb24){
        u_xlatb24 = unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat5.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb24)) ? u_xlat5.xyz : vs_TEXCOORD3.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat24 = u_xlat5.y * 0.25 + 0.75;
        u_xlat12 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat5.x = max(u_xlat24, u_xlat12);
        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    //ENDIF
    }
    u_xlat24 = dot(u_xlat5, unity_OcclusionMaskSelector);
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10_5 = texture(_LightTextureB0, u_xlat5.xx);
    u_xlat10_6 = texture(_LightTexture0, u_xlat3.xyz);
    u_xlat16_3.x = u_xlat10_5.w * u_xlat10_6.w;
    u_xlat3.x = u_xlat24 * u_xlat16_3.x;
    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
    u_xlat24 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * vs_TEXCOORD2.xyz;
    u_xlat6.xyz = u_xlat4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = vec3(u_xlat23) * u_xlat6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = (-u_xlat23) * 0.779083729 + 0.779083729;
    u_xlat4.xyz = vec3(u_xlat23) * u_xlat4.xyz;
    u_xlat23 = (-u_xlat4.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21) + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat9 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, vec2(u_xlat23));
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat1.x;
    u_xlat14 = u_xlat7.x * u_xlat14 + 1.0;
    u_xlat1.x = -abs(u_xlat21) + 1.0;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat7.x = u_xlat7.x * u_xlat1.x + 1.0;
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat23 * u_xlat23;
    u_xlat1.x = (-u_xlat23) * u_xlat23 + 1.0;
    u_xlat8 = abs(u_xlat21) * u_xlat1.x + u_xlat14;
    u_xlat1.x = u_xlat2.x * u_xlat1.x + u_xlat14;
    u_xlat21 = abs(u_xlat21) * u_xlat1.x;
    u_xlat21 = u_xlat2.x * u_xlat8 + u_xlat21;
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat9 * u_xlat14 + (-u_xlat9);
    u_xlat1.x = u_xlat1.x * u_xlat9 + 1.0;
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat14 = u_xlat14 / u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat2.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat3.xyz;
    u_xlat7.xyz = u_xlat3.xyz * vec3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_22) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (272 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 128
  Vector4 _Control_ST at 192
  Vector4 _Splat0_ST at 208
  Vector4 _Splat1_ST at 224
  Vector4 _Splat2_ST at 240
  Vector4 _Splat3_ST at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD3.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD2.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    output.TEXCOORD5.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 2
Set 2D Texture "_Splat0" to slot 1 sampler slot 3
Set 2D Texture "_Splat1" to slot 2 sampler slot 4
Set 2D Texture "_Splat2" to slot 3 sampler slot 5
Set 2D Texture "_Splat3" to slot 4 sampler slot 6
Set 2D Texture "_LightTexture0" to slot 5 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 6 sampler slot 0

Constant Buffer "Globals" (272 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Float _Metallic0 at 240
  Float _Metallic1 at 244
  Float _Metallic2 at 248
  Float _Metallic3 at 252
  Float _Smoothness0 at 256
  Float _Smoothness1 at 260
  Float _Smoothness2 at 264
  Float _Smoothness3 at 268
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    texture2d<float, access::sample > _Control [[ texture (0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture (2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture (3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture (4) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture (5) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    half4 u_xlat10_4;
    float3 u_xlat5;
    float3 u_xlat6;
    float u_xlat7;
    float3 u_xlat8;
    float u_xlat10;
    float u_xlat12;
    float u_xlat13;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    float u_xlat20;
    bool u_xlatb20;
    float u_xlat21;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat1.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat2 = _Control.sample(sampler_Control, input.TEXCOORD4.xy);
    u_xlat19 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat19 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3 = _Splat0.sample(sampler_Splat0, input.TEXCOORD0.xy);
    u_xlat3 = u_xlat2.xxxx * u_xlat3;
    u_xlat3.w = u_xlat3.w * Globals._Smoothness0;
    u_xlat10_4 = half4(_Splat1.sample(sampler_Splat1, input.TEXCOORD0.zw));
    u_xlat4 = u_xlat2.yyyy * float4(u_xlat10_4);
    u_xlat4.w = u_xlat4.w * Globals._Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = half4(_Splat2.sample(sampler_Splat2, input.TEXCOORD1.xy));
    u_xlat4 = u_xlat2.zzzz * float4(u_xlat10_4);
    u_xlat4.w = u_xlat4.w * Globals._Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = half4(_Splat3.sample(sampler_Splat3, input.TEXCOORD1.zw));
    u_xlat4 = u_xlat2.wwww * float4(u_xlat10_4);
    u_xlat4.w = u_xlat4.w * Globals._Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat2.x = dot(u_xlat2, float4(Globals._Metallic0, Globals._Metallic1, Globals._Metallic2, Globals._Metallic3));
    u_xlat8.xy = input.TEXCOORD3.yy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat8.xy = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xy * input.TEXCOORD3.xx + u_xlat8.xy;
    u_xlat8.xy = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xy * input.TEXCOORD3.zz + u_xlat8.xy;
    u_xlat8.xy = u_xlat8.xy + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlatb20 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb20){
        u_xlatb20 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD3.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD3.xxx + u_xlat4.xyz;
        u_xlat4.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD3.zzz + u_xlat4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb20)) ? u_xlat4.xyz : input.TEXCOORD3.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat20 = u_xlat4.y * 0.25 + 0.75;
        u_xlat10 = Globals.unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat4.x = max(u_xlat20, u_xlat10);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat20 = dot(u_xlat4, Globals.unity_OcclusionMaskSelector);
    u_xlat20 = clamp(u_xlat20, 0.0f, 1.0f);
    u_xlat8.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat8.xy).w;
    u_xlat8.x = u_xlat20 * u_xlat8.x;
    u_xlat8.xyz = u_xlat8.xxx * Globals._LightColor0.xyz;
    u_xlat4.x = dot(input.TEXCOORD2.xyz, input.TEXCOORD2.xyz);
    u_xlat4.x = rsqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * input.TEXCOORD2.xyz;
    u_xlat5.xyz = u_xlat3.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz + float3(0.220916301, 0.220916301, 0.220916301);
    u_xlat2.x = (-u_xlat2.x) * 0.779083729 + 0.779083729;
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat2.x = (-u_xlat3.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat18) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat0.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat7 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat7 = clamp(u_xlat7, 0.0f, 1.0f);
    u_xlat0.x = dot(Globals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.x = u_xlat0.x * u_xlat0.x;
    u_xlat6.x = dot(u_xlat6.xx, u_xlat2.xx);
    u_xlat6.x = u_xlat6.x + -0.5;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat12 = u_xlat6.x * u_xlat12 + 1.0;
    u_xlat13 = -abs(u_xlat18) + 1.0;
    u_xlat21 = u_xlat13 * u_xlat13;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat13 = u_xlat13 * u_xlat21;
    u_xlat6.x = u_xlat6.x * u_xlat13 + 1.0;
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat12 = u_xlat2.x * u_xlat2.x;
    u_xlat13 = (-u_xlat2.x) * u_xlat2.x + 1.0;
    u_xlat2.x = abs(u_xlat18) * u_xlat13 + u_xlat12;
    u_xlat13 = u_xlat1.x * u_xlat13 + u_xlat12;
    u_xlat18 = abs(u_xlat18) * u_xlat13;
    u_xlat18 = u_xlat1.x * u_xlat2.x + u_xlat18;
    u_xlat18 = u_xlat18 + 9.99999975e-06;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat7 * u_xlat12 + (-u_xlat7);
    u_xlat7 = u_xlat13 * u_xlat7 + 1.0;
    u_xlat12 = u_xlat12 * 0.318309873;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat12 = u_xlat12 / u_xlat7;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat6.y = sqrt(u_xlat12);
    u_xlat6.xy = u_xlat1.xx * u_xlat6.xy;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat6.y;
    u_xlat1.xyz = u_xlat6.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat8.xyz * float3(u_xlat12);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
    output.SV_Target0.xyz = float3(u_xlat19) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
out vec2 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec4 u_xlat16_2;
vec4 u_xlat10_2;
vec4 u_xlat3;
float u_xlat16_3;
vec4 u_xlat10_3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
vec3 u_xlat8;
float u_xlat10;
float u_xlat12;
float u_xlat13;
float u_xlat18;
bool u_xlatb18;
float u_xlat16_19;
float u_xlat20;
bool u_xlatb20;
float u_xlat21;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat10_2 = texture(_Control, vs_TEXCOORD4.xy);
    u_xlat16_19 = dot(u_xlat10_2, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = u_xlat16_19 + 0.00100000005;
    u_xlat16_2 = u_xlat10_2 / vec4(u_xlat16_3);
    u_xlat10_3 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat3 = u_xlat16_2.xxxx * u_xlat10_3;
    u_xlat3.w = u_xlat3.w * _Smoothness0;
    u_xlat10_4 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat4 = u_xlat16_2.yyyy * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat4 = u_xlat16_2.zzzz * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat4 = u_xlat16_2.wwww * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat2.x = dot(u_xlat16_2, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlat8.xy = vs_TEXCOORD3.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD3.xx + u_xlat8.xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD3.zz + u_xlat8.xy;
    u_xlat8.xy = u_xlat8.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlatb20 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb20){
        u_xlatb20 = unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb20)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat20 = u_xlat4.y * 0.25 + 0.75;
        u_xlat10 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat4.x = max(u_xlat20, u_xlat10);
        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    //ENDIF
    }
    u_xlat20 = dot(u_xlat4, unity_OcclusionMaskSelector);
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat10_4 = texture(_LightTexture0, u_xlat8.xy);
    u_xlat8.x = u_xlat20 * u_xlat10_4.w;
    u_xlat8.xyz = u_xlat8.xxx * _LightColor0.xyz;
    u_xlat4.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD2.xyz;
    u_xlat5.xyz = u_xlat3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat2.x = (-u_xlat2.x) * 0.779083729 + 0.779083729;
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat2.x = (-u_xlat3.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat7 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat6.x = u_xlat0.x * u_xlat0.x;
    u_xlat6.x = dot(u_xlat6.xx, u_xlat2.xx);
    u_xlat6.x = u_xlat6.x + -0.5;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat12 = u_xlat6.x * u_xlat12 + 1.0;
    u_xlat13 = -abs(u_xlat18) + 1.0;
    u_xlat21 = u_xlat13 * u_xlat13;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat13 = u_xlat13 * u_xlat21;
    u_xlat6.x = u_xlat6.x * u_xlat13 + 1.0;
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat12 = u_xlat2.x * u_xlat2.x;
    u_xlat13 = (-u_xlat2.x) * u_xlat2.x + 1.0;
    u_xlat2.x = abs(u_xlat18) * u_xlat13 + u_xlat12;
    u_xlat13 = u_xlat1.x * u_xlat13 + u_xlat12;
    u_xlat18 = abs(u_xlat18) * u_xlat13;
    u_xlat18 = u_xlat1.x * u_xlat2.x + u_xlat18;
    u_xlat18 = u_xlat18 + 9.99999975e-06;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat7 * u_xlat12 + (-u_xlat7);
    u_xlat7 = u_xlat13 * u_xlat7 + 1.0;
    u_xlat12 = u_xlat12 * 0.318309873;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat12 = u_xlat12 / u_xlat7;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat6.y = sqrt(u_xlat12);
    u_xlat6.xy = u_xlat1.xx * u_xlat6.xy;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat6.y;
    u_xlat1.xyz = u_xlat6.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat8.xyz * vec3(u_xlat12);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_19) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: SPOT SHADOWS_DEPTH 
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (272 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 128
  Vector4 _Control_ST at 192
  Vector4 _Splat0_ST at 208
  Vector4 _Splat1_ST at 224
  Vector4 _Splat2_ST at 240
  Vector4 _Splat3_ST at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD3.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD2.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    output.TEXCOORD5.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 4
Set 2D Texture "_Splat0" to slot 1 sampler slot 5
Set 2D Texture "_Splat1" to slot 2 sampler slot 6
Set 2D Texture "_Splat2" to slot 3 sampler slot 7
Set 2D Texture "_Splat3" to slot 4 sampler slot 8
Set 2D Texture "_LightTexture0" to slot 5 sampler slot 2
Set 2D Texture "_LightTextureB0" to slot 6 sampler slot 3
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 8 sampler slot 1

Constant Buffer "Globals" (624 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 48
  Matrix4x4 unity_MatrixV at 336
  Matrix4x4 unity_ProbeVolumeWorldToObject at 416
  Matrix4x4 unity_WorldToLight at 528
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 304
  Vector4 unity_ShadowFadeCenterAndType at 320
  Vector4 unity_ProbeVolumeParams at 400
  Vector3 unity_ProbeVolumeSizeInv at 480
  Vector3 unity_ProbeVolumeMin at 496
  Vector4 _LightColor0 at 512
  Float _Metallic0 at 592
  Float _Metallic1 at 596
  Float _Metallic2 at 600
  Float _Metallic3 at 604
  Float _Smoothness0 at 608
  Float _Smoothness1 at 612
  Float _Smoothness2 at 616
  Float _Smoothness3 at 620
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    texture2d<float, access::sample > _Control [[ texture (0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture (2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture (3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture (4) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture (5) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture (6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (7) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    half4 u_xlat10_6;
    float3 u_xlat7;
    float u_xlat8;
    float u_xlat9;
    bool u_xlatb9;
    float u_xlat10;
    float u_xlat14;
    float u_xlat16;
    bool u_xlatb16;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat3.xyz = float3(u_xlat22) * u_xlat2.xyz;
    u_xlat4 = _Control.sample(sampler_Control, input.TEXCOORD4.xy);
    u_xlat22 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat23 = u_xlat22 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat23);
    u_xlat5 = _Splat0.sample(sampler_Splat0, input.TEXCOORD0.xy);
    u_xlat5 = u_xlat4.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * Globals._Smoothness0;
    u_xlat10_6 = half4(_Splat1.sample(sampler_Splat1, input.TEXCOORD0.zw));
    u_xlat6 = u_xlat4.yyyy * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = half4(_Splat2.sample(sampler_Splat2, input.TEXCOORD1.xy));
    u_xlat6 = u_xlat4.zzzz * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = half4(_Splat3.sample(sampler_Splat3, input.TEXCOORD1.zw));
    u_xlat6 = u_xlat4.wwww * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat23 = dot(u_xlat4, float4(Globals._Metallic0, Globals._Metallic1, Globals._Metallic2, Globals._Metallic3));
    u_xlat4 = input.TEXCOORD3.yyyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat4 = Globals.hlslcc_mtx4x4unity_WorldToLight[0] * input.TEXCOORD3.xxxx + u_xlat4;
    u_xlat4 = Globals.hlslcc_mtx4x4unity_WorldToLight[2] * input.TEXCOORD3.zzzz + u_xlat4;
    u_xlat4 = u_xlat4 + Globals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat6.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat9 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = (-u_xlat2.x) + u_xlat9;
    u_xlat2.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat9 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * Globals._LightShadowData.z + Globals._LightShadowData.w;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb9 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb9){
        u_xlatb16 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD3.xxx + u_xlat6.xyz;
        u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD3.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb16)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat16 = u_xlat6.y * 0.25 + 0.75;
        u_xlat24 = Globals.unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat6.x = max(u_xlat16, u_xlat24);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat16 = dot(u_xlat6, Globals.unity_OcclusionMaskSelector);
    u_xlat16 = clamp(u_xlat16, 0.0f, 1.0f);
    u_xlat6 = input.TEXCOORD3.yyyy * Globals.hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat6 = Globals.hlslcc_mtx4x4unity_WorldToShadow[0] * input.TEXCOORD3.xxxx + u_xlat6;
    u_xlat6 = Globals.hlslcc_mtx4x4unity_WorldToShadow[2] * input.TEXCOORD3.zzzz + u_xlat6;
    u_xlat6 = u_xlat6 + Globals.hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat6.xyz = u_xlat6.xyz / u_xlat6.www;
    u_xlat24 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat6.xy, saturate(u_xlat6.z), level(0.0));
    u_xlat6.x = (-Globals._LightShadowData.x) + 1.0;
    u_xlat24 = u_xlat24 * u_xlat6.x + Globals._LightShadowData.x;
    u_xlat2.x = u_xlat2.x + u_xlat24;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat16 = min(u_xlat2.x, u_xlat16);
    u_xlat2.x = (u_xlatb9) ? u_xlat16 : u_xlat2.x;
    u_xlatb9 = 0.0<u_xlat4.z;
    u_xlat9 = u_xlatb9 ? 1.0 : float(0.0);
    u_xlat6.xy = u_xlat4.xy / u_xlat4.ww;
    u_xlat6.xy = u_xlat6.xy + float2(0.5, 0.5);
    u_xlat16 = _LightTexture0.sample(sampler_LightTexture0, u_xlat6.xy).w;
    u_xlat9 = u_xlat16 * u_xlat9;
    u_xlat16 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat16)).w;
    u_xlat9 = u_xlat16 * u_xlat9;
    u_xlat2.x = u_xlat2.x * u_xlat9;
    u_xlat2.xyz = u_xlat2.xxx * Globals._LightColor0.xyz;
    u_xlat24 = dot(input.TEXCOORD2.xyz, input.TEXCOORD2.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat4.xyz = float3(u_xlat24) * input.TEXCOORD2.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = float3(u_xlat23) * u_xlat6.xyz + float3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = (-u_xlat23) * 0.779083729 + 0.779083729;
    u_xlat5.xyz = float3(u_xlat23) * u_xlat5.xyz;
    u_xlat23 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat21) + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat10 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, float2(u_xlat23));
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat1.x;
    u_xlat14 = u_xlat7.x * u_xlat14 + 1.0;
    u_xlat1.x = -abs(u_xlat21) + 1.0;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat7.x = u_xlat7.x * u_xlat1.x + 1.0;
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat23 * u_xlat23;
    u_xlat1.x = (-u_xlat23) * u_xlat23 + 1.0;
    u_xlat8 = abs(u_xlat21) * u_xlat1.x + u_xlat14;
    u_xlat1.x = u_xlat3.x * u_xlat1.x + u_xlat14;
    u_xlat21 = abs(u_xlat21) * u_xlat1.x;
    u_xlat21 = u_xlat3.x * u_xlat8 + u_xlat21;
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat10 * u_xlat14 + (-u_xlat10);
    u_xlat1.x = u_xlat1.x * u_xlat10 + 1.0;
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat14 = u_xlat14 / u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat3.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat2.xyz;
    u_xlat7.xyz = u_xlat2.xyz * float3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    output.SV_Target0.xyz = float3(u_xlat22) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
out vec2 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler3D unity_ProbeVolumeSH;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat16_4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat10_5;
vec4 u_xlat6;
vec4 u_xlat10_6;
vec3 u_xlat7;
float u_xlat8;
float u_xlat9;
bool u_xlatb9;
float u_xlat10;
float u_xlat14;
float u_xlat16;
bool u_xlatb16;
float u_xlat21;
bool u_xlatb21;
float u_xlat22;
float u_xlat16_22;
float u_xlat23;
float u_xlat16_23;
float u_xlat24;
float u_xlat10_24;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat2.xyz;
    u_xlat10_4 = texture(_Control, vs_TEXCOORD4.xy);
    u_xlat16_22 = dot(u_xlat10_4, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_23 = u_xlat16_22 + 0.00100000005;
    u_xlat16_4 = u_xlat10_4 / vec4(u_xlat16_23);
    u_xlat10_5 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat5 = u_xlat16_4.xxxx * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness0;
    u_xlat10_6 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat6 = u_xlat16_4.yyyy * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat6 = u_xlat16_4.zzzz * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat6 = u_xlat16_4.wwww * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat23 = dot(u_xlat16_4, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlat4 = vs_TEXCOORD3.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat4 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD3.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD3.zzzz + u_xlat4;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat9 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = (-u_xlat2.x) + u_xlat9;
    u_xlat2.x = unity_ShadowFadeCenterAndType.w * u_xlat9 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlatb9 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb9){
        u_xlatb16 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb16)) ? u_xlat6.xyz : vs_TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat16 = u_xlat6.y * 0.25 + 0.75;
        u_xlat24 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat6.x = max(u_xlat16, u_xlat24);
        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    //ENDIF
    }
    u_xlat16 = dot(u_xlat6, unity_OcclusionMaskSelector);
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
    u_xlat6 = vs_TEXCOORD3.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat6 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD3.xxxx + u_xlat6;
    u_xlat6 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD3.zzzz + u_xlat6;
    u_xlat6 = u_xlat6 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat6.xyz = u_xlat6.xyz / u_xlat6.www;
    vec3 txVec0 = vec3(u_xlat6.xy,u_xlat6.z);
    u_xlat10_24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat6.x = (-_LightShadowData.x) + 1.0;
    u_xlat24 = u_xlat10_24 * u_xlat6.x + _LightShadowData.x;
    u_xlat2.x = u_xlat2.x + u_xlat24;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16 = min(u_xlat2.x, u_xlat16);
    u_xlat2.x = (u_xlatb9) ? u_xlat16 : u_xlat2.x;
    u_xlatb9 = 0.0<u_xlat4.z;
    u_xlat9 = u_xlatb9 ? 1.0 : float(0.0);
    u_xlat6.xy = u_xlat4.xy / u_xlat4.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
    u_xlat10_6 = texture(_LightTexture0, u_xlat6.xy);
    u_xlat9 = u_xlat9 * u_xlat10_6.w;
    u_xlat16 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat10_4 = texture(_LightTextureB0, vec2(u_xlat16));
    u_xlat9 = u_xlat9 * u_xlat10_4.w;
    u_xlat2.x = u_xlat2.x * u_xlat9;
    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
    u_xlat24 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD2.xyz;
    u_xlat6.xyz = u_xlat5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = vec3(u_xlat23) * u_xlat6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = (-u_xlat23) * 0.779083729 + 0.779083729;
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz;
    u_xlat23 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat10 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, vec2(u_xlat23));
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat1.x;
    u_xlat14 = u_xlat7.x * u_xlat14 + 1.0;
    u_xlat1.x = -abs(u_xlat21) + 1.0;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat7.x = u_xlat7.x * u_xlat1.x + 1.0;
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat23 * u_xlat23;
    u_xlat1.x = (-u_xlat23) * u_xlat23 + 1.0;
    u_xlat8 = abs(u_xlat21) * u_xlat1.x + u_xlat14;
    u_xlat1.x = u_xlat3.x * u_xlat1.x + u_xlat14;
    u_xlat21 = abs(u_xlat21) * u_xlat1.x;
    u_xlat21 = u_xlat3.x * u_xlat8 + u_xlat21;
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat10 * u_xlat14 + (-u_xlat10);
    u_xlat1.x = u_xlat1.x * u_xlat10 + 1.0;
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat14 = u_xlat14 / u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat3.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat2.xyz;
    u_xlat7.xyz = u_xlat2.xyz * vec3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_22) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: SPOT SHADOWS_DEPTH SHADOWS_SOFT 
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (272 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 128
  Vector4 _Control_ST at 192
  Vector4 _Splat0_ST at 208
  Vector4 _Splat1_ST at 224
  Vector4 _Splat2_ST at 240
  Vector4 _Splat3_ST at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD3.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD2.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    output.TEXCOORD5.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 4
Set 2D Texture "_Splat0" to slot 1 sampler slot 5
Set 2D Texture "_Splat1" to slot 2 sampler slot 6
Set 2D Texture "_Splat2" to slot 3 sampler slot 7
Set 2D Texture "_Splat3" to slot 4 sampler slot 8
Set 2D Texture "_LightTexture0" to slot 5 sampler slot 2
Set 2D Texture "_LightTextureB0" to slot 6 sampler slot 3
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 8 sampler slot 1

Constant Buffer "Globals" (640 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 48
  Matrix4x4 unity_MatrixV at 336
  Matrix4x4 unity_ProbeVolumeWorldToObject at 416
  Matrix4x4 unity_WorldToLight at 544
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 304
  Vector4 unity_ShadowFadeCenterAndType at 320
  Vector4 unity_ProbeVolumeParams at 400
  Vector3 unity_ProbeVolumeSizeInv at 480
  Vector3 unity_ProbeVolumeMin at 496
  Vector4 _LightColor0 at 512
  Vector4 _ShadowMapTexture_TexelSize at 528
  Float _Metallic0 at 608
  Float _Metallic1 at 612
  Float _Metallic2 at 616
  Float _Metallic3 at 620
  Float _Smoothness0 at 624
  Float _Smoothness1 at 628
  Float _Smoothness2 at 632
  Float _Smoothness3 at 636
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _ShadowMapTexture_TexelSize;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    texture2d<float, access::sample > _Control [[ texture (0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture (2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture (3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture (4) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture (5) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture (6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (7) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    half4 u_xlat10_6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float3 u_xlat12;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb14;
    float u_xlat15;
    float u_xlat24;
    float u_xlat26;
    bool u_xlatb26;
    float2 u_xlat31;
    float u_xlat36;
    bool u_xlatb36;
    float u_xlat37;
    float u_xlat38;
    float u_xlat39;
    bool u_xlatb39;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    u_xlat1.xyz = float3(u_xlat36) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat37 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat37 = rsqrt(u_xlat37);
    u_xlat3.xyz = float3(u_xlat37) * u_xlat2.xyz;
    u_xlat4 = _Control.sample(sampler_Control, input.TEXCOORD4.xy);
    u_xlat37 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat38 = u_xlat37 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat38);
    u_xlat5 = _Splat0.sample(sampler_Splat0, input.TEXCOORD0.xy);
    u_xlat5 = u_xlat4.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * Globals._Smoothness0;
    u_xlat10_6 = half4(_Splat1.sample(sampler_Splat1, input.TEXCOORD0.zw));
    u_xlat6 = u_xlat4.yyyy * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = half4(_Splat2.sample(sampler_Splat2, input.TEXCOORD1.xy));
    u_xlat6 = u_xlat4.zzzz * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = half4(_Splat3.sample(sampler_Splat3, input.TEXCOORD1.zw));
    u_xlat6 = u_xlat4.wwww * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat38 = dot(u_xlat4, float4(Globals._Metallic0, Globals._Metallic1, Globals._Metallic2, Globals._Metallic3));
    u_xlat4 = input.TEXCOORD3.yyyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat4 = Globals.hlslcc_mtx4x4unity_WorldToLight[0] * input.TEXCOORD3.xxxx + u_xlat4;
    u_xlat4 = Globals.hlslcc_mtx4x4unity_WorldToLight[2] * input.TEXCOORD3.zzzz + u_xlat4;
    u_xlat4 = u_xlat4 + Globals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat6.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat14 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat14 = sqrt(u_xlat14);
    u_xlat14 = (-u_xlat2.x) + u_xlat14;
    u_xlat2.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat14 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * Globals._LightShadowData.z + Globals._LightShadowData.w;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb14 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb14){
        u_xlatb26 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD3.xxx + u_xlat6.xyz;
        u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD3.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb26)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat26 = u_xlat6.y * 0.25 + 0.75;
        u_xlat39 = Globals.unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat6.x = max(u_xlat26, u_xlat39);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat26 = dot(u_xlat6, Globals.unity_OcclusionMaskSelector);
    u_xlat26 = clamp(u_xlat26, 0.0f, 1.0f);
    u_xlatb39 = u_xlat2.x<0.99000001;
    if(u_xlatb39){
        u_xlat6 = input.TEXCOORD3.yyyy * Globals.hlslcc_mtx4x4unity_WorldToShadow[1];
        u_xlat6 = Globals.hlslcc_mtx4x4unity_WorldToShadow[0] * input.TEXCOORD3.xxxx + u_xlat6;
        u_xlat6 = Globals.hlslcc_mtx4x4unity_WorldToShadow[2] * input.TEXCOORD3.zzzz + u_xlat6;
        u_xlat6 = u_xlat6 + Globals.hlslcc_mtx4x4unity_WorldToShadow[3];
        u_xlat6.xyz = u_xlat6.xyz / u_xlat6.www;
        u_xlat7.xy = u_xlat6.xy * Globals._ShadowMapTexture_TexelSize.zw + float2(0.5, 0.5);
        u_xlat7.xy = floor(u_xlat7.xy);
        u_xlat6.xy = u_xlat6.xy * Globals._ShadowMapTexture_TexelSize.zw + (-u_xlat7.xy);
        u_xlat8 = u_xlat6.xxyy + float4(0.5, 1.0, 0.5, 1.0);
        u_xlat9.xw = u_xlat8.xz * u_xlat8.xz;
        u_xlat31.xy = u_xlat9.xw * float2(0.5, 0.5) + (-u_xlat6.xy);
        u_xlat8.xz = (-u_xlat6.xy) + float2(1.0, 1.0);
        u_xlat10.xy = min(u_xlat6.xy, float2(0.0, 0.0));
        u_xlat8.xz = (-u_xlat10.xy) * u_xlat10.xy + u_xlat8.xz;
        u_xlat6.xy = max(u_xlat6.xy, float2(0.0, 0.0));
        u_xlat6.xy = (-u_xlat6.xy) * u_xlat6.xy + u_xlat8.yw;
        u_xlat10.x = u_xlat31.x;
        u_xlat10.y = u_xlat8.x;
        u_xlat10.z = u_xlat6.x;
        u_xlat10.w = u_xlat9.x;
        u_xlat10 = u_xlat10 * float4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat9.x = u_xlat31.y;
        u_xlat9.y = u_xlat8.z;
        u_xlat9.z = u_xlat6.y;
        u_xlat8 = u_xlat9 * float4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat9 = u_xlat10.ywyw + u_xlat10.xzxz;
        u_xlat11 = u_xlat8.yyww + u_xlat8.xxzz;
        u_xlat6.xy = u_xlat10.yw / u_xlat9.zw;
        u_xlat6.xy = u_xlat6.xy + float2(-1.5, 0.5);
        u_xlat31.xy = u_xlat8.yw / u_xlat11.yw;
        u_xlat31.xy = u_xlat31.xy + float2(-1.5, 0.5);
        u_xlat8.xy = u_xlat6.xy * Globals._ShadowMapTexture_TexelSize.xx;
        u_xlat8.zw = u_xlat31.xy * Globals._ShadowMapTexture_TexelSize.yy;
        u_xlat9 = u_xlat9 * u_xlat11;
        u_xlat10 = u_xlat7.xyxy * Globals._ShadowMapTexture_TexelSize.xyxy + u_xlat8.xzyz;
        u_xlat39 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat10.xy, saturate(u_xlat6.z), level(0.0));
        u_xlat6.x = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat10.zw, saturate(u_xlat6.z), level(0.0));
        u_xlat6.x = u_xlat6.x * u_xlat9.y;
        u_xlat39 = u_xlat9.x * u_xlat39 + u_xlat6.x;
        u_xlat7 = u_xlat7.xyxy * Globals._ShadowMapTexture_TexelSize.xyxy + u_xlat8.xwyw;
        u_xlat6.x = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat7.xy, saturate(u_xlat6.z), level(0.0));
        u_xlat39 = u_xlat9.z * u_xlat6.x + u_xlat39;
        u_xlat6.x = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat7.zw, saturate(u_xlat6.z), level(0.0));
        u_xlat39 = u_xlat9.w * u_xlat6.x + u_xlat39;
        u_xlat6.x = (-Globals._LightShadowData.x) + 1.0;
        u_xlat39 = u_xlat39 * u_xlat6.x + Globals._LightShadowData.x;
    } else {
        u_xlat39 = 1.0;
    }
    u_xlat2.x = u_xlat2.x + u_xlat39;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat26 = min(u_xlat2.x, u_xlat26);
    u_xlat2.x = (u_xlatb14) ? u_xlat26 : u_xlat2.x;
    u_xlatb14 = 0.0<u_xlat4.z;
    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
    u_xlat6.xy = u_xlat4.xy / u_xlat4.ww;
    u_xlat6.xy = u_xlat6.xy + float2(0.5, 0.5);
    u_xlat26 = _LightTexture0.sample(sampler_LightTexture0, u_xlat6.xy).w;
    u_xlat14 = u_xlat26 * u_xlat14;
    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat26 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat26)).w;
    u_xlat14 = u_xlat26 * u_xlat14;
    u_xlat2.x = u_xlat2.x * u_xlat14;
    u_xlat2.xyz = u_xlat2.xxx * Globals._LightColor0.xyz;
    u_xlat39 = dot(input.TEXCOORD2.xyz, input.TEXCOORD2.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat4.xyz = float3(u_xlat39) * input.TEXCOORD2.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = float3(u_xlat38) * u_xlat6.xyz + float3(0.220916301, 0.220916301, 0.220916301);
    u_xlat38 = (-u_xlat38) * 0.779083729 + 0.779083729;
    u_xlat5.xyz = float3(u_xlat38) * u_xlat5.xyz;
    u_xlat38 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat36) + u_xlat3.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = max(u_xlat36, 0.00100000005);
    u_xlat36 = rsqrt(u_xlat36);
    u_xlat0.xyz = float3(u_xlat36) * u_xlat0.xyz;
    u_xlat36 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat12.x = dot(u_xlat12.xx, float2(u_xlat38));
    u_xlat12.x = u_xlat12.x + -0.5;
    u_xlat24 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat24 * u_xlat24;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat24 = u_xlat24 * u_xlat1.x;
    u_xlat24 = u_xlat12.x * u_xlat24 + 1.0;
    u_xlat1.x = -abs(u_xlat36) + 1.0;
    u_xlat13 = u_xlat1.x * u_xlat1.x;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat1.x = u_xlat1.x * u_xlat13;
    u_xlat12.x = u_xlat12.x * u_xlat1.x + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat24;
    u_xlat24 = u_xlat38 * u_xlat38;
    u_xlat1.x = (-u_xlat38) * u_xlat38 + 1.0;
    u_xlat13 = abs(u_xlat36) * u_xlat1.x + u_xlat24;
    u_xlat1.x = u_xlat3.x * u_xlat1.x + u_xlat24;
    u_xlat36 = abs(u_xlat36) * u_xlat1.x;
    u_xlat36 = u_xlat3.x * u_xlat13 + u_xlat36;
    u_xlat36 = u_xlat36 + 9.99999975e-06;
    u_xlat36 = 0.5 / u_xlat36;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat1.x = u_xlat15 * u_xlat24 + (-u_xlat15);
    u_xlat1.x = u_xlat1.x * u_xlat15 + 1.0;
    u_xlat24 = u_xlat24 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat24 = u_xlat24 / u_xlat1.x;
    u_xlat24 = u_xlat24 * u_xlat36;
    u_xlat24 = u_xlat24 * 3.14159274;
    u_xlat24 = max(u_xlat24, 9.99999975e-05);
    u_xlat12.y = sqrt(u_xlat24);
    u_xlat12.xy = u_xlat3.xx * u_xlat12.xy;
    u_xlat36 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb36 = u_xlat36!=0.0;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat24 = u_xlat36 * u_xlat12.y;
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat12.xyz = u_xlat2.xyz * float3(u_xlat24);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat12.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    output.SV_Target0.xyz = float3(u_xlat37) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
out vec2 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler3D unity_ProbeVolumeSH;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat16_4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat10_5;
vec4 u_xlat6;
vec4 u_xlat10_6;
vec4 u_xlat7;
vec4 u_xlat8;
vec4 u_xlat9;
vec4 u_xlat10;
vec4 u_xlat11;
vec3 u_xlat12;
float u_xlat13;
float u_xlat14;
bool u_xlatb14;
float u_xlat15;
float u_xlat24;
float u_xlat26;
bool u_xlatb26;
vec2 u_xlat31;
float u_xlat36;
bool u_xlatb36;
float u_xlat37;
float u_xlat16_37;
float u_xlat38;
float u_xlat16_38;
float u_xlat39;
float u_xlat10_39;
bool u_xlatb39;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat37 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat3.xyz = vec3(u_xlat37) * u_xlat2.xyz;
    u_xlat10_4 = texture(_Control, vs_TEXCOORD4.xy);
    u_xlat16_37 = dot(u_xlat10_4, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_38 = u_xlat16_37 + 0.00100000005;
    u_xlat16_4 = u_xlat10_4 / vec4(u_xlat16_38);
    u_xlat10_5 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat5 = u_xlat16_4.xxxx * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness0;
    u_xlat10_6 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat6 = u_xlat16_4.yyyy * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat6 = u_xlat16_4.zzzz * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat6 = u_xlat16_4.wwww * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat38 = dot(u_xlat16_4, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlat4 = vs_TEXCOORD3.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat4 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD3.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD3.zzzz + u_xlat4;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat14 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat14 = sqrt(u_xlat14);
    u_xlat14 = (-u_xlat2.x) + u_xlat14;
    u_xlat2.x = unity_ShadowFadeCenterAndType.w * u_xlat14 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlatb14 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb14){
        u_xlatb26 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb26)) ? u_xlat6.xyz : vs_TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat26 = u_xlat6.y * 0.25 + 0.75;
        u_xlat39 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat6.x = max(u_xlat26, u_xlat39);
        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    //ENDIF
    }
    u_xlat26 = dot(u_xlat6, unity_OcclusionMaskSelector);
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
    u_xlatb39 = u_xlat2.x<0.99000001;
    if(u_xlatb39){
        u_xlat6 = vs_TEXCOORD3.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
        u_xlat6 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD3.xxxx + u_xlat6;
        u_xlat6 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD3.zzzz + u_xlat6;
        u_xlat6 = u_xlat6 + hlslcc_mtx4x4unity_WorldToShadow[3];
        u_xlat6.xyz = u_xlat6.xyz / u_xlat6.www;
        u_xlat7.xy = u_xlat6.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
        u_xlat7.xy = floor(u_xlat7.xy);
        u_xlat6.xy = u_xlat6.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat7.xy);
        u_xlat8 = u_xlat6.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
        u_xlat9.xw = u_xlat8.xz * u_xlat8.xz;
        u_xlat31.xy = u_xlat9.xw * vec2(0.5, 0.5) + (-u_xlat6.xy);
        u_xlat8.xz = (-u_xlat6.xy) + vec2(1.0, 1.0);
        u_xlat10.xy = min(u_xlat6.xy, vec2(0.0, 0.0));
        u_xlat8.xz = (-u_xlat10.xy) * u_xlat10.xy + u_xlat8.xz;
        u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
        u_xlat6.xy = (-u_xlat6.xy) * u_xlat6.xy + u_xlat8.yw;
        u_xlat10.x = u_xlat31.x;
        u_xlat10.y = u_xlat8.x;
        u_xlat10.z = u_xlat6.x;
        u_xlat10.w = u_xlat9.x;
        u_xlat10 = u_xlat10 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat9.x = u_xlat31.y;
        u_xlat9.y = u_xlat8.z;
        u_xlat9.z = u_xlat6.y;
        u_xlat8 = u_xlat9 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat9 = u_xlat10.ywyw + u_xlat10.xzxz;
        u_xlat11 = u_xlat8.yyww + u_xlat8.xxzz;
        u_xlat6.xy = u_xlat10.yw / u_xlat9.zw;
        u_xlat6.xy = u_xlat6.xy + vec2(-1.5, 0.5);
        u_xlat31.xy = u_xlat8.yw / u_xlat11.yw;
        u_xlat31.xy = u_xlat31.xy + vec2(-1.5, 0.5);
        u_xlat8.xy = u_xlat6.xy * _ShadowMapTexture_TexelSize.xx;
        u_xlat8.zw = u_xlat31.xy * _ShadowMapTexture_TexelSize.yy;
        u_xlat9 = u_xlat9 * u_xlat11;
        u_xlat10 = u_xlat7.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat8.xzyz;
        vec3 txVec0 = vec3(u_xlat10.xy,u_xlat6.z);
        u_xlat10_39 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
        vec3 txVec1 = vec3(u_xlat10.zw,u_xlat6.z);
        u_xlat10_6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
        u_xlat6.x = u_xlat10_6.x * u_xlat9.y;
        u_xlat39 = u_xlat9.x * u_xlat10_39 + u_xlat6.x;
        u_xlat7 = u_xlat7.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat8.xwyw;
        vec3 txVec2 = vec3(u_xlat7.xy,u_xlat6.z);
        u_xlat10_6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
        u_xlat39 = u_xlat9.z * u_xlat10_6.x + u_xlat39;
        vec3 txVec3 = vec3(u_xlat7.zw,u_xlat6.z);
        u_xlat10_6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
        u_xlat39 = u_xlat9.w * u_xlat10_6.x + u_xlat39;
        u_xlat6.x = (-_LightShadowData.x) + 1.0;
        u_xlat39 = u_xlat39 * u_xlat6.x + _LightShadowData.x;
    } else {
        u_xlat39 = 1.0;
    //ENDIF
    }
    u_xlat2.x = u_xlat2.x + u_xlat39;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat26 = min(u_xlat2.x, u_xlat26);
    u_xlat2.x = (u_xlatb14) ? u_xlat26 : u_xlat2.x;
    u_xlatb14 = 0.0<u_xlat4.z;
    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
    u_xlat6.xy = u_xlat4.xy / u_xlat4.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
    u_xlat10_6 = texture(_LightTexture0, u_xlat6.xy);
    u_xlat14 = u_xlat14 * u_xlat10_6.w;
    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat10_4 = texture(_LightTextureB0, vec2(u_xlat26));
    u_xlat14 = u_xlat14 * u_xlat10_4.w;
    u_xlat2.x = u_xlat2.x * u_xlat14;
    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
    u_xlat39 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat4.xyz = vec3(u_xlat39) * vs_TEXCOORD2.xyz;
    u_xlat6.xyz = u_xlat5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = vec3(u_xlat38) * u_xlat6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat38 = (-u_xlat38) * 0.779083729 + 0.779083729;
    u_xlat5.xyz = vec3(u_xlat38) * u_xlat5.xyz;
    u_xlat38 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + u_xlat3.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = max(u_xlat36, 0.00100000005);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat36 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat15 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat12.x = dot(u_xlat12.xx, vec2(u_xlat38));
    u_xlat12.x = u_xlat12.x + -0.5;
    u_xlat24 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat24 * u_xlat24;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat24 = u_xlat24 * u_xlat1.x;
    u_xlat24 = u_xlat12.x * u_xlat24 + 1.0;
    u_xlat1.x = -abs(u_xlat36) + 1.0;
    u_xlat13 = u_xlat1.x * u_xlat1.x;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat1.x = u_xlat1.x * u_xlat13;
    u_xlat12.x = u_xlat12.x * u_xlat1.x + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat24;
    u_xlat24 = u_xlat38 * u_xlat38;
    u_xlat1.x = (-u_xlat38) * u_xlat38 + 1.0;
    u_xlat13 = abs(u_xlat36) * u_xlat1.x + u_xlat24;
    u_xlat1.x = u_xlat3.x * u_xlat1.x + u_xlat24;
    u_xlat36 = abs(u_xlat36) * u_xlat1.x;
    u_xlat36 = u_xlat3.x * u_xlat13 + u_xlat36;
    u_xlat36 = u_xlat36 + 9.99999975e-06;
    u_xlat36 = 0.5 / u_xlat36;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat1.x = u_xlat15 * u_xlat24 + (-u_xlat15);
    u_xlat1.x = u_xlat1.x * u_xlat15 + 1.0;
    u_xlat24 = u_xlat24 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat24 = u_xlat24 / u_xlat1.x;
    u_xlat24 = u_xlat24 * u_xlat36;
    u_xlat24 = u_xlat24 * 3.14159274;
    u_xlat24 = max(u_xlat24, 9.99999975e-05);
    u_xlat12.y = sqrt(u_xlat24);
    u_xlat12.xy = u_xlat3.xx * u_xlat12.xy;
    u_xlat36 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb36 = u_xlat36!=0.0;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat24 = u_xlat36 * u_xlat12.y;
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat12.xyz = u_xlat2.xyz * vec3(u_xlat24);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat12.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_37) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (288 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_WorldToObject at 80
  Matrix4x4 unity_MatrixVP at 144
  Vector4 _ProjectionParams at 0
  Vector4 _Control_ST at 208
  Vector4 _Splat0_ST at 224
  Vector4 _Splat1_ST at 240
  Vector4 _Splat2_ST at 256
  Vector4 _Splat3_ST at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat7;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD3.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    output.mtl_Position = u_xlat0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    u_xlat1.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = rsqrt(u_xlat7);
    output.TEXCOORD2.xyz = float3(u_xlat7) * u_xlat1.xyz;
    output.TEXCOORD4.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    u_xlat0.y = u_xlat0.y * Globals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD5.zw = u_xlat0.zw;
    output.TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 2
Set 2D Texture "_Splat0" to slot 1 sampler slot 3
Set 2D Texture "_Splat1" to slot 2 sampler slot 4
Set 2D Texture "_Splat2" to slot 3 sampler slot 5
Set 2D Texture "_Splat3" to slot 4 sampler slot 6
Set 2D Texture "_ShadowMapTexture" to slot 5 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 6 sampler slot 0

Constant Buffer "Globals" (304 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_ProbeVolumeWorldToObject at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 48
  Vector4 unity_ShadowFadeCenterAndType at 64
  Vector4 unity_ProbeVolumeParams at 144
  Vector3 unity_ProbeVolumeSizeInv at 224
  Vector3 unity_ProbeVolumeMin at 240
  Vector4 _LightColor0 at 256
  Float _Metallic0 at 272
  Float _Metallic1 at 276
  Float _Metallic2 at 280
  Float _Metallic3 at 284
  Float _Smoothness0 at 288
  Float _Smoothness1 at 292
  Float _Smoothness2 at 296
  Float _Smoothness3 at 300
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    texture2d<float, access::sample > _Control [[ texture (0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture (2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture (3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture (4) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture (5) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    half4 u_xlat10_4;
    float3 u_xlat5;
    float3 u_xlat6;
    float u_xlat7;
    float3 u_xlat8;
    float u_xlat10;
    float u_xlat12;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb14;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    float u_xlat20;
    bool u_xlatb20;
    float u_xlat21;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat1.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat2 = _Control.sample(sampler_Control, input.TEXCOORD4.xy);
    u_xlat19 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat19 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3 = _Splat0.sample(sampler_Splat0, input.TEXCOORD0.xy);
    u_xlat3 = u_xlat2.xxxx * u_xlat3;
    u_xlat3.w = u_xlat3.w * Globals._Smoothness0;
    u_xlat10_4 = half4(_Splat1.sample(sampler_Splat1, input.TEXCOORD0.zw));
    u_xlat4 = u_xlat2.yyyy * float4(u_xlat10_4);
    u_xlat4.w = u_xlat4.w * Globals._Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = half4(_Splat2.sample(sampler_Splat2, input.TEXCOORD1.xy));
    u_xlat4 = u_xlat2.zzzz * float4(u_xlat10_4);
    u_xlat4.w = u_xlat4.w * Globals._Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = half4(_Splat3.sample(sampler_Splat3, input.TEXCOORD1.zw));
    u_xlat4 = u_xlat2.wwww * float4(u_xlat10_4);
    u_xlat4.w = u_xlat4.w * Globals._Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat2.x = dot(u_xlat2, float4(Globals._Metallic0, Globals._Metallic1, Globals._Metallic2, Globals._Metallic3));
    u_xlat4.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat8.x = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = input.TEXCOORD3.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat14 = sqrt(u_xlat14);
    u_xlat14 = (-u_xlat8.x) + u_xlat14;
    u_xlat8.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat14 + u_xlat8.x;
    u_xlat8.x = u_xlat8.x * Globals._LightShadowData.z + Globals._LightShadowData.w;
    u_xlat8.x = clamp(u_xlat8.x, 0.0f, 1.0f);
    u_xlatb14 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb14){
        u_xlatb20 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD3.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD3.xxx + u_xlat4.xyz;
        u_xlat4.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD3.zzz + u_xlat4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb20)) ? u_xlat4.xyz : input.TEXCOORD3.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat20 = u_xlat4.y * 0.25 + 0.75;
        u_xlat10 = Globals.unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat4.x = max(u_xlat20, u_xlat10);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat20 = dot(u_xlat4, Globals.unity_OcclusionMaskSelector);
    u_xlat20 = clamp(u_xlat20, 0.0f, 1.0f);
    u_xlat4.xy = input.TEXCOORD5.xy / input.TEXCOORD5.ww;
    u_xlat4.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat4.xy).x;
    u_xlat8.x = u_xlat8.x + u_xlat4.x;
    u_xlat8.x = clamp(u_xlat8.x, 0.0f, 1.0f);
    u_xlat20 = min(u_xlat8.x, u_xlat20);
    u_xlat8.x = (u_xlatb14) ? u_xlat20 : u_xlat8.x;
    u_xlat8.xyz = u_xlat8.xxx * Globals._LightColor0.xyz;
    u_xlat4.x = dot(input.TEXCOORD2.xyz, input.TEXCOORD2.xyz);
    u_xlat4.x = rsqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * input.TEXCOORD2.xyz;
    u_xlat5.xyz = u_xlat3.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz + float3(0.220916301, 0.220916301, 0.220916301);
    u_xlat2.x = (-u_xlat2.x) * 0.779083729 + 0.779083729;
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat2.x = (-u_xlat3.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat18) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat0.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat7 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat7 = clamp(u_xlat7, 0.0f, 1.0f);
    u_xlat0.x = dot(Globals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.x = u_xlat0.x * u_xlat0.x;
    u_xlat6.x = dot(u_xlat6.xx, u_xlat2.xx);
    u_xlat6.x = u_xlat6.x + -0.5;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat12 = u_xlat6.x * u_xlat12 + 1.0;
    u_xlat13 = -abs(u_xlat18) + 1.0;
    u_xlat21 = u_xlat13 * u_xlat13;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat13 = u_xlat13 * u_xlat21;
    u_xlat6.x = u_xlat6.x * u_xlat13 + 1.0;
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat12 = u_xlat2.x * u_xlat2.x;
    u_xlat13 = (-u_xlat2.x) * u_xlat2.x + 1.0;
    u_xlat2.x = abs(u_xlat18) * u_xlat13 + u_xlat12;
    u_xlat13 = u_xlat1.x * u_xlat13 + u_xlat12;
    u_xlat18 = abs(u_xlat18) * u_xlat13;
    u_xlat18 = u_xlat1.x * u_xlat2.x + u_xlat18;
    u_xlat18 = u_xlat18 + 9.99999975e-06;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat7 * u_xlat12 + (-u_xlat7);
    u_xlat7 = u_xlat13 * u_xlat7 + 1.0;
    u_xlat12 = u_xlat12 * 0.318309873;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat12 = u_xlat12 / u_xlat7;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat6.y = sqrt(u_xlat12);
    u_xlat6.xy = u_xlat1.xx * u_xlat6.xy;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat6.y;
    u_xlat1.xyz = u_xlat6.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat8.xyz * float3(u_xlat12);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
    output.SV_Target0.xyz = float3(u_xlat19) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD2.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec4 u_xlat16_2;
vec4 u_xlat10_2;
vec4 u_xlat3;
float u_xlat16_3;
vec4 u_xlat10_3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
vec3 u_xlat8;
float u_xlat10;
float u_xlat12;
float u_xlat13;
float u_xlat14;
bool u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat16_19;
float u_xlat20;
bool u_xlatb20;
float u_xlat21;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat10_2 = texture(_Control, vs_TEXCOORD4.xy);
    u_xlat16_19 = dot(u_xlat10_2, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = u_xlat16_19 + 0.00100000005;
    u_xlat16_2 = u_xlat10_2 / vec4(u_xlat16_3);
    u_xlat10_3 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat3 = u_xlat16_2.xxxx * u_xlat10_3;
    u_xlat3.w = u_xlat3.w * _Smoothness0;
    u_xlat10_4 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat4 = u_xlat16_2.yyyy * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat4 = u_xlat16_2.zzzz * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat4 = u_xlat16_2.wwww * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat2.x = dot(u_xlat16_2, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat8.x = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat14 = sqrt(u_xlat14);
    u_xlat14 = (-u_xlat8.x) + u_xlat14;
    u_xlat8.x = unity_ShadowFadeCenterAndType.w * u_xlat14 + u_xlat8.x;
    u_xlat8.x = u_xlat8.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
    u_xlatb14 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb14){
        u_xlatb20 = unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb20)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat20 = u_xlat4.y * 0.25 + 0.75;
        u_xlat10 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat4.x = max(u_xlat20, u_xlat10);
        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    //ENDIF
    }
    u_xlat20 = dot(u_xlat4, unity_OcclusionMaskSelector);
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_4 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat8.x = u_xlat8.x + u_xlat10_4.x;
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
    u_xlat20 = min(u_xlat8.x, u_xlat20);
    u_xlat8.x = (u_xlatb14) ? u_xlat20 : u_xlat8.x;
    u_xlat8.xyz = u_xlat8.xxx * _LightColor0.xyz;
    u_xlat4.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD2.xyz;
    u_xlat5.xyz = u_xlat3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat2.x = (-u_xlat2.x) * 0.779083729 + 0.779083729;
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat2.x = (-u_xlat3.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat7 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat6.x = u_xlat0.x * u_xlat0.x;
    u_xlat6.x = dot(u_xlat6.xx, u_xlat2.xx);
    u_xlat6.x = u_xlat6.x + -0.5;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat12 = u_xlat6.x * u_xlat12 + 1.0;
    u_xlat13 = -abs(u_xlat18) + 1.0;
    u_xlat21 = u_xlat13 * u_xlat13;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat13 = u_xlat13 * u_xlat21;
    u_xlat6.x = u_xlat6.x * u_xlat13 + 1.0;
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat12 = u_xlat2.x * u_xlat2.x;
    u_xlat13 = (-u_xlat2.x) * u_xlat2.x + 1.0;
    u_xlat2.x = abs(u_xlat18) * u_xlat13 + u_xlat12;
    u_xlat13 = u_xlat1.x * u_xlat13 + u_xlat12;
    u_xlat18 = abs(u_xlat18) * u_xlat13;
    u_xlat18 = u_xlat1.x * u_xlat2.x + u_xlat18;
    u_xlat18 = u_xlat18 + 9.99999975e-06;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat7 * u_xlat12 + (-u_xlat7);
    u_xlat7 = u_xlat13 * u_xlat7 + 1.0;
    u_xlat12 = u_xlat12 * 0.318309873;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat12 = u_xlat12 / u_xlat7;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat6.y = sqrt(u_xlat12);
    u_xlat6.xy = u_xlat1.xx * u_xlat6.xy;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat6.y;
    u_xlat1.xyz = u_xlat6.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat8.xyz * vec3(u_xlat12);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_19) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL_COOKIE SHADOWS_SCREEN 
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (288 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_WorldToObject at 80
  Matrix4x4 unity_MatrixVP at 144
  Vector4 _ProjectionParams at 0
  Vector4 _Control_ST at 208
  Vector4 _Splat0_ST at 224
  Vector4 _Splat1_ST at 240
  Vector4 _Splat2_ST at 256
  Vector4 _Splat3_ST at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat7;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD3.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    output.mtl_Position = u_xlat0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    u_xlat1.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = rsqrt(u_xlat7);
    output.TEXCOORD2.xyz = float3(u_xlat7) * u_xlat1.xyz;
    output.TEXCOORD4.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    u_xlat0.y = u_xlat0.y * Globals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD5.zw = u_xlat0.zw;
    output.TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_ShadowMapTexture" to slot 5 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 6 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 0

Constant Buffer "Globals" (368 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_ProbeVolumeWorldToObject at 160
  Matrix4x4 unity_WorldToLight at 272
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 48
  Vector4 unity_ShadowFadeCenterAndType at 64
  Vector4 unity_ProbeVolumeParams at 144
  Vector3 unity_ProbeVolumeSizeInv at 224
  Vector3 unity_ProbeVolumeMin at 240
  Vector4 _LightColor0 at 256
  Float _Metallic0 at 336
  Float _Metallic1 at 340
  Float _Metallic2 at 344
  Float _Metallic3 at 348
  Float _Smoothness0 at 352
  Float _Smoothness1 at 356
  Float _Smoothness2 at 360
  Float _Smoothness3 at 364
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    texture2d<float, access::sample > _Control [[ texture (0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture (2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture (3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture (4) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture (5) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture (6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    half4 u_xlat10_4;
    bool u_xlatb4;
    float4 u_xlat5;
    float3 u_xlat6;
    float u_xlat7;
    float3 u_xlat8;
    float3 u_xlat10;
    bool u_xlatb10;
    float u_xlat12;
    float u_xlat13;
    float2 u_xlat16;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    float u_xlat20;
    float u_xlat21;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat1.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat2 = _Control.sample(sampler_Control, input.TEXCOORD4.xy);
    u_xlat19 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat19 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3 = _Splat0.sample(sampler_Splat0, input.TEXCOORD0.xy);
    u_xlat3 = u_xlat2.xxxx * u_xlat3;
    u_xlat3.w = u_xlat3.w * Globals._Smoothness0;
    u_xlat10_4 = half4(_Splat1.sample(sampler_Splat1, input.TEXCOORD0.zw));
    u_xlat4 = u_xlat2.yyyy * float4(u_xlat10_4);
    u_xlat4.w = u_xlat4.w * Globals._Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = half4(_Splat2.sample(sampler_Splat2, input.TEXCOORD1.xy));
    u_xlat4 = u_xlat2.zzzz * float4(u_xlat10_4);
    u_xlat4.w = u_xlat4.w * Globals._Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = half4(_Splat3.sample(sampler_Splat3, input.TEXCOORD1.zw));
    u_xlat4 = u_xlat2.wwww * float4(u_xlat10_4);
    u_xlat4.w = u_xlat4.w * Globals._Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat2.x = dot(u_xlat2, float4(Globals._Metallic0, Globals._Metallic1, Globals._Metallic2, Globals._Metallic3));
    u_xlat8.xy = input.TEXCOORD3.yy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat8.xy = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xy * input.TEXCOORD3.xx + u_xlat8.xy;
    u_xlat8.xy = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xy * input.TEXCOORD3.zz + u_xlat8.xy;
    u_xlat8.xy = u_xlat8.xy + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat4.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat20 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = input.TEXCOORD3.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat4.x = (-u_xlat20) + u_xlat4.x;
    u_xlat20 = Globals.unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat20;
    u_xlat20 = u_xlat20 * Globals._LightShadowData.z + Globals._LightShadowData.w;
    u_xlat20 = clamp(u_xlat20, 0.0f, 1.0f);
    u_xlatb4 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb4){
        u_xlatb10 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD3.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD3.xxx + u_xlat5.xyz;
        u_xlat5.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD3.zzz + u_xlat5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat10.xyz = (bool(u_xlatb10)) ? u_xlat5.xyz : input.TEXCOORD3.xyz;
        u_xlat10.xyz = u_xlat10.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat10.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat10.x = u_xlat5.y * 0.25 + 0.75;
        u_xlat16.x = Globals.unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat5.x = max(u_xlat16.x, u_xlat10.x);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat10.x = dot(u_xlat5, Globals.unity_OcclusionMaskSelector);
    u_xlat10.x = clamp(u_xlat10.x, 0.0f, 1.0f);
    u_xlat16.xy = input.TEXCOORD5.xy / input.TEXCOORD5.ww;
    u_xlat16.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat16.xy).x;
    u_xlat20 = u_xlat20 + u_xlat16.x;
    u_xlat20 = clamp(u_xlat20, 0.0f, 1.0f);
    u_xlat10.x = min(u_xlat20, u_xlat10.x);
    u_xlat20 = (u_xlatb4) ? u_xlat10.x : u_xlat20;
    u_xlat8.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat8.xy).w;
    u_xlat8.x = u_xlat20 * u_xlat8.x;
    u_xlat8.xyz = u_xlat8.xxx * Globals._LightColor0.xyz;
    u_xlat4.x = dot(input.TEXCOORD2.xyz, input.TEXCOORD2.xyz);
    u_xlat4.x = rsqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * input.TEXCOORD2.xyz;
    u_xlat5.xyz = u_xlat3.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz + float3(0.220916301, 0.220916301, 0.220916301);
    u_xlat2.x = (-u_xlat2.x) * 0.779083729 + 0.779083729;
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat2.x = (-u_xlat3.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat18) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat0.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat7 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat7 = clamp(u_xlat7, 0.0f, 1.0f);
    u_xlat0.x = dot(Globals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.x = u_xlat0.x * u_xlat0.x;
    u_xlat6.x = dot(u_xlat6.xx, u_xlat2.xx);
    u_xlat6.x = u_xlat6.x + -0.5;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat12 = u_xlat6.x * u_xlat12 + 1.0;
    u_xlat13 = -abs(u_xlat18) + 1.0;
    u_xlat21 = u_xlat13 * u_xlat13;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat13 = u_xlat13 * u_xlat21;
    u_xlat6.x = u_xlat6.x * u_xlat13 + 1.0;
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat12 = u_xlat2.x * u_xlat2.x;
    u_xlat13 = (-u_xlat2.x) * u_xlat2.x + 1.0;
    u_xlat2.x = abs(u_xlat18) * u_xlat13 + u_xlat12;
    u_xlat13 = u_xlat1.x * u_xlat13 + u_xlat12;
    u_xlat18 = abs(u_xlat18) * u_xlat13;
    u_xlat18 = u_xlat1.x * u_xlat2.x + u_xlat18;
    u_xlat18 = u_xlat18 + 9.99999975e-06;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat7 * u_xlat12 + (-u_xlat7);
    u_xlat7 = u_xlat13 * u_xlat7 + 1.0;
    u_xlat12 = u_xlat12 * 0.318309873;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat12 = u_xlat12 / u_xlat7;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat6.y = sqrt(u_xlat12);
    u_xlat6.xy = u_xlat1.xx * u_xlat6.xy;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat6.y;
    u_xlat1.xyz = u_xlat6.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat8.xyz * float3(u_xlat12);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
    output.SV_Target0.xyz = float3(u_xlat19) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD2.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec4 u_xlat16_2;
vec4 u_xlat10_2;
vec4 u_xlat3;
float u_xlat16_3;
vec4 u_xlat10_3;
vec4 u_xlat4;
vec4 u_xlat10_4;
bool u_xlatb4;
vec4 u_xlat5;
vec4 u_xlat10_5;
vec3 u_xlat6;
float u_xlat7;
vec3 u_xlat8;
vec3 u_xlat10;
bool u_xlatb10;
float u_xlat12;
float u_xlat13;
vec2 u_xlat16;
float u_xlat18;
bool u_xlatb18;
float u_xlat16_19;
float u_xlat20;
float u_xlat21;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat10_2 = texture(_Control, vs_TEXCOORD4.xy);
    u_xlat16_19 = dot(u_xlat10_2, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = u_xlat16_19 + 0.00100000005;
    u_xlat16_2 = u_xlat10_2 / vec4(u_xlat16_3);
    u_xlat10_3 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat3 = u_xlat16_2.xxxx * u_xlat10_3;
    u_xlat3.w = u_xlat3.w * _Smoothness0;
    u_xlat10_4 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat4 = u_xlat16_2.yyyy * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat4 = u_xlat16_2.zzzz * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat4 = u_xlat16_2.wwww * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat2.x = dot(u_xlat16_2, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlat8.xy = vs_TEXCOORD3.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD3.xx + u_xlat8.xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD3.zz + u_xlat8.xy;
    u_xlat8.xy = u_xlat8.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat20 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat4.x = (-u_xlat20) + u_xlat4.x;
    u_xlat20 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat20;
    u_xlat20 = u_xlat20 * _LightShadowData.z + _LightShadowData.w;
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlatb4 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb4){
        u_xlatb10 = unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat5.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat10.xyz = (bool(u_xlatb10)) ? u_xlat5.xyz : vs_TEXCOORD3.xyz;
        u_xlat10.xyz = u_xlat10.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat5.yzw = u_xlat10.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat10.x = u_xlat5.y * 0.25 + 0.75;
        u_xlat16.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat5.x = max(u_xlat16.x, u_xlat10.x);
        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    //ENDIF
    }
    u_xlat10.x = dot(u_xlat5, unity_OcclusionMaskSelector);
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat16.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_5 = texture(_ShadowMapTexture, u_xlat16.xy);
    u_xlat20 = u_xlat20 + u_xlat10_5.x;
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat10.x = min(u_xlat20, u_xlat10.x);
    u_xlat20 = (u_xlatb4) ? u_xlat10.x : u_xlat20;
    u_xlat10_4 = texture(_LightTexture0, u_xlat8.xy);
    u_xlat8.x = u_xlat20 * u_xlat10_4.w;
    u_xlat8.xyz = u_xlat8.xxx * _LightColor0.xyz;
    u_xlat4.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD2.xyz;
    u_xlat5.xyz = u_xlat3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat2.x = (-u_xlat2.x) * 0.779083729 + 0.779083729;
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat2.x = (-u_xlat3.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat7 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat6.x = u_xlat0.x * u_xlat0.x;
    u_xlat6.x = dot(u_xlat6.xx, u_xlat2.xx);
    u_xlat6.x = u_xlat6.x + -0.5;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat12 = u_xlat6.x * u_xlat12 + 1.0;
    u_xlat13 = -abs(u_xlat18) + 1.0;
    u_xlat21 = u_xlat13 * u_xlat13;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat13 = u_xlat13 * u_xlat21;
    u_xlat6.x = u_xlat6.x * u_xlat13 + 1.0;
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat12 = u_xlat2.x * u_xlat2.x;
    u_xlat13 = (-u_xlat2.x) * u_xlat2.x + 1.0;
    u_xlat2.x = abs(u_xlat18) * u_xlat13 + u_xlat12;
    u_xlat13 = u_xlat1.x * u_xlat13 + u_xlat12;
    u_xlat18 = abs(u_xlat18) * u_xlat13;
    u_xlat18 = u_xlat1.x * u_xlat2.x + u_xlat18;
    u_xlat18 = u_xlat18 + 9.99999975e-06;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat7 * u_xlat12 + (-u_xlat7);
    u_xlat7 = u_xlat13 * u_xlat7 + 1.0;
    u_xlat12 = u_xlat12 * 0.318309873;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat12 = u_xlat12 / u_xlat7;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat6.y = sqrt(u_xlat12);
    u_xlat6.xy = u_xlat1.xx * u_xlat6.xy;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat6.y;
    u_xlat1.xyz = u_xlat6.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat8.xyz * vec3(u_xlat12);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_19) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: POINT SHADOWS_CUBE 
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (272 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 128
  Vector4 _Control_ST at 192
  Vector4 _Splat0_ST at 208
  Vector4 _Splat1_ST at 224
  Vector4 _Splat2_ST at 240
  Vector4 _Splat3_ST at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD3.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD2.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    output.TEXCOORD5.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set CUBE Texture "_ShadowMapTexture" to slot 5 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 6 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 0

Constant Buffer "Globals" (384 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 96
  Matrix4x4 unity_ProbeVolumeWorldToObject at 176
  Matrix4x4 unity_WorldToLight at 288
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 unity_OcclusionMaskSelector at 48
  Vector4 _LightShadowData at 64
  Vector4 unity_ShadowFadeCenterAndType at 80
  Vector4 unity_ProbeVolumeParams at 160
  Vector3 unity_ProbeVolumeSizeInv at 240
  Vector3 unity_ProbeVolumeMin at 256
  Vector4 _LightColor0 at 272
  Float _Metallic0 at 352
  Float _Metallic1 at 356
  Float _Metallic2 at 360
  Float _Metallic3 at 364
  Float _Smoothness0 at 368
  Float _Smoothness1 at 372
  Float _Smoothness2 at 376
  Float _Smoothness3 at 380
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    texture2d<float, access::sample > _Control [[ texture (0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture (2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture (3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture (4) ]] ,
    texturecube<float, access::sample > _ShadowMapTexture [[ texture (5) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture (6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    half4 u_xlat10_6;
    float3 u_xlat7;
    float u_xlat8;
    float u_xlat9;
    bool u_xlatb9;
    float u_xlat10;
    float u_xlat14;
    float u_xlat16;
    bool u_xlatb16;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat3.xyz = float3(u_xlat22) * u_xlat2.xyz;
    u_xlat4 = _Control.sample(sampler_Control, input.TEXCOORD4.xy);
    u_xlat22 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat23 = u_xlat22 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat23);
    u_xlat5 = _Splat0.sample(sampler_Splat0, input.TEXCOORD0.xy);
    u_xlat5 = u_xlat4.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * Globals._Smoothness0;
    u_xlat10_6 = half4(_Splat1.sample(sampler_Splat1, input.TEXCOORD0.zw));
    u_xlat6 = u_xlat4.yyyy * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = half4(_Splat2.sample(sampler_Splat2, input.TEXCOORD1.xy));
    u_xlat6 = u_xlat4.zzzz * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = half4(_Splat3.sample(sampler_Splat3, input.TEXCOORD1.zw));
    u_xlat6 = u_xlat4.wwww * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat23 = dot(u_xlat4, float4(Globals._Metallic0, Globals._Metallic1, Globals._Metallic2, Globals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD3.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD3.xxx + u_xlat4.xyz;
    u_xlat4.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD3.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat9 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = (-u_xlat2.x) + u_xlat9;
    u_xlat2.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat9 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * Globals._LightShadowData.z + Globals._LightShadowData.w;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb9 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb9){
        u_xlatb16 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD3.xxx + u_xlat6.xyz;
        u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD3.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb16)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat16 = u_xlat6.y * 0.25 + 0.75;
        u_xlat24 = Globals.unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat6.x = max(u_xlat16, u_xlat24);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat16 = dot(u_xlat6, Globals.unity_OcclusionMaskSelector);
    u_xlat16 = clamp(u_xlat16, 0.0f, 1.0f);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-Globals._LightPositionRange.xyz);
    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = u_xlat24 * Globals._LightPositionRange.w;
    u_xlat24 = u_xlat24 * 0.970000029;
    u_xlat25 = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat6.xyz, level(0.0)).x;
    u_xlatb24 = u_xlat25<u_xlat24;
    u_xlat24 = (u_xlatb24) ? Globals._LightShadowData.x : 1.0;
    u_xlat2.x = u_xlat2.x + u_xlat24;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat16 = min(u_xlat2.x, u_xlat16);
    u_xlat2.x = (u_xlatb9) ? u_xlat16 : u_xlat2.x;
    u_xlat9 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat9 = _LightTexture0.sample(sampler_LightTexture0, float2(u_xlat9)).w;
    u_xlat2.x = u_xlat2.x * u_xlat9;
    u_xlat2.xyz = u_xlat2.xxx * Globals._LightColor0.xyz;
    u_xlat24 = dot(input.TEXCOORD2.xyz, input.TEXCOORD2.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat4.xyz = float3(u_xlat24) * input.TEXCOORD2.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = float3(u_xlat23) * u_xlat6.xyz + float3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = (-u_xlat23) * 0.779083729 + 0.779083729;
    u_xlat5.xyz = float3(u_xlat23) * u_xlat5.xyz;
    u_xlat23 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat21) + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat10 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, float2(u_xlat23));
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat1.x;
    u_xlat14 = u_xlat7.x * u_xlat14 + 1.0;
    u_xlat1.x = -abs(u_xlat21) + 1.0;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat7.x = u_xlat7.x * u_xlat1.x + 1.0;
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat23 * u_xlat23;
    u_xlat1.x = (-u_xlat23) * u_xlat23 + 1.0;
    u_xlat8 = abs(u_xlat21) * u_xlat1.x + u_xlat14;
    u_xlat1.x = u_xlat3.x * u_xlat1.x + u_xlat14;
    u_xlat21 = abs(u_xlat21) * u_xlat1.x;
    u_xlat21 = u_xlat3.x * u_xlat8 + u_xlat21;
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat10 * u_xlat14 + (-u_xlat10);
    u_xlat1.x = u_xlat1.x * u_xlat10 + 1.0;
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat14 = u_xlat14 / u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat3.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat2.xyz;
    u_xlat7.xyz = u_xlat2.xyz * float3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    output.SV_Target0.xyz = float3(u_xlat22) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
out vec2 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  samplerCube _ShadowMapTexture;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat16_4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat10_5;
vec4 u_xlat6;
vec4 u_xlat10_6;
vec3 u_xlat7;
float u_xlat8;
float u_xlat9;
bool u_xlatb9;
float u_xlat10;
float u_xlat14;
float u_xlat16;
bool u_xlatb16;
float u_xlat21;
bool u_xlatb21;
float u_xlat22;
float u_xlat16_22;
float u_xlat23;
float u_xlat16_23;
float u_xlat24;
bool u_xlatb24;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat2.xyz;
    u_xlat10_4 = texture(_Control, vs_TEXCOORD4.xy);
    u_xlat16_22 = dot(u_xlat10_4, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_23 = u_xlat16_22 + 0.00100000005;
    u_xlat16_4 = u_xlat10_4 / vec4(u_xlat16_23);
    u_xlat10_5 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat5 = u_xlat16_4.xxxx * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness0;
    u_xlat10_6 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat6 = u_xlat16_4.yyyy * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat6 = u_xlat16_4.zzzz * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat6 = u_xlat16_4.wwww * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat23 = dot(u_xlat16_4, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlat4.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat9 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = (-u_xlat2.x) + u_xlat9;
    u_xlat2.x = unity_ShadowFadeCenterAndType.w * u_xlat9 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlatb9 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb9){
        u_xlatb16 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb16)) ? u_xlat6.xyz : vs_TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat16 = u_xlat6.y * 0.25 + 0.75;
        u_xlat24 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat6.x = max(u_xlat16, u_xlat24);
        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    //ENDIF
    }
    u_xlat16 = dot(u_xlat6, unity_OcclusionMaskSelector);
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
    u_xlat6.xyz = vs_TEXCOORD3.xyz + (-_LightPositionRange.xyz);
    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = u_xlat24 * _LightPositionRange.w;
    u_xlat24 = u_xlat24 * 0.970000029;
    u_xlat10_6 = textureLod(_ShadowMapTexture, u_xlat6.xyz, 0.0);
    u_xlatb24 = u_xlat10_6.x<u_xlat24;
    u_xlat24 = (u_xlatb24) ? _LightShadowData.x : 1.0;
    u_xlat2.x = u_xlat2.x + u_xlat24;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16 = min(u_xlat2.x, u_xlat16);
    u_xlat2.x = (u_xlatb9) ? u_xlat16 : u_xlat2.x;
    u_xlat9 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat10_4 = texture(_LightTexture0, vec2(u_xlat9));
    u_xlat2.x = u_xlat2.x * u_xlat10_4.w;
    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
    u_xlat24 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD2.xyz;
    u_xlat6.xyz = u_xlat5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = vec3(u_xlat23) * u_xlat6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = (-u_xlat23) * 0.779083729 + 0.779083729;
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz;
    u_xlat23 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat10 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, vec2(u_xlat23));
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat1.x;
    u_xlat14 = u_xlat7.x * u_xlat14 + 1.0;
    u_xlat1.x = -abs(u_xlat21) + 1.0;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat7.x = u_xlat7.x * u_xlat1.x + 1.0;
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat23 * u_xlat23;
    u_xlat1.x = (-u_xlat23) * u_xlat23 + 1.0;
    u_xlat8 = abs(u_xlat21) * u_xlat1.x + u_xlat14;
    u_xlat1.x = u_xlat3.x * u_xlat1.x + u_xlat14;
    u_xlat21 = abs(u_xlat21) * u_xlat1.x;
    u_xlat21 = u_xlat3.x * u_xlat8 + u_xlat21;
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat10 * u_xlat14 + (-u_xlat10);
    u_xlat1.x = u_xlat1.x * u_xlat10 + 1.0;
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat14 = u_xlat14 / u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat3.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat2.xyz;
    u_xlat7.xyz = u_xlat2.xyz * vec3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_22) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: POINT SHADOWS_CUBE SHADOWS_SOFT 
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (272 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 128
  Vector4 _Control_ST at 192
  Vector4 _Splat0_ST at 208
  Vector4 _Splat1_ST at 224
  Vector4 _Splat2_ST at 240
  Vector4 _Splat3_ST at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD3.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD2.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    output.TEXCOORD5.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set CUBE Texture "_ShadowMapTexture" to slot 5 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 6 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 0

Constant Buffer "Globals" (384 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 96
  Matrix4x4 unity_ProbeVolumeWorldToObject at 176
  Matrix4x4 unity_WorldToLight at 288
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 unity_OcclusionMaskSelector at 48
  Vector4 _LightShadowData at 64
  Vector4 unity_ShadowFadeCenterAndType at 80
  Vector4 unity_ProbeVolumeParams at 160
  Vector3 unity_ProbeVolumeSizeInv at 240
  Vector3 unity_ProbeVolumeMin at 256
  Vector4 _LightColor0 at 272
  Float _Metallic0 at 352
  Float _Metallic1 at 356
  Float _Metallic2 at 360
  Float _Metallic3 at 364
  Float _Smoothness0 at 368
  Float _Smoothness1 at 372
  Float _Smoothness2 at 376
  Float _Smoothness3 at 380
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    texture2d<float, access::sample > _Control [[ texture (0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture (2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture (3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture (4) ]] ,
    texturecube<float, access::sample > _ShadowMapTexture [[ texture (5) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture (6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    half4 u_xlat10_6;
    bool4 u_xlatb6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float u_xlat10;
    float u_xlat11;
    bool u_xlatb11;
    float u_xlat12;
    float u_xlat18;
    float u_xlat20;
    bool u_xlatb20;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb30;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat1.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = rsqrt(u_xlat28);
    u_xlat3.xyz = float3(u_xlat28) * u_xlat2.xyz;
    u_xlat4 = _Control.sample(sampler_Control, input.TEXCOORD4.xy);
    u_xlat28 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat29 = u_xlat28 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat29);
    u_xlat5 = _Splat0.sample(sampler_Splat0, input.TEXCOORD0.xy);
    u_xlat5 = u_xlat4.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * Globals._Smoothness0;
    u_xlat10_6 = half4(_Splat1.sample(sampler_Splat1, input.TEXCOORD0.zw));
    u_xlat6 = u_xlat4.yyyy * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = half4(_Splat2.sample(sampler_Splat2, input.TEXCOORD1.xy));
    u_xlat6 = u_xlat4.zzzz * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = half4(_Splat3.sample(sampler_Splat3, input.TEXCOORD1.zw));
    u_xlat6 = u_xlat4.wwww * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat29 = dot(u_xlat4, float4(Globals._Metallic0, Globals._Metallic1, Globals._Metallic2, Globals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD3.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD3.xxx + u_xlat4.xyz;
    u_xlat4.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD3.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat11 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat11 = sqrt(u_xlat11);
    u_xlat11 = (-u_xlat2.x) + u_xlat11;
    u_xlat2.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat11 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * Globals._LightShadowData.z + Globals._LightShadowData.w;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb11 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb11){
        u_xlatb20 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD3.xxx + u_xlat6.xyz;
        u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD3.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb20)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat20 = u_xlat6.y * 0.25 + 0.75;
        u_xlat30 = Globals.unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat6.x = max(u_xlat20, u_xlat30);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat20 = dot(u_xlat6, Globals.unity_OcclusionMaskSelector);
    u_xlat20 = clamp(u_xlat20, 0.0f, 1.0f);
    u_xlatb30 = u_xlat2.x<0.99000001;
    if(u_xlatb30){
        u_xlat6.xyz = input.TEXCOORD3.xyz + (-Globals._LightPositionRange.xyz);
        u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat30 = sqrt(u_xlat30);
        u_xlat30 = u_xlat30 * Globals._LightPositionRange.w;
        u_xlat30 = u_xlat30 * 0.970000029;
        u_xlat7.xyz = u_xlat6.xyz + float3(0.0078125, 0.0078125, 0.0078125);
        u_xlat7.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat7.xyz, level(0.0)).x;
        u_xlat8.xyz = u_xlat6.xyz + float3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat7.y = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat8.xyz, level(0.0)).x;
        u_xlat8.xyz = u_xlat6.xyz + float3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat7.z = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat8.xyz, level(0.0)).x;
        u_xlat6.xyz = u_xlat6.xyz + float3(0.0078125, -0.0078125, -0.0078125);
        u_xlat7.w = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat6.xyz, level(0.0)).x;
        u_xlatb6 = (u_xlat7<float4(u_xlat30));
        u_xlat6.x = (u_xlatb6.x) ? Globals._LightShadowData.x : float(1.0);
        u_xlat6.y = (u_xlatb6.y) ? Globals._LightShadowData.x : float(1.0);
        u_xlat6.z = (u_xlatb6.z) ? Globals._LightShadowData.x : float(1.0);
        u_xlat6.w = (u_xlatb6.w) ? Globals._LightShadowData.x : float(1.0);
        u_xlat30 = dot(u_xlat6, float4(0.25, 0.25, 0.25, 0.25));
    } else {
        u_xlat30 = 1.0;
    }
    u_xlat2.x = u_xlat2.x + u_xlat30;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat20 = min(u_xlat2.x, u_xlat20);
    u_xlat2.x = (u_xlatb11) ? u_xlat20 : u_xlat2.x;
    u_xlat11 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat11 = _LightTexture0.sample(sampler_LightTexture0, float2(u_xlat11)).w;
    u_xlat2.x = u_xlat2.x * u_xlat11;
    u_xlat2.xyz = u_xlat2.xxx * Globals._LightColor0.xyz;
    u_xlat30 = dot(input.TEXCOORD2.xyz, input.TEXCOORD2.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat4.xyz = float3(u_xlat30) * input.TEXCOORD2.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = float3(u_xlat29) * u_xlat6.xyz + float3(0.220916301, 0.220916301, 0.220916301);
    u_xlat29 = (-u_xlat29) * 0.779083729 + 0.779083729;
    u_xlat5.xyz = float3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat27) + u_xlat3.xyz;
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat0.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat9.x = u_xlat0.x * u_xlat0.x;
    u_xlat9.x = dot(u_xlat9.xx, float2(u_xlat29));
    u_xlat9.x = u_xlat9.x + -0.5;
    u_xlat18 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat18 * u_xlat18;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = u_xlat9.x * u_xlat18 + 1.0;
    u_xlat1.x = -abs(u_xlat27) + 1.0;
    u_xlat10 = u_xlat1.x * u_xlat1.x;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat1.x = u_xlat1.x * u_xlat10;
    u_xlat9.x = u_xlat9.x * u_xlat1.x + 1.0;
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat18 = u_xlat29 * u_xlat29;
    u_xlat1.x = (-u_xlat29) * u_xlat29 + 1.0;
    u_xlat10 = abs(u_xlat27) * u_xlat1.x + u_xlat18;
    u_xlat1.x = u_xlat3.x * u_xlat1.x + u_xlat18;
    u_xlat27 = abs(u_xlat27) * u_xlat1.x;
    u_xlat27 = u_xlat3.x * u_xlat10 + u_xlat27;
    u_xlat27 = u_xlat27 + 9.99999975e-06;
    u_xlat27 = 0.5 / u_xlat27;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat1.x = u_xlat12 * u_xlat18 + (-u_xlat12);
    u_xlat1.x = u_xlat1.x * u_xlat12 + 1.0;
    u_xlat18 = u_xlat18 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat18 = u_xlat18 / u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat27;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat9.y = sqrt(u_xlat18);
    u_xlat9.xy = u_xlat3.xx * u_xlat9.xy;
    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb27 = u_xlat27!=0.0;
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat27 * u_xlat9.y;
    u_xlat1.xyz = u_xlat9.xxx * u_xlat2.xyz;
    u_xlat9.xyz = u_xlat2.xyz * float3(u_xlat18);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat9.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    output.SV_Target0.xyz = float3(u_xlat28) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
out vec2 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  samplerCube _ShadowMapTexture;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat16_4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat10_5;
vec4 u_xlat6;
vec4 u_xlat10_6;
bvec4 u_xlatb6;
vec3 u_xlat7;
vec4 u_xlat10_7;
vec4 u_xlat10_8;
vec4 u_xlat10_9;
vec3 u_xlat10;
float u_xlat11;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
vec3 u_xlat17;
float u_xlat20;
float u_xlat22;
bool u_xlatb22;
float u_xlat30;
bool u_xlatb30;
float u_xlat31;
float u_xlat16_31;
float u_xlat32;
float u_xlat16_32;
float u_xlat33;
bool u_xlatb33;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat2.xyz;
    u_xlat10_4 = texture(_Control, vs_TEXCOORD4.xy);
    u_xlat16_31 = dot(u_xlat10_4, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_32 = u_xlat16_31 + 0.00100000005;
    u_xlat16_4 = u_xlat10_4 / vec4(u_xlat16_32);
    u_xlat10_5 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat5 = u_xlat16_4.xxxx * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness0;
    u_xlat10_6 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat6 = u_xlat16_4.yyyy * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat6 = u_xlat16_4.zzzz * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat6 = u_xlat16_4.wwww * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat32 = dot(u_xlat16_4, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlat4.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat12 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat2.x) + u_xlat12;
    u_xlat2.x = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb22 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb22)) ? u_xlat6.xyz : vs_TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat22 = u_xlat6.y * 0.25 + 0.75;
        u_xlat33 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat6.x = max(u_xlat22, u_xlat33);
        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    //ENDIF
    }
    u_xlat22 = dot(u_xlat6, unity_OcclusionMaskSelector);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlatb33 = u_xlat2.x<0.99000001;
    if(u_xlatb33){
        u_xlat6.xyz = vs_TEXCOORD3.xyz + (-_LightPositionRange.xyz);
        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat33 = u_xlat33 * _LightPositionRange.w;
        u_xlat33 = u_xlat33 * 0.970000029;
        u_xlat7.xyz = u_xlat6.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
        u_xlat10_7 = textureLod(_ShadowMapTexture, u_xlat7.xyz, 0.0);
        u_xlat17.xyz = u_xlat6.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat10_8 = textureLod(_ShadowMapTexture, u_xlat17.xyz, 0.0);
        u_xlat17.xyz = u_xlat6.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat10_9 = textureLod(_ShadowMapTexture, u_xlat17.xyz, 0.0);
        u_xlat6.xyz = u_xlat6.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
        u_xlat6 = textureLod(_ShadowMapTexture, u_xlat6.xyz, 0.0).yzwx;
        u_xlat6.x = u_xlat10_7.x;
        u_xlat6.y = u_xlat10_8.x;
        u_xlat6.z = u_xlat10_9.x;
        u_xlatb6 = lessThan(u_xlat6, vec4(u_xlat33));
        u_xlat6.x = (u_xlatb6.x) ? _LightShadowData.x : float(1.0);
        u_xlat6.y = (u_xlatb6.y) ? _LightShadowData.x : float(1.0);
        u_xlat6.z = (u_xlatb6.z) ? _LightShadowData.x : float(1.0);
        u_xlat6.w = (u_xlatb6.w) ? _LightShadowData.x : float(1.0);
        u_xlat33 = dot(u_xlat6, vec4(0.25, 0.25, 0.25, 0.25));
    } else {
        u_xlat33 = 1.0;
    //ENDIF
    }
    u_xlat2.x = u_xlat2.x + u_xlat33;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat22 = min(u_xlat2.x, u_xlat22);
    u_xlat2.x = (u_xlatb12) ? u_xlat22 : u_xlat2.x;
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat10_4 = texture(_LightTexture0, vec2(u_xlat12));
    u_xlat2.x = u_xlat2.x * u_xlat10_4.w;
    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
    u_xlat33 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat4.xyz = vec3(u_xlat33) * vs_TEXCOORD2.xyz;
    u_xlat6.xyz = u_xlat5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = vec3(u_xlat32) * u_xlat6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat32 = (-u_xlat32) * 0.779083729 + 0.779083729;
    u_xlat5.xyz = vec3(u_xlat32) * u_xlat5.xyz;
    u_xlat32 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat3.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat10.x = u_xlat0.x * u_xlat0.x;
    u_xlat10.x = dot(u_xlat10.xx, vec2(u_xlat32));
    u_xlat10.x = u_xlat10.x + -0.5;
    u_xlat20 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat20 * u_xlat20;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat1.x;
    u_xlat20 = u_xlat10.x * u_xlat20 + 1.0;
    u_xlat1.x = -abs(u_xlat30) + 1.0;
    u_xlat11 = u_xlat1.x * u_xlat1.x;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat1.x = u_xlat1.x * u_xlat11;
    u_xlat10.x = u_xlat10.x * u_xlat1.x + 1.0;
    u_xlat10.x = u_xlat10.x * u_xlat20;
    u_xlat20 = u_xlat32 * u_xlat32;
    u_xlat1.x = (-u_xlat32) * u_xlat32 + 1.0;
    u_xlat11 = abs(u_xlat30) * u_xlat1.x + u_xlat20;
    u_xlat1.x = u_xlat3.x * u_xlat1.x + u_xlat20;
    u_xlat30 = abs(u_xlat30) * u_xlat1.x;
    u_xlat30 = u_xlat3.x * u_xlat11 + u_xlat30;
    u_xlat30 = u_xlat30 + 9.99999975e-06;
    u_xlat30 = 0.5 / u_xlat30;
    u_xlat20 = u_xlat20 * u_xlat20;
    u_xlat1.x = u_xlat13 * u_xlat20 + (-u_xlat13);
    u_xlat1.x = u_xlat1.x * u_xlat13 + 1.0;
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat20 = u_xlat20 / u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat30;
    u_xlat20 = u_xlat20 * 3.14159274;
    u_xlat20 = max(u_xlat20, 9.99999975e-05);
    u_xlat10.y = sqrt(u_xlat20);
    u_xlat10.xy = u_xlat3.xx * u_xlat10.xy;
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb30 = u_xlat30!=0.0;
    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
    u_xlat20 = u_xlat30 * u_xlat10.y;
    u_xlat1.xyz = u_xlat10.xxx * u_xlat2.xyz;
    u_xlat10.xyz = u_xlat2.xyz * vec3(u_xlat20);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat10.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_31) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (272 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 128
  Vector4 _Control_ST at 192
  Vector4 _Splat0_ST at 208
  Vector4 _Splat1_ST at 224
  Vector4 _Splat2_ST at 240
  Vector4 _Splat3_ST at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD3.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD2.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    output.TEXCOORD5.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 4
Set 2D Texture "_Splat0" to slot 1 sampler slot 5
Set 2D Texture "_Splat1" to slot 2 sampler slot 6
Set 2D Texture "_Splat2" to slot 3 sampler slot 7
Set 2D Texture "_Splat3" to slot 4 sampler slot 8
Set CUBE Texture "_ShadowMapTexture" to slot 5 sampler slot 1
Set 2D Texture "_LightTextureB0" to slot 6 sampler slot 3
Set CUBE Texture "_LightTexture0" to slot 7 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 8 sampler slot 0

Constant Buffer "Globals" (384 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 96
  Matrix4x4 unity_ProbeVolumeWorldToObject at 176
  Matrix4x4 unity_WorldToLight at 288
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 unity_OcclusionMaskSelector at 48
  Vector4 _LightShadowData at 64
  Vector4 unity_ShadowFadeCenterAndType at 80
  Vector4 unity_ProbeVolumeParams at 160
  Vector3 unity_ProbeVolumeSizeInv at 240
  Vector3 unity_ProbeVolumeMin at 256
  Vector4 _LightColor0 at 272
  Float _Metallic0 at 352
  Float _Metallic1 at 356
  Float _Metallic2 at 360
  Float _Metallic3 at 364
  Float _Smoothness0 at 368
  Float _Smoothness1 at 372
  Float _Smoothness2 at 376
  Float _Smoothness3 at 380
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    texture2d<float, access::sample > _Control [[ texture (0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture (2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture (3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture (4) ]] ,
    texturecube<float, access::sample > _ShadowMapTexture [[ texture (5) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture (6) ]] ,
    texturecube<float, access::sample > _LightTexture0 [[ texture (7) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    half4 u_xlat10_6;
    float3 u_xlat7;
    float u_xlat8;
    float u_xlat9;
    bool u_xlatb9;
    float u_xlat10;
    float u_xlat14;
    float u_xlat16;
    bool u_xlatb16;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat3.xyz = float3(u_xlat22) * u_xlat2.xyz;
    u_xlat4 = _Control.sample(sampler_Control, input.TEXCOORD4.xy);
    u_xlat22 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat23 = u_xlat22 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat23);
    u_xlat5 = _Splat0.sample(sampler_Splat0, input.TEXCOORD0.xy);
    u_xlat5 = u_xlat4.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * Globals._Smoothness0;
    u_xlat10_6 = half4(_Splat1.sample(sampler_Splat1, input.TEXCOORD0.zw));
    u_xlat6 = u_xlat4.yyyy * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = half4(_Splat2.sample(sampler_Splat2, input.TEXCOORD1.xy));
    u_xlat6 = u_xlat4.zzzz * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = half4(_Splat3.sample(sampler_Splat3, input.TEXCOORD1.zw));
    u_xlat6 = u_xlat4.wwww * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat23 = dot(u_xlat4, float4(Globals._Metallic0, Globals._Metallic1, Globals._Metallic2, Globals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD3.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD3.xxx + u_xlat4.xyz;
    u_xlat4.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD3.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat9 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = (-u_xlat2.x) + u_xlat9;
    u_xlat2.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat9 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * Globals._LightShadowData.z + Globals._LightShadowData.w;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb9 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb9){
        u_xlatb16 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD3.xxx + u_xlat6.xyz;
        u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD3.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb16)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat16 = u_xlat6.y * 0.25 + 0.75;
        u_xlat24 = Globals.unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat6.x = max(u_xlat16, u_xlat24);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat16 = dot(u_xlat6, Globals.unity_OcclusionMaskSelector);
    u_xlat16 = clamp(u_xlat16, 0.0f, 1.0f);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-Globals._LightPositionRange.xyz);
    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = u_xlat24 * Globals._LightPositionRange.w;
    u_xlat24 = u_xlat24 * 0.970000029;
    u_xlat25 = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat6.xyz, level(0.0)).x;
    u_xlatb24 = u_xlat25<u_xlat24;
    u_xlat24 = (u_xlatb24) ? Globals._LightShadowData.x : 1.0;
    u_xlat2.x = u_xlat2.x + u_xlat24;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat16 = min(u_xlat2.x, u_xlat16);
    u_xlat2.x = (u_xlatb9) ? u_xlat16 : u_xlat2.x;
    u_xlat9 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat9 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat9)).w;
    u_xlat16 = _LightTexture0.sample(sampler_LightTexture0, u_xlat4.xyz).w;
    u_xlat9 = u_xlat16 * u_xlat9;
    u_xlat2.x = u_xlat2.x * u_xlat9;
    u_xlat2.xyz = u_xlat2.xxx * Globals._LightColor0.xyz;
    u_xlat24 = dot(input.TEXCOORD2.xyz, input.TEXCOORD2.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat4.xyz = float3(u_xlat24) * input.TEXCOORD2.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = float3(u_xlat23) * u_xlat6.xyz + float3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = (-u_xlat23) * 0.779083729 + 0.779083729;
    u_xlat5.xyz = float3(u_xlat23) * u_xlat5.xyz;
    u_xlat23 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat21) + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat10 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, float2(u_xlat23));
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat1.x;
    u_xlat14 = u_xlat7.x * u_xlat14 + 1.0;
    u_xlat1.x = -abs(u_xlat21) + 1.0;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat7.x = u_xlat7.x * u_xlat1.x + 1.0;
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat23 * u_xlat23;
    u_xlat1.x = (-u_xlat23) * u_xlat23 + 1.0;
    u_xlat8 = abs(u_xlat21) * u_xlat1.x + u_xlat14;
    u_xlat1.x = u_xlat3.x * u_xlat1.x + u_xlat14;
    u_xlat21 = abs(u_xlat21) * u_xlat1.x;
    u_xlat21 = u_xlat3.x * u_xlat8 + u_xlat21;
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat10 * u_xlat14 + (-u_xlat10);
    u_xlat1.x = u_xlat1.x * u_xlat10 + 1.0;
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat14 = u_xlat14 / u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat3.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat2.xyz;
    u_xlat7.xyz = u_xlat2.xyz * float3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    output.SV_Target0.xyz = float3(u_xlat22) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
out vec2 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  samplerCube _ShadowMapTexture;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat16_4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat10_5;
vec4 u_xlat6;
vec4 u_xlat10_6;
vec3 u_xlat7;
float u_xlat8;
float u_xlat9;
float u_xlat16_9;
bool u_xlatb9;
float u_xlat10;
float u_xlat14;
float u_xlat16;
bool u_xlatb16;
float u_xlat21;
bool u_xlatb21;
float u_xlat22;
float u_xlat16_22;
float u_xlat23;
float u_xlat16_23;
float u_xlat24;
bool u_xlatb24;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat2.xyz;
    u_xlat10_4 = texture(_Control, vs_TEXCOORD4.xy);
    u_xlat16_22 = dot(u_xlat10_4, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_23 = u_xlat16_22 + 0.00100000005;
    u_xlat16_4 = u_xlat10_4 / vec4(u_xlat16_23);
    u_xlat10_5 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat5 = u_xlat16_4.xxxx * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness0;
    u_xlat10_6 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat6 = u_xlat16_4.yyyy * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat6 = u_xlat16_4.zzzz * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat6 = u_xlat16_4.wwww * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat23 = dot(u_xlat16_4, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlat4.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat9 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = (-u_xlat2.x) + u_xlat9;
    u_xlat2.x = unity_ShadowFadeCenterAndType.w * u_xlat9 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlatb9 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb9){
        u_xlatb16 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb16)) ? u_xlat6.xyz : vs_TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat16 = u_xlat6.y * 0.25 + 0.75;
        u_xlat24 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat6.x = max(u_xlat16, u_xlat24);
        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    //ENDIF
    }
    u_xlat16 = dot(u_xlat6, unity_OcclusionMaskSelector);
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
    u_xlat6.xyz = vs_TEXCOORD3.xyz + (-_LightPositionRange.xyz);
    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = u_xlat24 * _LightPositionRange.w;
    u_xlat24 = u_xlat24 * 0.970000029;
    u_xlat10_6 = textureLod(_ShadowMapTexture, u_xlat6.xyz, 0.0);
    u_xlatb24 = u_xlat10_6.x<u_xlat24;
    u_xlat24 = (u_xlatb24) ? _LightShadowData.x : 1.0;
    u_xlat2.x = u_xlat2.x + u_xlat24;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16 = min(u_xlat2.x, u_xlat16);
    u_xlat2.x = (u_xlatb9) ? u_xlat16 : u_xlat2.x;
    u_xlat9 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat10_6 = texture(_LightTextureB0, vec2(u_xlat9));
    u_xlat10_4 = texture(_LightTexture0, u_xlat4.xyz);
    u_xlat16_9 = u_xlat10_4.w * u_xlat10_6.w;
    u_xlat2.x = u_xlat2.x * u_xlat16_9;
    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
    u_xlat24 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD2.xyz;
    u_xlat6.xyz = u_xlat5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = vec3(u_xlat23) * u_xlat6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = (-u_xlat23) * 0.779083729 + 0.779083729;
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz;
    u_xlat23 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat10 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, vec2(u_xlat23));
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat1.x;
    u_xlat14 = u_xlat7.x * u_xlat14 + 1.0;
    u_xlat1.x = -abs(u_xlat21) + 1.0;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat7.x = u_xlat7.x * u_xlat1.x + 1.0;
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat23 * u_xlat23;
    u_xlat1.x = (-u_xlat23) * u_xlat23 + 1.0;
    u_xlat8 = abs(u_xlat21) * u_xlat1.x + u_xlat14;
    u_xlat1.x = u_xlat3.x * u_xlat1.x + u_xlat14;
    u_xlat21 = abs(u_xlat21) * u_xlat1.x;
    u_xlat21 = u_xlat3.x * u_xlat8 + u_xlat21;
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat10 * u_xlat14 + (-u_xlat10);
    u_xlat1.x = u_xlat1.x * u_xlat10 + 1.0;
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat14 = u_xlat14 / u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat3.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat2.xyz;
    u_xlat7.xyz = u_xlat2.xyz * vec3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_22) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: POINT_COOKIE SHADOWS_CUBE SHADOWS_SOFT 
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (272 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 128
  Vector4 _Control_ST at 192
  Vector4 _Splat0_ST at 208
  Vector4 _Splat1_ST at 224
  Vector4 _Splat2_ST at 240
  Vector4 _Splat3_ST at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD3.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD2.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD4.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    output.TEXCOORD5.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 4
Set 2D Texture "_Splat0" to slot 1 sampler slot 5
Set 2D Texture "_Splat1" to slot 2 sampler slot 6
Set 2D Texture "_Splat2" to slot 3 sampler slot 7
Set 2D Texture "_Splat3" to slot 4 sampler slot 8
Set CUBE Texture "_ShadowMapTexture" to slot 5 sampler slot 1
Set 2D Texture "_LightTextureB0" to slot 6 sampler slot 3
Set CUBE Texture "_LightTexture0" to slot 7 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 8 sampler slot 0

Constant Buffer "Globals" (384 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 96
  Matrix4x4 unity_ProbeVolumeWorldToObject at 176
  Matrix4x4 unity_WorldToLight at 288
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 unity_OcclusionMaskSelector at 48
  Vector4 _LightShadowData at 64
  Vector4 unity_ShadowFadeCenterAndType at 80
  Vector4 unity_ProbeVolumeParams at 160
  Vector3 unity_ProbeVolumeSizeInv at 240
  Vector3 unity_ProbeVolumeMin at 256
  Vector4 _LightColor0 at 272
  Float _Metallic0 at 352
  Float _Metallic1 at 356
  Float _Metallic2 at 360
  Float _Metallic3 at 364
  Float _Smoothness0 at 368
  Float _Smoothness1 at 372
  Float _Smoothness2 at 376
  Float _Smoothness3 at 380
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    texture2d<float, access::sample > _Control [[ texture (0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture (2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture (3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture (4) ]] ,
    texturecube<float, access::sample > _ShadowMapTexture [[ texture (5) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture (6) ]] ,
    texturecube<float, access::sample > _LightTexture0 [[ texture (7) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    half4 u_xlat10_6;
    bool4 u_xlatb6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float u_xlat10;
    float u_xlat11;
    bool u_xlatb11;
    float u_xlat12;
    float u_xlat18;
    float u_xlat20;
    bool u_xlatb20;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb30;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat1.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = rsqrt(u_xlat28);
    u_xlat3.xyz = float3(u_xlat28) * u_xlat2.xyz;
    u_xlat4 = _Control.sample(sampler_Control, input.TEXCOORD4.xy);
    u_xlat28 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat29 = u_xlat28 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat29);
    u_xlat5 = _Splat0.sample(sampler_Splat0, input.TEXCOORD0.xy);
    u_xlat5 = u_xlat4.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * Globals._Smoothness0;
    u_xlat10_6 = half4(_Splat1.sample(sampler_Splat1, input.TEXCOORD0.zw));
    u_xlat6 = u_xlat4.yyyy * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = half4(_Splat2.sample(sampler_Splat2, input.TEXCOORD1.xy));
    u_xlat6 = u_xlat4.zzzz * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = half4(_Splat3.sample(sampler_Splat3, input.TEXCOORD1.zw));
    u_xlat6 = u_xlat4.wwww * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat29 = dot(u_xlat4, float4(Globals._Metallic0, Globals._Metallic1, Globals._Metallic2, Globals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD3.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD3.xxx + u_xlat4.xyz;
    u_xlat4.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD3.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat11 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat11 = sqrt(u_xlat11);
    u_xlat11 = (-u_xlat2.x) + u_xlat11;
    u_xlat2.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat11 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * Globals._LightShadowData.z + Globals._LightShadowData.w;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb11 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb11){
        u_xlatb20 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD3.xxx + u_xlat6.xyz;
        u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD3.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb20)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat20 = u_xlat6.y * 0.25 + 0.75;
        u_xlat30 = Globals.unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat6.x = max(u_xlat20, u_xlat30);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat20 = dot(u_xlat6, Globals.unity_OcclusionMaskSelector);
    u_xlat20 = clamp(u_xlat20, 0.0f, 1.0f);
    u_xlatb30 = u_xlat2.x<0.99000001;
    if(u_xlatb30){
        u_xlat6.xyz = input.TEXCOORD3.xyz + (-Globals._LightPositionRange.xyz);
        u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat30 = sqrt(u_xlat30);
        u_xlat30 = u_xlat30 * Globals._LightPositionRange.w;
        u_xlat30 = u_xlat30 * 0.970000029;
        u_xlat7.xyz = u_xlat6.xyz + float3(0.0078125, 0.0078125, 0.0078125);
        u_xlat7.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat7.xyz, level(0.0)).x;
        u_xlat8.xyz = u_xlat6.xyz + float3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat7.y = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat8.xyz, level(0.0)).x;
        u_xlat8.xyz = u_xlat6.xyz + float3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat7.z = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat8.xyz, level(0.0)).x;
        u_xlat6.xyz = u_xlat6.xyz + float3(0.0078125, -0.0078125, -0.0078125);
        u_xlat7.w = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat6.xyz, level(0.0)).x;
        u_xlatb6 = (u_xlat7<float4(u_xlat30));
        u_xlat6.x = (u_xlatb6.x) ? Globals._LightShadowData.x : float(1.0);
        u_xlat6.y = (u_xlatb6.y) ? Globals._LightShadowData.x : float(1.0);
        u_xlat6.z = (u_xlatb6.z) ? Globals._LightShadowData.x : float(1.0);
        u_xlat6.w = (u_xlatb6.w) ? Globals._LightShadowData.x : float(1.0);
        u_xlat30 = dot(u_xlat6, float4(0.25, 0.25, 0.25, 0.25));
    } else {
        u_xlat30 = 1.0;
    }
    u_xlat2.x = u_xlat2.x + u_xlat30;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat20 = min(u_xlat2.x, u_xlat20);
    u_xlat2.x = (u_xlatb11) ? u_xlat20 : u_xlat2.x;
    u_xlat11 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat11 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat11)).w;
    u_xlat20 = _LightTexture0.sample(sampler_LightTexture0, u_xlat4.xyz).w;
    u_xlat11 = u_xlat20 * u_xlat11;
    u_xlat2.x = u_xlat2.x * u_xlat11;
    u_xlat2.xyz = u_xlat2.xxx * Globals._LightColor0.xyz;
    u_xlat30 = dot(input.TEXCOORD2.xyz, input.TEXCOORD2.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat4.xyz = float3(u_xlat30) * input.TEXCOORD2.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = float3(u_xlat29) * u_xlat6.xyz + float3(0.220916301, 0.220916301, 0.220916301);
    u_xlat29 = (-u_xlat29) * 0.779083729 + 0.779083729;
    u_xlat5.xyz = float3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat27) + u_xlat3.xyz;
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat0.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat9.x = u_xlat0.x * u_xlat0.x;
    u_xlat9.x = dot(u_xlat9.xx, float2(u_xlat29));
    u_xlat9.x = u_xlat9.x + -0.5;
    u_xlat18 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat18 * u_xlat18;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = u_xlat9.x * u_xlat18 + 1.0;
    u_xlat1.x = -abs(u_xlat27) + 1.0;
    u_xlat10 = u_xlat1.x * u_xlat1.x;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat1.x = u_xlat1.x * u_xlat10;
    u_xlat9.x = u_xlat9.x * u_xlat1.x + 1.0;
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat18 = u_xlat29 * u_xlat29;
    u_xlat1.x = (-u_xlat29) * u_xlat29 + 1.0;
    u_xlat10 = abs(u_xlat27) * u_xlat1.x + u_xlat18;
    u_xlat1.x = u_xlat3.x * u_xlat1.x + u_xlat18;
    u_xlat27 = abs(u_xlat27) * u_xlat1.x;
    u_xlat27 = u_xlat3.x * u_xlat10 + u_xlat27;
    u_xlat27 = u_xlat27 + 9.99999975e-06;
    u_xlat27 = 0.5 / u_xlat27;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat1.x = u_xlat12 * u_xlat18 + (-u_xlat12);
    u_xlat1.x = u_xlat1.x * u_xlat12 + 1.0;
    u_xlat18 = u_xlat18 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat18 = u_xlat18 / u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat27;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat9.y = sqrt(u_xlat18);
    u_xlat9.xy = u_xlat3.xx * u_xlat9.xy;
    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb27 = u_xlat27!=0.0;
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat27 * u_xlat9.y;
    u_xlat1.xyz = u_xlat9.xxx * u_xlat2.xyz;
    u_xlat9.xyz = u_xlat2.xyz * float3(u_xlat18);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat9.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    output.SV_Target0.xyz = float3(u_xlat28) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
out vec2 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  samplerCube _ShadowMapTexture;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat16_4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat10_5;
vec4 u_xlat6;
vec4 u_xlat10_6;
bvec4 u_xlatb6;
vec3 u_xlat7;
vec4 u_xlat10_7;
vec4 u_xlat10_8;
vec4 u_xlat10_9;
vec3 u_xlat10;
float u_xlat11;
float u_xlat12;
float u_xlat16_12;
bool u_xlatb12;
float u_xlat13;
vec3 u_xlat17;
float u_xlat20;
float u_xlat22;
bool u_xlatb22;
float u_xlat30;
bool u_xlatb30;
float u_xlat31;
float u_xlat16_31;
float u_xlat32;
float u_xlat16_32;
float u_xlat33;
bool u_xlatb33;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat2.xyz;
    u_xlat10_4 = texture(_Control, vs_TEXCOORD4.xy);
    u_xlat16_31 = dot(u_xlat10_4, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_32 = u_xlat16_31 + 0.00100000005;
    u_xlat16_4 = u_xlat10_4 / vec4(u_xlat16_32);
    u_xlat10_5 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat5 = u_xlat16_4.xxxx * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness0;
    u_xlat10_6 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat6 = u_xlat16_4.yyyy * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat6 = u_xlat16_4.zzzz * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat6 = u_xlat16_4.wwww * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat32 = dot(u_xlat16_4, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlat4.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat12 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat2.x) + u_xlat12;
    u_xlat2.x = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb22 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb22)) ? u_xlat6.xyz : vs_TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat22 = u_xlat6.y * 0.25 + 0.75;
        u_xlat33 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat6.x = max(u_xlat22, u_xlat33);
        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    //ENDIF
    }
    u_xlat22 = dot(u_xlat6, unity_OcclusionMaskSelector);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlatb33 = u_xlat2.x<0.99000001;
    if(u_xlatb33){
        u_xlat6.xyz = vs_TEXCOORD3.xyz + (-_LightPositionRange.xyz);
        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat33 = u_xlat33 * _LightPositionRange.w;
        u_xlat33 = u_xlat33 * 0.970000029;
        u_xlat7.xyz = u_xlat6.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
        u_xlat10_7 = textureLod(_ShadowMapTexture, u_xlat7.xyz, 0.0);
        u_xlat17.xyz = u_xlat6.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat10_8 = textureLod(_ShadowMapTexture, u_xlat17.xyz, 0.0);
        u_xlat17.xyz = u_xlat6.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat10_9 = textureLod(_ShadowMapTexture, u_xlat17.xyz, 0.0);
        u_xlat6.xyz = u_xlat6.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
        u_xlat6 = textureLod(_ShadowMapTexture, u_xlat6.xyz, 0.0).yzwx;
        u_xlat6.x = u_xlat10_7.x;
        u_xlat6.y = u_xlat10_8.x;
        u_xlat6.z = u_xlat10_9.x;
        u_xlatb6 = lessThan(u_xlat6, vec4(u_xlat33));
        u_xlat6.x = (u_xlatb6.x) ? _LightShadowData.x : float(1.0);
        u_xlat6.y = (u_xlatb6.y) ? _LightShadowData.x : float(1.0);
        u_xlat6.z = (u_xlatb6.z) ? _LightShadowData.x : float(1.0);
        u_xlat6.w = (u_xlatb6.w) ? _LightShadowData.x : float(1.0);
        u_xlat33 = dot(u_xlat6, vec4(0.25, 0.25, 0.25, 0.25));
    } else {
        u_xlat33 = 1.0;
    //ENDIF
    }
    u_xlat2.x = u_xlat2.x + u_xlat33;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat22 = min(u_xlat2.x, u_xlat22);
    u_xlat2.x = (u_xlatb12) ? u_xlat22 : u_xlat2.x;
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat10_6 = texture(_LightTextureB0, vec2(u_xlat12));
    u_xlat10_4 = texture(_LightTexture0, u_xlat4.xyz);
    u_xlat16_12 = u_xlat10_4.w * u_xlat10_6.w;
    u_xlat2.x = u_xlat2.x * u_xlat16_12;
    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
    u_xlat33 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat4.xyz = vec3(u_xlat33) * vs_TEXCOORD2.xyz;
    u_xlat6.xyz = u_xlat5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = vec3(u_xlat32) * u_xlat6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat32 = (-u_xlat32) * 0.779083729 + 0.779083729;
    u_xlat5.xyz = vec3(u_xlat32) * u_xlat5.xyz;
    u_xlat32 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat3.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat10.x = u_xlat0.x * u_xlat0.x;
    u_xlat10.x = dot(u_xlat10.xx, vec2(u_xlat32));
    u_xlat10.x = u_xlat10.x + -0.5;
    u_xlat20 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat20 * u_xlat20;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat1.x;
    u_xlat20 = u_xlat10.x * u_xlat20 + 1.0;
    u_xlat1.x = -abs(u_xlat30) + 1.0;
    u_xlat11 = u_xlat1.x * u_xlat1.x;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat1.x = u_xlat1.x * u_xlat11;
    u_xlat10.x = u_xlat10.x * u_xlat1.x + 1.0;
    u_xlat10.x = u_xlat10.x * u_xlat20;
    u_xlat20 = u_xlat32 * u_xlat32;
    u_xlat1.x = (-u_xlat32) * u_xlat32 + 1.0;
    u_xlat11 = abs(u_xlat30) * u_xlat1.x + u_xlat20;
    u_xlat1.x = u_xlat3.x * u_xlat1.x + u_xlat20;
    u_xlat30 = abs(u_xlat30) * u_xlat1.x;
    u_xlat30 = u_xlat3.x * u_xlat11 + u_xlat30;
    u_xlat30 = u_xlat30 + 9.99999975e-06;
    u_xlat30 = 0.5 / u_xlat30;
    u_xlat20 = u_xlat20 * u_xlat20;
    u_xlat1.x = u_xlat13 * u_xlat20 + (-u_xlat13);
    u_xlat1.x = u_xlat1.x * u_xlat13 + 1.0;
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat20 = u_xlat20 / u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat30;
    u_xlat20 = u_xlat20 * 3.14159274;
    u_xlat20 = max(u_xlat20, 9.99999975e-05);
    u_xlat10.y = sqrt(u_xlat20);
    u_xlat10.xy = u_xlat3.xx * u_xlat10.xy;
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb30 = u_xlat30!=0.0;
    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
    u_xlat20 = u_xlat30 * u_xlat10.y;
    u_xlat1.xyz = u_xlat10.xxx * u_xlat2.xyz;
    u_xlat10.xyz = u_xlat2.xyz * vec3(u_xlat20);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat10.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_31) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: POINT _TERRAIN_NORMAL_MAP 
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (288 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 144
  Vector4 unity_WorldTransformParams at 128
  Vector4 _Control_ST at 208
  Vector4 _Splat0_ST at 224
  Vector4 _Splat1_ST at 240
  Vector4 _Splat2_ST at 256
  Vector4 _Splat3_ST at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD5.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    u_xlat0.xy = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat0.xy = input.NORMAL0.yz * float2(1.0, 0.0) + (-u_xlat0.xy);
    u_xlat3.xyz = u_xlat0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat1.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat1.xyz = float3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * (-Globals.unity_WorldTransformParams.www);
    output.TEXCOORD2.y = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat0.z;
    output.TEXCOORD2.z = u_xlat1.y;
    output.TEXCOORD3.x = u_xlat0.x;
    output.TEXCOORD4.x = u_xlat0.y;
    output.TEXCOORD3.z = u_xlat1.z;
    output.TEXCOORD4.z = u_xlat1.x;
    output.TEXCOORD3.y = u_xlat2.y;
    output.TEXCOORD4.y = u_xlat2.z;
    output.TEXCOORD6.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    output.TEXCOORD7.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 2
Set 2D Texture "_Splat0" to slot 1 sampler slot 3
Set 2D Texture "_Splat1" to slot 2 sampler slot 4
Set 2D Texture "_Splat2" to slot 3 sampler slot 5
Set 2D Texture "_Splat3" to slot 4 sampler slot 6
Set 2D Texture "_Normal0" to slot 5 sampler slot 7
Set 2D Texture "_Normal1" to slot 6 sampler slot 8
Set 2D Texture "_Normal2" to slot 7 sampler slot 9
Set 2D Texture "_Normal3" to slot 8 sampler slot 10
Set 2D Texture "_LightTexture0" to slot 9 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 10 sampler slot 0

Constant Buffer "Globals" (272 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Float _Metallic0 at 240
  Float _Metallic1 at 244
  Float _Metallic2 at 248
  Float _Metallic3 at 252
  Float _Smoothness0 at 256
  Float _Smoothness1 at 260
  Float _Smoothness2 at 264
  Float _Smoothness3 at 268
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler_Normal0 [[ sampler (7) ]],
    sampler sampler_Normal1 [[ sampler (8) ]],
    sampler sampler_Normal2 [[ sampler (9) ]],
    sampler sampler_Normal3 [[ sampler (10) ]],
    texture2d<float, access::sample > _Control [[ texture (0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture (2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture (3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture (4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture (5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture (6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture (7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture (8) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture (9) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (10) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    half4 u_xlat10_5;
    float4 u_xlat6;
    float3 u_xlat7;
    float u_xlat8;
    float u_xlat9;
    float u_xlat14;
    float2 u_xlat19;
    half2 u_xlat10_19;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat26;
    u_xlat0.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
    u_xlat3 = _Control.sample(sampler_Control, input.TEXCOORD6.xy);
    u_xlat22 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat23 = u_xlat22 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat23);
    u_xlat4 = _Splat0.sample(sampler_Splat0, input.TEXCOORD0.xy);
    u_xlat4 = u_xlat3.xxxx * u_xlat4;
    u_xlat4.w = u_xlat4.w * Globals._Smoothness0;
    u_xlat10_5 = half4(_Splat1.sample(sampler_Splat1, input.TEXCOORD0.zw));
    u_xlat5 = u_xlat3.yyyy * float4(u_xlat10_5);
    u_xlat5.w = u_xlat5.w * Globals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = half4(_Splat2.sample(sampler_Splat2, input.TEXCOORD1.xy));
    u_xlat5 = u_xlat3.zzzz * float4(u_xlat10_5);
    u_xlat5.w = u_xlat5.w * Globals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = half4(_Splat3.sample(sampler_Splat3, input.TEXCOORD1.zw));
    u_xlat5 = u_xlat3.wwww * float4(u_xlat10_5);
    u_xlat5.w = u_xlat5.w * Globals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5.xy = _Normal0.sample(sampler_Normal0, input.TEXCOORD0.xy).yw;
    u_xlat10_19.xy = half2(_Normal1.sample(sampler_Normal1, input.TEXCOORD0.zw).yw);
    u_xlat19.xy = u_xlat3.yy * float2(u_xlat10_19.yx);
    u_xlat5.xy = u_xlat3.xx * u_xlat5.yx + u_xlat19.xy;
    u_xlat10_19.xy = half2(_Normal2.sample(sampler_Normal2, input.TEXCOORD1.xy).yw);
    u_xlat5.xy = u_xlat3.zz * float2(u_xlat10_19.yx) + u_xlat5.xy;
    u_xlat10_19.xy = half2(_Normal3.sample(sampler_Normal3, input.TEXCOORD1.zw).yw);
    u_xlat5.xy = u_xlat3.ww * float2(u_xlat10_19.yx) + u_xlat5.xy;
    u_xlat5.xy = u_xlat5.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
    u_xlat23 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat23 = min(u_xlat23, 1.0);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat5.z = sqrt(u_xlat23);
    u_xlat23 = dot(u_xlat3, float4(Globals._Metallic0, Globals._Metallic1, Globals._Metallic2, Globals._Metallic3));
    u_xlat3.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat3.xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb24 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb24){
        u_xlatb24 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD5.xxx + u_xlat6.xyz;
        u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD5.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb24)) ? u_xlat6.xyz : input.TEXCOORD5.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat24 = u_xlat6.y * 0.25 + 0.75;
        u_xlat26 = Globals.unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat6.x = max(u_xlat24, u_xlat26);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat24 = dot(u_xlat6, Globals.unity_OcclusionMaskSelector);
    u_xlat24 = clamp(u_xlat24, 0.0f, 1.0f);
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xx).w;
    u_xlat3.x = u_xlat24 * u_xlat3.x;
    u_xlat6.x = dot(input.TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat6.y = dot(input.TEXCOORD3.xyz, u_xlat5.xyz);
    u_xlat6.z = dot(input.TEXCOORD4.xyz, u_xlat5.xyz);
    u_xlat3.xyz = u_xlat3.xxx * Globals._LightColor0.xyz;
    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat5.xyz = float3(u_xlat24) * u_xlat6.xyz;
    u_xlat6.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = float3(u_xlat23) * u_xlat6.xyz + float3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = (-u_xlat23) * 0.779083729 + 0.779083729;
    u_xlat4.xyz = float3(u_xlat23) * u_xlat4.xyz;
    u_xlat23 = (-u_xlat4.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat21) + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, float2(u_xlat23));
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat1.x;
    u_xlat14 = u_xlat7.x * u_xlat14 + 1.0;
    u_xlat1.x = -abs(u_xlat21) + 1.0;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat7.x = u_xlat7.x * u_xlat1.x + 1.0;
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat23 * u_xlat23;
    u_xlat1.x = (-u_xlat23) * u_xlat23 + 1.0;
    u_xlat8 = abs(u_xlat21) * u_xlat1.x + u_xlat14;
    u_xlat1.x = u_xlat2.x * u_xlat1.x + u_xlat14;
    u_xlat21 = abs(u_xlat21) * u_xlat1.x;
    u_xlat21 = u_xlat2.x * u_xlat8 + u_xlat21;
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat9 * u_xlat14 + (-u_xlat9);
    u_xlat1.x = u_xlat1.x * u_xlat9 + 1.0;
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat14 = u_xlat14 / u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat2.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat3.xyz;
    u_xlat7.xyz = u_xlat3.xyz * float3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat0.xyz;
    output.SV_Target0.xyz = float3(u_xlat22) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec2 vs_TEXCOORD6;
out vec2 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlat0.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
    u_xlat0.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xy);
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD2.y = u_xlat2.x;
    vs_TEXCOORD2.x = u_xlat0.z;
    vs_TEXCOORD2.z = u_xlat1.y;
    vs_TEXCOORD3.x = u_xlat0.x;
    vs_TEXCOORD4.x = u_xlat0.y;
    vs_TEXCOORD3.z = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat1.x;
    vs_TEXCOORD3.y = u_xlat2.y;
    vs_TEXCOORD4.y = u_xlat2.z;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    vs_TEXCOORD7.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  sampler2D _Normal0;
uniform  sampler2D _Normal1;
uniform  sampler2D _Normal2;
uniform  sampler2D _Normal3;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
in  vec2 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat16_3;
vec4 u_xlat10_3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec3 u_xlat16_5;
vec4 u_xlat10_5;
vec4 u_xlat6;
vec4 u_xlat10_6;
vec3 u_xlat7;
float u_xlat8;
float u_xlat9;
float u_xlat14;
float u_xlat21;
bool u_xlatb21;
float u_xlat22;
float u_xlat16_22;
float u_xlat23;
float u_xlat16_23;
float u_xlat24;
bool u_xlatb24;
float u_xlat26;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;
    u_xlat10_3 = texture(_Control, vs_TEXCOORD6.xy);
    u_xlat16_22 = dot(u_xlat10_3, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_23 = u_xlat16_22 + 0.00100000005;
    u_xlat16_3 = u_xlat10_3 / vec4(u_xlat16_23);
    u_xlat10_4 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat4 = u_xlat16_3.xxxx * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness0;
    u_xlat10_5 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat5 = u_xlat16_3.yyyy * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat5 = u_xlat16_3.zzzz * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat5 = u_xlat16_3.wwww * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = texture(_Normal0, vs_TEXCOORD0.xy);
    u_xlat10_6 = texture(_Normal1, vs_TEXCOORD0.zw);
    u_xlat16_5.xz = u_xlat16_3.yy * u_xlat10_6.wy;
    u_xlat16_5.xy = u_xlat16_3.xx * u_xlat10_5.wy + u_xlat16_5.xz;
    u_xlat10_6 = texture(_Normal2, vs_TEXCOORD1.xy);
    u_xlat16_5.xy = u_xlat16_3.zz * u_xlat10_6.wy + u_xlat16_5.xy;
    u_xlat10_6 = texture(_Normal3, vs_TEXCOORD1.zw);
    u_xlat16_5.xy = u_xlat16_3.ww * u_xlat10_6.wy + u_xlat16_5.xy;
    u_xlat5.xy = u_xlat16_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat23 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat23 = min(u_xlat23, 1.0);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat5.z = sqrt(u_xlat23);
    u_xlat23 = dot(u_xlat16_3, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlat3.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb24 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb24){
        u_xlatb24 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb24)) ? u_xlat6.xyz : vs_TEXCOORD5.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat24 = u_xlat6.y * 0.25 + 0.75;
        u_xlat26 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat6.x = max(u_xlat24, u_xlat26);
        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    //ENDIF
    }
    u_xlat24 = dot(u_xlat6, unity_OcclusionMaskSelector);
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10_6 = texture(_LightTexture0, u_xlat3.xx);
    u_xlat3.x = u_xlat24 * u_xlat10_6.w;
    u_xlat6.x = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat6.y = dot(vs_TEXCOORD3.xyz, u_xlat5.xyz);
    u_xlat6.z = dot(vs_TEXCOORD4.xyz, u_xlat5.xyz);
    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat6.xyz;
    u_xlat6.xyz = u_xlat4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = vec3(u_xlat23) * u_xlat6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = (-u_xlat23) * 0.779083729 + 0.779083729;
    u_xlat4.xyz = vec3(u_xlat23) * u_xlat4.xyz;
    u_xlat23 = (-u_xlat4.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21) + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat9 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, vec2(u_xlat23));
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat1.x;
    u_xlat14 = u_xlat7.x * u_xlat14 + 1.0;
    u_xlat1.x = -abs(u_xlat21) + 1.0;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat7.x = u_xlat7.x * u_xlat1.x + 1.0;
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat23 * u_xlat23;
    u_xlat1.x = (-u_xlat23) * u_xlat23 + 1.0;
    u_xlat8 = abs(u_xlat21) * u_xlat1.x + u_xlat14;
    u_xlat1.x = u_xlat2.x * u_xlat1.x + u_xlat14;
    u_xlat21 = abs(u_xlat21) * u_xlat1.x;
    u_xlat21 = u_xlat2.x * u_xlat8 + u_xlat21;
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat9 * u_xlat14 + (-u_xlat9);
    u_xlat1.x = u_xlat1.x * u_xlat9 + 1.0;
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat14 = u_xlat14 / u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat2.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat3.xyz;
    u_xlat7.xyz = u_xlat3.xyz * vec3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_22) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (288 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 144
  Vector4 unity_WorldTransformParams at 128
  Vector4 _Control_ST at 208
  Vector4 _Splat0_ST at 224
  Vector4 _Splat1_ST at 240
  Vector4 _Splat2_ST at 256
  Vector4 _Splat3_ST at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD5.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    u_xlat0.xy = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat0.xy = input.NORMAL0.yz * float2(1.0, 0.0) + (-u_xlat0.xy);
    u_xlat3.xyz = u_xlat0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat1.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat1.xyz = float3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * (-Globals.unity_WorldTransformParams.www);
    output.TEXCOORD2.y = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat0.z;
    output.TEXCOORD2.z = u_xlat1.y;
    output.TEXCOORD3.x = u_xlat0.x;
    output.TEXCOORD4.x = u_xlat0.y;
    output.TEXCOORD3.z = u_xlat1.z;
    output.TEXCOORD4.z = u_xlat1.x;
    output.TEXCOORD3.y = u_xlat2.y;
    output.TEXCOORD4.y = u_xlat2.z;
    output.TEXCOORD6.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    output.TEXCOORD7.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 1
Set 2D Texture "_Splat0" to slot 1 sampler slot 2
Set 2D Texture "_Splat1" to slot 2 sampler slot 3
Set 2D Texture "_Splat2" to slot 3 sampler slot 4
Set 2D Texture "_Splat3" to slot 4 sampler slot 5
Set 2D Texture "_Normal0" to slot 5 sampler slot 6
Set 2D Texture "_Normal1" to slot 6 sampler slot 7
Set 2D Texture "_Normal2" to slot 7 sampler slot 8
Set 2D Texture "_Normal3" to slot 8 sampler slot 9
Set 3D Texture "unity_ProbeVolumeSH" to slot 9 sampler slot 0

Constant Buffer "Globals" (208 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Float _Metallic0 at 176
  Float _Metallic1 at 180
  Float _Metallic2 at 184
  Float _Metallic3 at 188
  Float _Smoothness0 at 192
  Float _Smoothness1 at 196
  Float _Smoothness2 at 200
  Float _Smoothness3 at 204
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_Control [[ sampler (1) ]],
    sampler sampler_Splat0 [[ sampler (2) ]],
    sampler sampler_Splat1 [[ sampler (3) ]],
    sampler sampler_Splat2 [[ sampler (4) ]],
    sampler sampler_Splat3 [[ sampler (5) ]],
    sampler sampler_Normal0 [[ sampler (6) ]],
    sampler sampler_Normal1 [[ sampler (7) ]],
    sampler sampler_Normal2 [[ sampler (8) ]],
    sampler sampler_Normal3 [[ sampler (9) ]],
    texture2d<float, access::sample > _Control [[ texture (0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture (2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture (3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture (4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture (5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture (6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture (7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture (8) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (9) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    half4 u_xlat10_4;
    float4 u_xlat5;
    float3 u_xlat6;
    float u_xlat7;
    float3 u_xlat8;
    bool u_xlatb8;
    float u_xlat12;
    float u_xlat13;
    float u_xlat14;
    float2 u_xlat16;
    half2 u_xlat10_16;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    float u_xlat21;
    float u_xlat22;
    u_xlat0.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat1.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat2 = _Control.sample(sampler_Control, input.TEXCOORD6.xy);
    u_xlat19 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat19 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3 = _Splat0.sample(sampler_Splat0, input.TEXCOORD0.xy);
    u_xlat3 = u_xlat2.xxxx * u_xlat3;
    u_xlat3.w = u_xlat3.w * Globals._Smoothness0;
    u_xlat10_4 = half4(_Splat1.sample(sampler_Splat1, input.TEXCOORD0.zw));
    u_xlat4 = u_xlat2.yyyy * float4(u_xlat10_4);
    u_xlat4.w = u_xlat4.w * Globals._Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = half4(_Splat2.sample(sampler_Splat2, input.TEXCOORD1.xy));
    u_xlat4 = u_xlat2.zzzz * float4(u_xlat10_4);
    u_xlat4.w = u_xlat4.w * Globals._Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = half4(_Splat3.sample(sampler_Splat3, input.TEXCOORD1.zw));
    u_xlat4 = u_xlat2.wwww * float4(u_xlat10_4);
    u_xlat4.w = u_xlat4.w * Globals._Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat4.xy = _Normal0.sample(sampler_Normal0, input.TEXCOORD0.xy).yw;
    u_xlat10_16.xy = half2(_Normal1.sample(sampler_Normal1, input.TEXCOORD0.zw).yw);
    u_xlat16.xy = u_xlat2.yy * float2(u_xlat10_16.yx);
    u_xlat4.xy = u_xlat2.xx * u_xlat4.yx + u_xlat16.xy;
    u_xlat10_16.xy = half2(_Normal2.sample(sampler_Normal2, input.TEXCOORD1.xy).yw);
    u_xlat4.xy = u_xlat2.zz * float2(u_xlat10_16.yx) + u_xlat4.xy;
    u_xlat10_16.xy = half2(_Normal3.sample(sampler_Normal3, input.TEXCOORD1.zw).yw);
    u_xlat4.xy = u_xlat2.ww * float2(u_xlat10_16.yx) + u_xlat4.xy;
    u_xlat4.xy = u_xlat4.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
    u_xlat22 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat22 = min(u_xlat22, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat4.z = sqrt(u_xlat22);
    u_xlat2.x = dot(u_xlat2, float4(Globals._Metallic0, Globals._Metallic1, Globals._Metallic2, Globals._Metallic3));
    u_xlatb8 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb8){
        u_xlatb8 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD5.xxx + u_xlat5.xyz;
        u_xlat5.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD5.zzz + u_xlat5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat8.xyz = (bool(u_xlatb8)) ? u_xlat5.xyz : input.TEXCOORD5.xyz;
        u_xlat8.xyz = u_xlat8.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat8.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat8.x = u_xlat5.y * 0.25 + 0.75;
        u_xlat14 = Globals.unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat5.x = max(u_xlat14, u_xlat8.x);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat8.x = dot(u_xlat5, Globals.unity_OcclusionMaskSelector);
    u_xlat8.x = clamp(u_xlat8.x, 0.0f, 1.0f);
    u_xlat5.x = dot(input.TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(input.TEXCOORD3.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(input.TEXCOORD4.xyz, u_xlat4.xyz);
    u_xlat8.xyz = u_xlat8.xxx * Globals._LightColor0.xyz;
    u_xlat4.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat4.x = rsqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * u_xlat5.xyz;
    u_xlat5.xyz = u_xlat3.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz + float3(0.220916301, 0.220916301, 0.220916301);
    u_xlat2.x = (-u_xlat2.x) * 0.779083729 + 0.779083729;
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat2.x = (-u_xlat3.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat18) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat0.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat7 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat7 = clamp(u_xlat7, 0.0f, 1.0f);
    u_xlat0.x = dot(Globals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.x = u_xlat0.x * u_xlat0.x;
    u_xlat6.x = dot(u_xlat6.xx, u_xlat2.xx);
    u_xlat6.x = u_xlat6.x + -0.5;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat12 = u_xlat6.x * u_xlat12 + 1.0;
    u_xlat13 = -abs(u_xlat18) + 1.0;
    u_xlat21 = u_xlat13 * u_xlat13;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat13 = u_xlat13 * u_xlat21;
    u_xlat6.x = u_xlat6.x * u_xlat13 + 1.0;
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat12 = u_xlat2.x * u_xlat2.x;
    u_xlat13 = (-u_xlat2.x) * u_xlat2.x + 1.0;
    u_xlat2.x = abs(u_xlat18) * u_xlat13 + u_xlat12;
    u_xlat13 = u_xlat1.x * u_xlat13 + u_xlat12;
    u_xlat18 = abs(u_xlat18) * u_xlat13;
    u_xlat18 = u_xlat1.x * u_xlat2.x + u_xlat18;
    u_xlat18 = u_xlat18 + 9.99999975e-06;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat7 * u_xlat12 + (-u_xlat7);
    u_xlat7 = u_xlat13 * u_xlat7 + 1.0;
    u_xlat12 = u_xlat12 * 0.318309873;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat12 = u_xlat12 / u_xlat7;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat6.y = sqrt(u_xlat12);
    u_xlat6.xy = u_xlat1.xx * u_xlat6.xy;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat6.y;
    u_xlat1.xyz = u_xlat6.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat8.xyz * float3(u_xlat12);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
    output.SV_Target0.xyz = float3(u_xlat19) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec2 vs_TEXCOORD6;
out vec2 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlat0.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
    u_xlat0.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xy);
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD2.y = u_xlat2.x;
    vs_TEXCOORD2.x = u_xlat0.z;
    vs_TEXCOORD2.z = u_xlat1.y;
    vs_TEXCOORD3.x = u_xlat0.x;
    vs_TEXCOORD4.x = u_xlat0.y;
    vs_TEXCOORD3.z = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat1.x;
    vs_TEXCOORD3.y = u_xlat2.y;
    vs_TEXCOORD4.y = u_xlat2.z;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    vs_TEXCOORD7.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  sampler2D _Normal0;
uniform  sampler2D _Normal1;
uniform  sampler2D _Normal2;
uniform  sampler2D _Normal3;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
in  vec2 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec4 u_xlat16_2;
vec4 u_xlat10_2;
vec4 u_xlat3;
float u_xlat16_3;
vec4 u_xlat10_3;
vec4 u_xlat4;
vec3 u_xlat16_4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat10_5;
vec3 u_xlat6;
float u_xlat7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
float u_xlat14;
float u_xlat18;
bool u_xlatb18;
float u_xlat16_19;
float u_xlat21;
float u_xlat22;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat10_2 = texture(_Control, vs_TEXCOORD6.xy);
    u_xlat16_19 = dot(u_xlat10_2, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = u_xlat16_19 + 0.00100000005;
    u_xlat16_2 = u_xlat10_2 / vec4(u_xlat16_3);
    u_xlat10_3 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat3 = u_xlat16_2.xxxx * u_xlat10_3;
    u_xlat3.w = u_xlat3.w * _Smoothness0;
    u_xlat10_4 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat4 = u_xlat16_2.yyyy * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat4 = u_xlat16_2.zzzz * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat4 = u_xlat16_2.wwww * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = texture(_Normal0, vs_TEXCOORD0.xy);
    u_xlat10_5 = texture(_Normal1, vs_TEXCOORD0.zw);
    u_xlat16_4.xz = u_xlat16_2.yy * u_xlat10_5.wy;
    u_xlat16_4.xy = u_xlat16_2.xx * u_xlat10_4.wy + u_xlat16_4.xz;
    u_xlat10_5 = texture(_Normal2, vs_TEXCOORD1.xy);
    u_xlat16_4.xy = u_xlat16_2.zz * u_xlat10_5.wy + u_xlat16_4.xy;
    u_xlat10_5 = texture(_Normal3, vs_TEXCOORD1.zw);
    u_xlat16_4.xy = u_xlat16_2.ww * u_xlat10_5.wy + u_xlat16_4.xy;
    u_xlat4.xy = u_xlat16_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat22 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat22 = min(u_xlat22, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat4.z = sqrt(u_xlat22);
    u_xlat2.x = dot(u_xlat16_2, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlatb8 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb8){
        u_xlatb8 = unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat5.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat8.xyz = (bool(u_xlatb8)) ? u_xlat5.xyz : vs_TEXCOORD5.xyz;
        u_xlat8.xyz = u_xlat8.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat5.yzw = u_xlat8.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat8.x = u_xlat5.y * 0.25 + 0.75;
        u_xlat14 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat5.x = max(u_xlat14, u_xlat8.x);
        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    //ENDIF
    }
    u_xlat8.x = dot(u_xlat5, unity_OcclusionMaskSelector);
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
    u_xlat5.x = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(vs_TEXCOORD4.xyz, u_xlat4.xyz);
    u_xlat8.xyz = u_xlat8.xxx * _LightColor0.xyz;
    u_xlat4.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * u_xlat5.xyz;
    u_xlat5.xyz = u_xlat3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat2.x = (-u_xlat2.x) * 0.779083729 + 0.779083729;
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat2.x = (-u_xlat3.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat7 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat6.x = u_xlat0.x * u_xlat0.x;
    u_xlat6.x = dot(u_xlat6.xx, u_xlat2.xx);
    u_xlat6.x = u_xlat6.x + -0.5;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat12 = u_xlat6.x * u_xlat12 + 1.0;
    u_xlat13 = -abs(u_xlat18) + 1.0;
    u_xlat21 = u_xlat13 * u_xlat13;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat13 = u_xlat13 * u_xlat21;
    u_xlat6.x = u_xlat6.x * u_xlat13 + 1.0;
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat12 = u_xlat2.x * u_xlat2.x;
    u_xlat13 = (-u_xlat2.x) * u_xlat2.x + 1.0;
    u_xlat2.x = abs(u_xlat18) * u_xlat13 + u_xlat12;
    u_xlat13 = u_xlat1.x * u_xlat13 + u_xlat12;
    u_xlat18 = abs(u_xlat18) * u_xlat13;
    u_xlat18 = u_xlat1.x * u_xlat2.x + u_xlat18;
    u_xlat18 = u_xlat18 + 9.99999975e-06;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat7 * u_xlat12 + (-u_xlat7);
    u_xlat7 = u_xlat13 * u_xlat7 + 1.0;
    u_xlat12 = u_xlat12 * 0.318309873;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat12 = u_xlat12 / u_xlat7;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat6.y = sqrt(u_xlat12);
    u_xlat6.xy = u_xlat1.xx * u_xlat6.xy;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat6.y;
    u_xlat1.xyz = u_xlat6.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat8.xyz * vec3(u_xlat12);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_19) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (288 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 144
  Vector4 unity_WorldTransformParams at 128
  Vector4 _Control_ST at 208
  Vector4 _Splat0_ST at 224
  Vector4 _Splat1_ST at 240
  Vector4 _Splat2_ST at 256
  Vector4 _Splat3_ST at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD5.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    u_xlat0.xy = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat0.xy = input.NORMAL0.yz * float2(1.0, 0.0) + (-u_xlat0.xy);
    u_xlat3.xyz = u_xlat0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat1.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat1.xyz = float3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * (-Globals.unity_WorldTransformParams.www);
    output.TEXCOORD2.y = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat0.z;
    output.TEXCOORD2.z = u_xlat1.y;
    output.TEXCOORD3.x = u_xlat0.x;
    output.TEXCOORD4.x = u_xlat0.y;
    output.TEXCOORD3.z = u_xlat1.z;
    output.TEXCOORD4.z = u_xlat1.x;
    output.TEXCOORD3.y = u_xlat2.y;
    output.TEXCOORD4.y = u_xlat2.z;
    output.TEXCOORD6.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    output.TEXCOORD7.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_Normal0" to slot 5 sampler slot 8
Set 2D Texture "_Normal1" to slot 6 sampler slot 9
Set 2D Texture "_Normal2" to slot 7 sampler slot 10
Set 2D Texture "_Normal3" to slot 8 sampler slot 11
Set 2D Texture "_LightTexture0" to slot 9 sampler slot 1
Set 2D Texture "_LightTextureB0" to slot 10 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 0

Constant Buffer "Globals" (272 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Float _Metallic0 at 240
  Float _Metallic1 at 244
  Float _Metallic2 at 248
  Float _Metallic3 at 252
  Float _Smoothness0 at 256
  Float _Smoothness1 at 260
  Float _Smoothness2 at 264
  Float _Smoothness3 at 268
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_LightTextureB0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler_Normal0 [[ sampler (8) ]],
    sampler sampler_Normal1 [[ sampler (9) ]],
    sampler sampler_Normal2 [[ sampler (10) ]],
    sampler sampler_Normal3 [[ sampler (11) ]],
    texture2d<float, access::sample > _Control [[ texture (0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture (2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture (3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture (4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture (5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture (6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture (7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture (8) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture (9) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture (10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (11) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    half4 u_xlat10_5;
    float4 u_xlat6;
    bool u_xlatb6;
    float3 u_xlat7;
    float u_xlat8;
    float u_xlat9;
    float2 u_xlat13;
    float u_xlat14;
    float2 u_xlat19;
    half2 u_xlat10_19;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    float u_xlat26;
    bool u_xlatb26;
    u_xlat0.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
    u_xlat3 = _Control.sample(sampler_Control, input.TEXCOORD6.xy);
    u_xlat22 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat23 = u_xlat22 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat23);
    u_xlat4 = _Splat0.sample(sampler_Splat0, input.TEXCOORD0.xy);
    u_xlat4 = u_xlat3.xxxx * u_xlat4;
    u_xlat4.w = u_xlat4.w * Globals._Smoothness0;
    u_xlat10_5 = half4(_Splat1.sample(sampler_Splat1, input.TEXCOORD0.zw));
    u_xlat5 = u_xlat3.yyyy * float4(u_xlat10_5);
    u_xlat5.w = u_xlat5.w * Globals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = half4(_Splat2.sample(sampler_Splat2, input.TEXCOORD1.xy));
    u_xlat5 = u_xlat3.zzzz * float4(u_xlat10_5);
    u_xlat5.w = u_xlat5.w * Globals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = half4(_Splat3.sample(sampler_Splat3, input.TEXCOORD1.zw));
    u_xlat5 = u_xlat3.wwww * float4(u_xlat10_5);
    u_xlat5.w = u_xlat5.w * Globals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5.xy = _Normal0.sample(sampler_Normal0, input.TEXCOORD0.xy).yw;
    u_xlat10_19.xy = half2(_Normal1.sample(sampler_Normal1, input.TEXCOORD0.zw).yw);
    u_xlat19.xy = u_xlat3.yy * float2(u_xlat10_19.yx);
    u_xlat5.xy = u_xlat3.xx * u_xlat5.yx + u_xlat19.xy;
    u_xlat10_19.xy = half2(_Normal2.sample(sampler_Normal2, input.TEXCOORD1.xy).yw);
    u_xlat5.xy = u_xlat3.zz * float2(u_xlat10_19.yx) + u_xlat5.xy;
    u_xlat10_19.xy = half2(_Normal3.sample(sampler_Normal3, input.TEXCOORD1.zw).yw);
    u_xlat5.xy = u_xlat3.ww * float2(u_xlat10_19.yx) + u_xlat5.xy;
    u_xlat5.xy = u_xlat5.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
    u_xlat23 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat23 = min(u_xlat23, 1.0);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat5.z = sqrt(u_xlat23);
    u_xlat23 = dot(u_xlat3, float4(Globals._Metallic0, Globals._Metallic1, Globals._Metallic2, Globals._Metallic3));
    u_xlat3 = input.TEXCOORD5.yyyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat3 = Globals.hlslcc_mtx4x4unity_WorldToLight[0] * input.TEXCOORD5.xxxx + u_xlat3;
    u_xlat3 = Globals.hlslcc_mtx4x4unity_WorldToLight[2] * input.TEXCOORD5.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + Globals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlatb26 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb26){
        u_xlatb26 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD5.xxx + u_xlat6.xyz;
        u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD5.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb26)) ? u_xlat6.xyz : input.TEXCOORD5.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat26 = u_xlat6.y * 0.25 + 0.75;
        u_xlat13.x = Globals.unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat6.x = max(u_xlat26, u_xlat13.x);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat26 = dot(u_xlat6, Globals.unity_OcclusionMaskSelector);
    u_xlat26 = clamp(u_xlat26, 0.0f, 1.0f);
    u_xlatb6 = 0.0<u_xlat3.z;
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat13.xy = u_xlat3.xy / u_xlat3.ww;
    u_xlat13.xy = u_xlat13.xy + float2(0.5, 0.5);
    u_xlat24 = _LightTexture0.sample(sampler_LightTexture0, u_xlat13.xy).w;
    u_xlat24 = u_xlat24 * u_xlat6.x;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.x = _LightTextureB0.sample(sampler_LightTextureB0, u_xlat3.xx).w;
    u_xlat3.x = u_xlat3.x * u_xlat24;
    u_xlat3.x = u_xlat26 * u_xlat3.x;
    u_xlat6.x = dot(input.TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat6.y = dot(input.TEXCOORD3.xyz, u_xlat5.xyz);
    u_xlat6.z = dot(input.TEXCOORD4.xyz, u_xlat5.xyz);
    u_xlat3.xyz = u_xlat3.xxx * Globals._LightColor0.xyz;
    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat5.xyz = float3(u_xlat24) * u_xlat6.xyz;
    u_xlat6.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = float3(u_xlat23) * u_xlat6.xyz + float3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = (-u_xlat23) * 0.779083729 + 0.779083729;
    u_xlat4.xyz = float3(u_xlat23) * u_xlat4.xyz;
    u_xlat23 = (-u_xlat4.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat21) + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, float2(u_xlat23));
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat1.x;
    u_xlat14 = u_xlat7.x * u_xlat14 + 1.0;
    u_xlat1.x = -abs(u_xlat21) + 1.0;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat7.x = u_xlat7.x * u_xlat1.x + 1.0;
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat23 * u_xlat23;
    u_xlat1.x = (-u_xlat23) * u_xlat23 + 1.0;
    u_xlat8 = abs(u_xlat21) * u_xlat1.x + u_xlat14;
    u_xlat1.x = u_xlat2.x * u_xlat1.x + u_xlat14;
    u_xlat21 = abs(u_xlat21) * u_xlat1.x;
    u_xlat21 = u_xlat2.x * u_xlat8 + u_xlat21;
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat9 * u_xlat14 + (-u_xlat9);
    u_xlat1.x = u_xlat1.x * u_xlat9 + 1.0;
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat14 = u_xlat14 / u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat2.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat3.xyz;
    u_xlat7.xyz = u_xlat3.xyz * float3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat0.xyz;
    output.SV_Target0.xyz = float3(u_xlat22) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec2 vs_TEXCOORD6;
out vec2 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlat0.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
    u_xlat0.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xy);
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD2.y = u_xlat2.x;
    vs_TEXCOORD2.x = u_xlat0.z;
    vs_TEXCOORD2.z = u_xlat1.y;
    vs_TEXCOORD3.x = u_xlat0.x;
    vs_TEXCOORD4.x = u_xlat0.y;
    vs_TEXCOORD3.z = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat1.x;
    vs_TEXCOORD3.y = u_xlat2.y;
    vs_TEXCOORD4.y = u_xlat2.z;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    vs_TEXCOORD7.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  sampler2D _Normal0;
uniform  sampler2D _Normal1;
uniform  sampler2D _Normal2;
uniform  sampler2D _Normal3;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
in  vec2 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat16_3;
vec4 u_xlat10_3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec3 u_xlat16_5;
vec4 u_xlat10_5;
vec4 u_xlat6;
vec4 u_xlat10_6;
bool u_xlatb6;
vec4 u_xlat10_7;
vec3 u_xlat8;
float u_xlat9;
float u_xlat10;
vec2 u_xlat14;
float u_xlat16;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
float u_xlat16_25;
float u_xlat26;
float u_xlat16_26;
float u_xlat27;
float u_xlat29;
bool u_xlatb29;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat10_3 = texture(_Control, vs_TEXCOORD6.xy);
    u_xlat16_25 = dot(u_xlat10_3, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_26 = u_xlat16_25 + 0.00100000005;
    u_xlat16_3 = u_xlat10_3 / vec4(u_xlat16_26);
    u_xlat10_4 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat4 = u_xlat16_3.xxxx * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness0;
    u_xlat10_5 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat5 = u_xlat16_3.yyyy * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat5 = u_xlat16_3.zzzz * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat5 = u_xlat16_3.wwww * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = texture(_Normal0, vs_TEXCOORD0.xy);
    u_xlat10_6 = texture(_Normal1, vs_TEXCOORD0.zw);
    u_xlat16_5.xz = u_xlat16_3.yy * u_xlat10_6.wy;
    u_xlat16_5.xy = u_xlat16_3.xx * u_xlat10_5.wy + u_xlat16_5.xz;
    u_xlat10_6 = texture(_Normal2, vs_TEXCOORD1.xy);
    u_xlat16_5.xy = u_xlat16_3.zz * u_xlat10_6.wy + u_xlat16_5.xy;
    u_xlat10_6 = texture(_Normal3, vs_TEXCOORD1.zw);
    u_xlat16_5.xy = u_xlat16_3.ww * u_xlat10_6.wy + u_xlat16_5.xy;
    u_xlat5.xy = u_xlat16_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat26 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat26 = min(u_xlat26, 1.0);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat5.z = sqrt(u_xlat26);
    u_xlat26 = dot(u_xlat16_3, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlat3 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlatb29 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb29){
        u_xlatb29 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb29)) ? u_xlat6.xyz : vs_TEXCOORD5.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat29 = u_xlat6.y * 0.25 + 0.75;
        u_xlat14.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat6.x = max(u_xlat29, u_xlat14.x);
        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    //ENDIF
    }
    u_xlat29 = dot(u_xlat6, unity_OcclusionMaskSelector);
    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
    u_xlatb6 = 0.0<u_xlat3.z;
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat14.xy = u_xlat3.xy / u_xlat3.ww;
    u_xlat14.xy = u_xlat14.xy + vec2(0.5, 0.5);
    u_xlat10_7 = texture(_LightTexture0, u_xlat14.xy);
    u_xlat27 = u_xlat6.x * u_xlat10_7.w;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10_6 = texture(_LightTextureB0, u_xlat3.xx);
    u_xlat3.x = u_xlat27 * u_xlat10_6.w;
    u_xlat3.x = u_xlat29 * u_xlat3.x;
    u_xlat6.x = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat6.y = dot(vs_TEXCOORD3.xyz, u_xlat5.xyz);
    u_xlat6.z = dot(vs_TEXCOORD4.xyz, u_xlat5.xyz);
    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat6.xyz;
    u_xlat6.xyz = u_xlat4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = vec3(u_xlat26) * u_xlat6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat26 = (-u_xlat26) * 0.779083729 + 0.779083729;
    u_xlat4.xyz = vec3(u_xlat26) * u_xlat4.xyz;
    u_xlat26 = (-u_xlat4.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat2.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat10 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat8.x = u_xlat0.x * u_xlat0.x;
    u_xlat8.x = dot(u_xlat8.xx, vec2(u_xlat26));
    u_xlat8.x = u_xlat8.x + -0.5;
    u_xlat16 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat16 * u_xlat16;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat1.x;
    u_xlat16 = u_xlat8.x * u_xlat16 + 1.0;
    u_xlat1.x = -abs(u_xlat24) + 1.0;
    u_xlat9 = u_xlat1.x * u_xlat1.x;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat8.x = u_xlat8.x * u_xlat1.x + 1.0;
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat26 * u_xlat26;
    u_xlat1.x = (-u_xlat26) * u_xlat26 + 1.0;
    u_xlat9 = abs(u_xlat24) * u_xlat1.x + u_xlat16;
    u_xlat1.x = u_xlat2.x * u_xlat1.x + u_xlat16;
    u_xlat24 = abs(u_xlat24) * u_xlat1.x;
    u_xlat24 = u_xlat2.x * u_xlat9 + u_xlat24;
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat1.x = u_xlat10 * u_xlat16 + (-u_xlat10);
    u_xlat1.x = u_xlat1.x * u_xlat10 + 1.0;
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat16 = u_xlat16 / u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat8.y = sqrt(u_xlat16);
    u_xlat8.xy = u_xlat2.xx * u_xlat8.xy;
    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat8.y;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat8.xyz = u_xlat3.xyz * vec3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_25) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: POINT_COOKIE _TERRAIN_NORMAL_MAP 
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (288 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 144
  Vector4 unity_WorldTransformParams at 128
  Vector4 _Control_ST at 208
  Vector4 _Splat0_ST at 224
  Vector4 _Splat1_ST at 240
  Vector4 _Splat2_ST at 256
  Vector4 _Splat3_ST at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD5.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    u_xlat0.xy = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat0.xy = input.NORMAL0.yz * float2(1.0, 0.0) + (-u_xlat0.xy);
    u_xlat3.xyz = u_xlat0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat1.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat1.xyz = float3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * (-Globals.unity_WorldTransformParams.www);
    output.TEXCOORD2.y = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat0.z;
    output.TEXCOORD2.z = u_xlat1.y;
    output.TEXCOORD3.x = u_xlat0.x;
    output.TEXCOORD4.x = u_xlat0.y;
    output.TEXCOORD3.z = u_xlat1.z;
    output.TEXCOORD4.z = u_xlat1.x;
    output.TEXCOORD3.y = u_xlat2.y;
    output.TEXCOORD4.y = u_xlat2.z;
    output.TEXCOORD6.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    output.TEXCOORD7.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_Normal0" to slot 5 sampler slot 8
Set 2D Texture "_Normal1" to slot 6 sampler slot 9
Set 2D Texture "_Normal2" to slot 7 sampler slot 10
Set 2D Texture "_Normal3" to slot 8 sampler slot 11
Set 2D Texture "_LightTextureB0" to slot 9 sampler slot 2
Set CUBE Texture "_LightTexture0" to slot 10 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 0

Constant Buffer "Globals" (272 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Float _Metallic0 at 240
  Float _Metallic1 at 244
  Float _Metallic2 at 248
  Float _Metallic3 at 252
  Float _Smoothness0 at 256
  Float _Smoothness1 at 260
  Float _Smoothness2 at 264
  Float _Smoothness3 at 268
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_LightTextureB0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler_Normal0 [[ sampler (8) ]],
    sampler sampler_Normal1 [[ sampler (9) ]],
    sampler sampler_Normal2 [[ sampler (10) ]],
    sampler sampler_Normal3 [[ sampler (11) ]],
    texture2d<float, access::sample > _Control [[ texture (0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture (2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture (3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture (4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture (5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture (6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture (7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture (8) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture (9) ]] ,
    texturecube<float, access::sample > _LightTexture0 [[ texture (10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (11) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    half4 u_xlat10_5;
    float4 u_xlat6;
    float3 u_xlat7;
    float u_xlat8;
    float u_xlat9;
    float u_xlat14;
    float2 u_xlat19;
    half2 u_xlat10_19;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat26;
    u_xlat0.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
    u_xlat3 = _Control.sample(sampler_Control, input.TEXCOORD6.xy);
    u_xlat22 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat23 = u_xlat22 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat23);
    u_xlat4 = _Splat0.sample(sampler_Splat0, input.TEXCOORD0.xy);
    u_xlat4 = u_xlat3.xxxx * u_xlat4;
    u_xlat4.w = u_xlat4.w * Globals._Smoothness0;
    u_xlat10_5 = half4(_Splat1.sample(sampler_Splat1, input.TEXCOORD0.zw));
    u_xlat5 = u_xlat3.yyyy * float4(u_xlat10_5);
    u_xlat5.w = u_xlat5.w * Globals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = half4(_Splat2.sample(sampler_Splat2, input.TEXCOORD1.xy));
    u_xlat5 = u_xlat3.zzzz * float4(u_xlat10_5);
    u_xlat5.w = u_xlat5.w * Globals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = half4(_Splat3.sample(sampler_Splat3, input.TEXCOORD1.zw));
    u_xlat5 = u_xlat3.wwww * float4(u_xlat10_5);
    u_xlat5.w = u_xlat5.w * Globals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5.xy = _Normal0.sample(sampler_Normal0, input.TEXCOORD0.xy).yw;
    u_xlat10_19.xy = half2(_Normal1.sample(sampler_Normal1, input.TEXCOORD0.zw).yw);
    u_xlat19.xy = u_xlat3.yy * float2(u_xlat10_19.yx);
    u_xlat5.xy = u_xlat3.xx * u_xlat5.yx + u_xlat19.xy;
    u_xlat10_19.xy = half2(_Normal2.sample(sampler_Normal2, input.TEXCOORD1.xy).yw);
    u_xlat5.xy = u_xlat3.zz * float2(u_xlat10_19.yx) + u_xlat5.xy;
    u_xlat10_19.xy = half2(_Normal3.sample(sampler_Normal3, input.TEXCOORD1.zw).yw);
    u_xlat5.xy = u_xlat3.ww * float2(u_xlat10_19.yx) + u_xlat5.xy;
    u_xlat5.xy = u_xlat5.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
    u_xlat23 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat23 = min(u_xlat23, 1.0);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat5.z = sqrt(u_xlat23);
    u_xlat23 = dot(u_xlat3, float4(Globals._Metallic0, Globals._Metallic1, Globals._Metallic2, Globals._Metallic3));
    u_xlat3.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat3.xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb24 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb24){
        u_xlatb24 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD5.xxx + u_xlat6.xyz;
        u_xlat6.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD5.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb24)) ? u_xlat6.xyz : input.TEXCOORD5.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat24 = u_xlat6.y * 0.25 + 0.75;
        u_xlat26 = Globals.unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat6.x = max(u_xlat24, u_xlat26);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat24 = dot(u_xlat6, Globals.unity_OcclusionMaskSelector);
    u_xlat24 = clamp(u_xlat24, 0.0f, 1.0f);
    u_xlat26 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat26 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat26)).w;
    u_xlat3.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xyz).w;
    u_xlat3.x = u_xlat3.x * u_xlat26;
    u_xlat3.x = u_xlat24 * u_xlat3.x;
    u_xlat6.x = dot(input.TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat6.y = dot(input.TEXCOORD3.xyz, u_xlat5.xyz);
    u_xlat6.z = dot(input.TEXCOORD4.xyz, u_xlat5.xyz);
    u_xlat3.xyz = u_xlat3.xxx * Globals._LightColor0.xyz;
    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat5.xyz = float3(u_xlat24) * u_xlat6.xyz;
    u_xlat6.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = float3(u_xlat23) * u_xlat6.xyz + float3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = (-u_xlat23) * 0.779083729 + 0.779083729;
    u_xlat4.xyz = float3(u_xlat23) * u_xlat4.xyz;
    u_xlat23 = (-u_xlat4.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat21) + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, float2(u_xlat23));
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat1.x;
    u_xlat14 = u_xlat7.x * u_xlat14 + 1.0;
    u_xlat1.x = -abs(u_xlat21) + 1.0;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat7.x = u_xlat7.x * u_xlat1.x + 1.0;
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat23 * u_xlat23;
    u_xlat1.x = (-u_xlat23) * u_xlat23 + 1.0;
    u_xlat8 = abs(u_xlat21) * u_xlat1.x + u_xlat14;
    u_xlat1.x = u_xlat2.x * u_xlat1.x + u_xlat14;
    u_xlat21 = abs(u_xlat21) * u_xlat1.x;
    u_xlat21 = u_xlat2.x * u_xlat8 + u_xlat21;
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat9 * u_xlat14 + (-u_xlat9);
    u_xlat1.x = u_xlat1.x * u_xlat9 + 1.0;
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat14 = u_xlat14 / u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat2.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat3.xyz;
    u_xlat7.xyz = u_xlat3.xyz * float3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat0.xyz;
    output.SV_Target0.xyz = float3(u_xlat22) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec2 vs_TEXCOORD6;
out vec2 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlat0.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
    u_xlat0.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xy);
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD2.y = u_xlat2.x;
    vs_TEXCOORD2.x = u_xlat0.z;
    vs_TEXCOORD2.z = u_xlat1.y;
    vs_TEXCOORD3.x = u_xlat0.x;
    vs_TEXCOORD4.x = u_xlat0.y;
    vs_TEXCOORD3.z = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat1.x;
    vs_TEXCOORD3.y = u_xlat2.y;
    vs_TEXCOORD4.y = u_xlat2.z;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    vs_TEXCOORD7.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  sampler2D _Normal0;
uniform  sampler2D _Normal1;
uniform  sampler2D _Normal2;
uniform  sampler2D _Normal3;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
in  vec2 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat16_3;
vec4 u_xlat10_3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec3 u_xlat16_5;
vec4 u_xlat10_5;
vec4 u_xlat6;
vec4 u_xlat10_6;
vec4 u_xlat10_7;
vec3 u_xlat8;
float u_xlat9;
float u_xlat10;
float u_xlat16;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
float u_xlat16_25;
float u_xlat26;
float u_xlat16_26;
float u_xlat27;
bool u_xlatb27;
float u_xlat29;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat10_3 = texture(_Control, vs_TEXCOORD6.xy);
    u_xlat16_25 = dot(u_xlat10_3, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_26 = u_xlat16_25 + 0.00100000005;
    u_xlat16_3 = u_xlat10_3 / vec4(u_xlat16_26);
    u_xlat10_4 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat4 = u_xlat16_3.xxxx * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness0;
    u_xlat10_5 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat5 = u_xlat16_3.yyyy * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat5 = u_xlat16_3.zzzz * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat5 = u_xlat16_3.wwww * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat10_5 = texture(_Normal0, vs_TEXCOORD0.xy);
    u_xlat10_6 = texture(_Normal1, vs_TEXCOORD0.zw);
    u_xlat16_5.xz = u_xlat16_3.yy * u_xlat10_6.wy;
    u_xlat16_5.xy = u_xlat16_3.xx * u_xlat10_5.wy + u_xlat16_5.xz;
    u_xlat10_6 = texture(_Normal2, vs_TEXCOORD1.xy);
    u_xlat16_5.xy = u_xlat16_3.zz * u_xlat10_6.wy + u_xlat16_5.xy;
    u_xlat10_6 = texture(_Normal3, vs_TEXCOORD1.zw);
    u_xlat16_5.xy = u_xlat16_3.ww * u_xlat10_6.wy + u_xlat16_5.xy;
    u_xlat5.xy = u_xlat16_5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat26 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat26 = min(u_xlat26, 1.0);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat5.z = sqrt(u_xlat26);
    u_xlat26 = dot(u_xlat16_3, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlat3.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb27 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb27){
        u_xlatb27 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb27)) ? u_xlat6.xyz : vs_TEXCOORD5.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat27 = u_xlat6.y * 0.25 + 0.75;
        u_xlat29 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat6.x = max(u_xlat27, u_xlat29);
        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    //ENDIF
    }
    u_xlat27 = dot(u_xlat6, unity_OcclusionMaskSelector);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat29 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10_6 = texture(_LightTextureB0, vec2(u_xlat29));
    u_xlat10_7 = texture(_LightTexture0, u_xlat3.xyz);
    u_xlat16_3.x = u_xlat10_6.w * u_xlat10_7.w;
    u_xlat3.x = u_xlat27 * u_xlat16_3.x;
    u_xlat6.x = dot(vs_TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat6.y = dot(vs_TEXCOORD3.xyz, u_xlat5.xyz);
    u_xlat6.z = dot(vs_TEXCOORD4.xyz, u_xlat5.xyz);
    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat6.xyz;
    u_xlat6.xyz = u_xlat4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = vec3(u_xlat26) * u_xlat6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat26 = (-u_xlat26) * 0.779083729 + 0.779083729;
    u_xlat4.xyz = vec3(u_xlat26) * u_xlat4.xyz;
    u_xlat26 = (-u_xlat4.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat2.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat10 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat8.x = u_xlat0.x * u_xlat0.x;
    u_xlat8.x = dot(u_xlat8.xx, vec2(u_xlat26));
    u_xlat8.x = u_xlat8.x + -0.5;
    u_xlat16 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat16 * u_xlat16;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat1.x;
    u_xlat16 = u_xlat8.x * u_xlat16 + 1.0;
    u_xlat1.x = -abs(u_xlat24) + 1.0;
    u_xlat9 = u_xlat1.x * u_xlat1.x;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat8.x = u_xlat8.x * u_xlat1.x + 1.0;
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat26 * u_xlat26;
    u_xlat1.x = (-u_xlat26) * u_xlat26 + 1.0;
    u_xlat9 = abs(u_xlat24) * u_xlat1.x + u_xlat16;
    u_xlat1.x = u_xlat2.x * u_xlat1.x + u_xlat16;
    u_xlat24 = abs(u_xlat24) * u_xlat1.x;
    u_xlat24 = u_xlat2.x * u_xlat9 + u_xlat24;
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat1.x = u_xlat10 * u_xlat16 + (-u_xlat10);
    u_xlat1.x = u_xlat1.x * u_xlat10 + 1.0;
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat16 = u_xlat16 / u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat8.y = sqrt(u_xlat16);
    u_xlat8.xy = u_xlat2.xx * u_xlat8.xy;
    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat8.y;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat8.xyz = u_xlat3.xyz * vec3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_25) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (288 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 144
  Vector4 unity_WorldTransformParams at 128
  Vector4 _Control_ST at 208
  Vector4 _Splat0_ST at 224
  Vector4 _Splat1_ST at 240
  Vector4 _Splat2_ST at 256
  Vector4 _Splat3_ST at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD5.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    u_xlat0.xy = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat0.xy = input.NORMAL0.yz * float2(1.0, 0.0) + (-u_xlat0.xy);
    u_xlat3.xyz = u_xlat0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat1.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat1.xyz = float3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * (-Globals.unity_WorldTransformParams.www);
    output.TEXCOORD2.y = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat0.z;
    output.TEXCOORD2.z = u_xlat1.y;
    output.TEXCOORD3.x = u_xlat0.x;
    output.TEXCOORD4.x = u_xlat0.y;
    output.TEXCOORD3.z = u_xlat1.z;
    output.TEXCOORD4.z = u_xlat1.x;
    output.TEXCOORD3.y = u_xlat2.y;
    output.TEXCOORD4.y = u_xlat2.z;
    output.TEXCOORD6.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    output.TEXCOORD7.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 2
Set 2D Texture "_Splat0" to slot 1 sampler slot 3
Set 2D Texture "_Splat1" to slot 2 sampler slot 4
Set 2D Texture "_Splat2" to slot 3 sampler slot 5
Set 2D Texture "_Splat3" to slot 4 sampler slot 6
Set 2D Texture "_Normal0" to slot 5 sampler slot 7
Set 2D Texture "_Normal1" to slot 6 sampler slot 8
Set 2D Texture "_Normal2" to slot 7 sampler slot 9
Set 2D Texture "_Normal3" to slot 8 sampler slot 10
Set 2D Texture "_LightTexture0" to slot 9 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 10 sampler slot 0

Constant Buffer "Globals" (272 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Float _Metallic0 at 240
  Float _Metallic1 at 244
  Float _Metallic2 at 248
  Float _Metallic3 at 252
  Float _Smoothness0 at 256
  Float _Smoothness1 at 260
  Float _Smoothness2 at 264
  Float _Smoothness3 at 268
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler_Normal0 [[ sampler (7) ]],
    sampler sampler_Normal1 [[ sampler (8) ]],
    sampler sampler_Normal2 [[ sampler (9) ]],
    sampler sampler_Normal3 [[ sampler (10) ]],
    texture2d<float, access::sample > _Control [[ texture (0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture (2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture (3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture (4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture (5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture (6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture (7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture (8) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture (9) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (10) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    half4 u_xlat10_4;
    float4 u_xlat5;
    float3 u_xlat6;
    float u_xlat7;
    float3 u_xlat8;
    float u_xlat12;
    float u_xlat13;
    float2 u_xlat16;
    half2 u_xlat10_16;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    float u_xlat20;
    bool u_xlatb20;
    float u_xlat21;
    float u_xlat22;
    u_xlat0.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat1.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat2 = _Control.sample(sampler_Control, input.TEXCOORD6.xy);
    u_xlat19 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat19 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3 = _Splat0.sample(sampler_Splat0, input.TEXCOORD0.xy);
    u_xlat3 = u_xlat2.xxxx * u_xlat3;
    u_xlat3.w = u_xlat3.w * Globals._Smoothness0;
    u_xlat10_4 = half4(_Splat1.sample(sampler_Splat1, input.TEXCOORD0.zw));
    u_xlat4 = u_xlat2.yyyy * float4(u_xlat10_4);
    u_xlat4.w = u_xlat4.w * Globals._Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = half4(_Splat2.sample(sampler_Splat2, input.TEXCOORD1.xy));
    u_xlat4 = u_xlat2.zzzz * float4(u_xlat10_4);
    u_xlat4.w = u_xlat4.w * Globals._Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = half4(_Splat3.sample(sampler_Splat3, input.TEXCOORD1.zw));
    u_xlat4 = u_xlat2.wwww * float4(u_xlat10_4);
    u_xlat4.w = u_xlat4.w * Globals._Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat4.xy = _Normal0.sample(sampler_Normal0, input.TEXCOORD0.xy).yw;
    u_xlat10_16.xy = half2(_Normal1.sample(sampler_Normal1, input.TEXCOORD0.zw).yw);
    u_xlat16.xy = u_xlat2.yy * float2(u_xlat10_16.yx);
    u_xlat4.xy = u_xlat2.xx * u_xlat4.yx + u_xlat16.xy;
    u_xlat10_16.xy = half2(_Normal2.sample(sampler_Normal2, input.TEXCOORD1.xy).yw);
    u_xlat4.xy = u_xlat2.zz * float2(u_xlat10_16.yx) + u_xlat4.xy;
    u_xlat10_16.xy = half2(_Normal3.sample(sampler_Normal3, input.TEXCOORD1.zw).yw);
    u_xlat4.xy = u_xlat2.ww * float2(u_xlat10_16.yx) + u_xlat4.xy;
    u_xlat4.xy = u_xlat4.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
    u_xlat22 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat22 = min(u_xlat22, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat4.z = sqrt(u_xlat22);
    u_xlat2.x = dot(u_xlat2, float4(Globals._Metallic0, Globals._Metallic1, Globals._Metallic2, Globals._Metallic3));
    u_xlat8.xy = input.TEXCOORD5.yy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat8.xy = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xy * input.TEXCOORD5.xx + u_xlat8.xy;
    u_xlat8.xy = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xy * input.TEXCOORD5.zz + u_xlat8.xy;
    u_xlat8.xy = u_xlat8.xy + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlatb20 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb20){
        u_xlatb20 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD5.xxx + u_xlat5.xyz;
        u_xlat5.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD5.zzz + u_xlat5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb20)) ? u_xlat5.xyz : input.TEXCOORD5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat20 = u_xlat5.y * 0.25 + 0.75;
        u_xlat22 = Globals.unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat5.x = max(u_xlat20, u_xlat22);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat20 = dot(u_xlat5, Globals.unity_OcclusionMaskSelector);
    u_xlat20 = clamp(u_xlat20, 0.0f, 1.0f);
    u_xlat8.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat8.xy).w;
    u_xlat8.x = u_xlat20 * u_xlat8.x;
    u_xlat5.x = dot(input.TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(input.TEXCOORD3.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(input.TEXCOORD4.xyz, u_xlat4.xyz);
    u_xlat8.xyz = u_xlat8.xxx * Globals._LightColor0.xyz;
    u_xlat4.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat4.x = rsqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * u_xlat5.xyz;
    u_xlat5.xyz = u_xlat3.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz + float3(0.220916301, 0.220916301, 0.220916301);
    u_xlat2.x = (-u_xlat2.x) * 0.779083729 + 0.779083729;
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat2.x = (-u_xlat3.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat18) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat0.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat7 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat7 = clamp(u_xlat7, 0.0f, 1.0f);
    u_xlat0.x = dot(Globals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.x = u_xlat0.x * u_xlat0.x;
    u_xlat6.x = dot(u_xlat6.xx, u_xlat2.xx);
    u_xlat6.x = u_xlat6.x + -0.5;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat12 = u_xlat6.x * u_xlat12 + 1.0;
    u_xlat13 = -abs(u_xlat18) + 1.0;
    u_xlat21 = u_xlat13 * u_xlat13;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat13 = u_xlat13 * u_xlat21;
    u_xlat6.x = u_xlat6.x * u_xlat13 + 1.0;
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat12 = u_xlat2.x * u_xlat2.x;
    u_xlat13 = (-u_xlat2.x) * u_xlat2.x + 1.0;
    u_xlat2.x = abs(u_xlat18) * u_xlat13 + u_xlat12;
    u_xlat13 = u_xlat1.x * u_xlat13 + u_xlat12;
    u_xlat18 = abs(u_xlat18) * u_xlat13;
    u_xlat18 = u_xlat1.x * u_xlat2.x + u_xlat18;
    u_xlat18 = u_xlat18 + 9.99999975e-06;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat7 * u_xlat12 + (-u_xlat7);
    u_xlat7 = u_xlat13 * u_xlat7 + 1.0;
    u_xlat12 = u_xlat12 * 0.318309873;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat12 = u_xlat12 / u_xlat7;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat6.y = sqrt(u_xlat12);
    u_xlat6.xy = u_xlat1.xx * u_xlat6.xy;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat6.y;
    u_xlat1.xyz = u_xlat6.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat8.xyz * float3(u_xlat12);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
    output.SV_Target0.xyz = float3(u_xlat19) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec2 vs_TEXCOORD6;
out vec2 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlat0.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
    u_xlat0.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xy);
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD2.y = u_xlat2.x;
    vs_TEXCOORD2.x = u_xlat0.z;
    vs_TEXCOORD2.z = u_xlat1.y;
    vs_TEXCOORD3.x = u_xlat0.x;
    vs_TEXCOORD4.x = u_xlat0.y;
    vs_TEXCOORD3.z = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat1.x;
    vs_TEXCOORD3.y = u_xlat2.y;
    vs_TEXCOORD4.y = u_xlat2.z;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    vs_TEXCOORD7.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  sampler2D _Normal0;
uniform  sampler2D _Normal1;
uniform  sampler2D _Normal2;
uniform  sampler2D _Normal3;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
in  vec2 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec4 u_xlat16_2;
vec4 u_xlat10_2;
vec4 u_xlat3;
float u_xlat16_3;
vec4 u_xlat10_3;
vec4 u_xlat4;
vec3 u_xlat16_4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat10_5;
vec3 u_xlat6;
float u_xlat7;
vec3 u_xlat8;
float u_xlat12;
float u_xlat13;
float u_xlat18;
bool u_xlatb18;
float u_xlat16_19;
float u_xlat20;
bool u_xlatb20;
float u_xlat21;
float u_xlat22;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat10_2 = texture(_Control, vs_TEXCOORD6.xy);
    u_xlat16_19 = dot(u_xlat10_2, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = u_xlat16_19 + 0.00100000005;
    u_xlat16_2 = u_xlat10_2 / vec4(u_xlat16_3);
    u_xlat10_3 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat3 = u_xlat16_2.xxxx * u_xlat10_3;
    u_xlat3.w = u_xlat3.w * _Smoothness0;
    u_xlat10_4 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat4 = u_xlat16_2.yyyy * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat4 = u_xlat16_2.zzzz * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat4 = u_xlat16_2.wwww * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = texture(_Normal0, vs_TEXCOORD0.xy);
    u_xlat10_5 = texture(_Normal1, vs_TEXCOORD0.zw);
    u_xlat16_4.xz = u_xlat16_2.yy * u_xlat10_5.wy;
    u_xlat16_4.xy = u_xlat16_2.xx * u_xlat10_4.wy + u_xlat16_4.xz;
    u_xlat10_5 = texture(_Normal2, vs_TEXCOORD1.xy);
    u_xlat16_4.xy = u_xlat16_2.zz * u_xlat10_5.wy + u_xlat16_4.xy;
    u_xlat10_5 = texture(_Normal3, vs_TEXCOORD1.zw);
    u_xlat16_4.xy = u_xlat16_2.ww * u_xlat10_5.wy + u_xlat16_4.xy;
    u_xlat4.xy = u_xlat16_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat22 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat22 = min(u_xlat22, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat4.z = sqrt(u_xlat22);
    u_xlat2.x = dot(u_xlat16_2, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlat8.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat8.xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat8.xy;
    u_xlat8.xy = u_xlat8.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlatb20 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb20){
        u_xlatb20 = unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat5.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb20)) ? u_xlat5.xyz : vs_TEXCOORD5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat20 = u_xlat5.y * 0.25 + 0.75;
        u_xlat22 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat5.x = max(u_xlat20, u_xlat22);
        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    //ENDIF
    }
    u_xlat20 = dot(u_xlat5, unity_OcclusionMaskSelector);
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat10_5 = texture(_LightTexture0, u_xlat8.xy);
    u_xlat8.x = u_xlat20 * u_xlat10_5.w;
    u_xlat5.x = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(vs_TEXCOORD4.xyz, u_xlat4.xyz);
    u_xlat8.xyz = u_xlat8.xxx * _LightColor0.xyz;
    u_xlat4.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * u_xlat5.xyz;
    u_xlat5.xyz = u_xlat3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat2.x = (-u_xlat2.x) * 0.779083729 + 0.779083729;
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat2.x = (-u_xlat3.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat7 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat6.x = u_xlat0.x * u_xlat0.x;
    u_xlat6.x = dot(u_xlat6.xx, u_xlat2.xx);
    u_xlat6.x = u_xlat6.x + -0.5;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat12 = u_xlat6.x * u_xlat12 + 1.0;
    u_xlat13 = -abs(u_xlat18) + 1.0;
    u_xlat21 = u_xlat13 * u_xlat13;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat13 = u_xlat13 * u_xlat21;
    u_xlat6.x = u_xlat6.x * u_xlat13 + 1.0;
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat12 = u_xlat2.x * u_xlat2.x;
    u_xlat13 = (-u_xlat2.x) * u_xlat2.x + 1.0;
    u_xlat2.x = abs(u_xlat18) * u_xlat13 + u_xlat12;
    u_xlat13 = u_xlat1.x * u_xlat13 + u_xlat12;
    u_xlat18 = abs(u_xlat18) * u_xlat13;
    u_xlat18 = u_xlat1.x * u_xlat2.x + u_xlat18;
    u_xlat18 = u_xlat18 + 9.99999975e-06;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat7 * u_xlat12 + (-u_xlat7);
    u_xlat7 = u_xlat13 * u_xlat7 + 1.0;
    u_xlat12 = u_xlat12 * 0.318309873;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat12 = u_xlat12 / u_xlat7;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat6.y = sqrt(u_xlat12);
    u_xlat6.xy = u_xlat1.xx * u_xlat6.xy;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat6.y;
    u_xlat1.xyz = u_xlat6.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat8.xyz * vec3(u_xlat12);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_19) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: SPOT SHADOWS_DEPTH _TERRAIN_NORMAL_MAP 
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (288 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 144
  Vector4 unity_WorldTransformParams at 128
  Vector4 _Control_ST at 208
  Vector4 _Splat0_ST at 224
  Vector4 _Splat1_ST at 240
  Vector4 _Splat2_ST at 256
  Vector4 _Splat3_ST at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD5.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    u_xlat0.xy = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat0.xy = input.NORMAL0.yz * float2(1.0, 0.0) + (-u_xlat0.xy);
    u_xlat3.xyz = u_xlat0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat1.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat1.xyz = float3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * (-Globals.unity_WorldTransformParams.www);
    output.TEXCOORD2.y = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat0.z;
    output.TEXCOORD2.z = u_xlat1.y;
    output.TEXCOORD3.x = u_xlat0.x;
    output.TEXCOORD4.x = u_xlat0.y;
    output.TEXCOORD3.z = u_xlat1.z;
    output.TEXCOORD4.z = u_xlat1.x;
    output.TEXCOORD3.y = u_xlat2.y;
    output.TEXCOORD4.y = u_xlat2.z;
    output.TEXCOORD6.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    output.TEXCOORD7.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 4
Set 2D Texture "_Splat0" to slot 1 sampler slot 5
Set 2D Texture "_Splat1" to slot 2 sampler slot 6
Set 2D Texture "_Splat2" to slot 3 sampler slot 7
Set 2D Texture "_Splat3" to slot 4 sampler slot 8
Set 2D Texture "_Normal0" to slot 5 sampler slot 9
Set 2D Texture "_Normal1" to slot 6 sampler slot 10
Set 2D Texture "_Normal2" to slot 7 sampler slot 11
Set 2D Texture "_Normal3" to slot 8 sampler slot 12
Set 2D Texture "_LightTexture0" to slot 9 sampler slot 2
Set 2D Texture "_LightTextureB0" to slot 10 sampler slot 3
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 12 sampler slot 1

Constant Buffer "Globals" (624 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 48
  Matrix4x4 unity_MatrixV at 336
  Matrix4x4 unity_ProbeVolumeWorldToObject at 416
  Matrix4x4 unity_WorldToLight at 528
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 304
  Vector4 unity_ShadowFadeCenterAndType at 320
  Vector4 unity_ProbeVolumeParams at 400
  Vector3 unity_ProbeVolumeSizeInv at 480
  Vector3 unity_ProbeVolumeMin at 496
  Vector4 _LightColor0 at 512
  Float _Metallic0 at 592
  Float _Metallic1 at 596
  Float _Metallic2 at 600
  Float _Metallic3 at 604
  Float _Smoothness0 at 608
  Float _Smoothness1 at 612
  Float _Smoothness2 at 616
  Float _Smoothness3 at 620
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    sampler sampler_Normal0 [[ sampler (9) ]],
    sampler sampler_Normal1 [[ sampler (10) ]],
    sampler sampler_Normal2 [[ sampler (11) ]],
    sampler sampler_Normal3 [[ sampler (12) ]],
    texture2d<float, access::sample > _Control [[ texture (0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture (2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture (3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture (4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture (5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture (6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture (7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture (8) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture (9) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture (10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (11) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (12) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    half4 u_xlat10_6;
    float4 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    bool u_xlatb10;
    float u_xlat11;
    float u_xlat16;
    float u_xlat18;
    bool u_xlatb18;
    float2 u_xlat22;
    half2 u_xlat10_22;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat27;
    float u_xlat30;
    u_xlat0.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat1.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = rsqrt(u_xlat25);
    u_xlat3.xyz = float3(u_xlat25) * u_xlat2.xyz;
    u_xlat4 = _Control.sample(sampler_Control, input.TEXCOORD6.xy);
    u_xlat25 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat26 = u_xlat25 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat26);
    u_xlat5 = _Splat0.sample(sampler_Splat0, input.TEXCOORD0.xy);
    u_xlat5 = u_xlat4.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * Globals._Smoothness0;
    u_xlat10_6 = half4(_Splat1.sample(sampler_Splat1, input.TEXCOORD0.zw));
    u_xlat6 = u_xlat4.yyyy * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = half4(_Splat2.sample(sampler_Splat2, input.TEXCOORD1.xy));
    u_xlat6 = u_xlat4.zzzz * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = half4(_Splat3.sample(sampler_Splat3, input.TEXCOORD1.zw));
    u_xlat6 = u_xlat4.wwww * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6.xy = _Normal0.sample(sampler_Normal0, input.TEXCOORD0.xy).yw;
    u_xlat10_22.xy = half2(_Normal1.sample(sampler_Normal1, input.TEXCOORD0.zw).yw);
    u_xlat22.xy = u_xlat4.yy * float2(u_xlat10_22.yx);
    u_xlat6.xy = u_xlat4.xx * u_xlat6.yx + u_xlat22.xy;
    u_xlat10_22.xy = half2(_Normal2.sample(sampler_Normal2, input.TEXCOORD1.xy).yw);
    u_xlat6.xy = u_xlat4.zz * float2(u_xlat10_22.yx) + u_xlat6.xy;
    u_xlat10_22.xy = half2(_Normal3.sample(sampler_Normal3, input.TEXCOORD1.zw).yw);
    u_xlat6.xy = u_xlat4.ww * float2(u_xlat10_22.yx) + u_xlat6.xy;
    u_xlat6.xy = u_xlat6.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
    u_xlat26 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat26 = min(u_xlat26, 1.0);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat6.z = sqrt(u_xlat26);
    u_xlat26 = dot(u_xlat4, float4(Globals._Metallic0, Globals._Metallic1, Globals._Metallic2, Globals._Metallic3));
    u_xlat4 = input.TEXCOORD5.yyyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat4 = Globals.hlslcc_mtx4x4unity_WorldToLight[0] * input.TEXCOORD5.xxxx + u_xlat4;
    u_xlat4 = Globals.hlslcc_mtx4x4unity_WorldToLight[2] * input.TEXCOORD5.zzzz + u_xlat4;
    u_xlat4 = u_xlat4 + Globals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat7.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat7.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat10 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat10 = sqrt(u_xlat10);
    u_xlat10 = (-u_xlat2.x) + u_xlat10;
    u_xlat2.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat10 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * Globals._LightShadowData.z + Globals._LightShadowData.w;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb10 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb10){
        u_xlatb18 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD5.xxx + u_xlat7.xyz;
        u_xlat7.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD5.zzz + u_xlat7.xyz;
        u_xlat7.xyz = u_xlat7.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb18)) ? u_xlat7.xyz : input.TEXCOORD5.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat7.yzw = u_xlat7.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat18 = u_xlat7.y * 0.25 + 0.75;
        u_xlat27 = Globals.unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat7.x = max(u_xlat18, u_xlat27);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xzw);
    } else {
        u_xlat7.x = float(1.0);
        u_xlat7.y = float(1.0);
        u_xlat7.z = float(1.0);
        u_xlat7.w = float(1.0);
    }
    u_xlat18 = dot(u_xlat7, Globals.unity_OcclusionMaskSelector);
    u_xlat18 = clamp(u_xlat18, 0.0f, 1.0f);
    u_xlat7 = input.TEXCOORD5.yyyy * Globals.hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat7 = Globals.hlslcc_mtx4x4unity_WorldToShadow[0] * input.TEXCOORD5.xxxx + u_xlat7;
    u_xlat7 = Globals.hlslcc_mtx4x4unity_WorldToShadow[2] * input.TEXCOORD5.zzzz + u_xlat7;
    u_xlat7 = u_xlat7 + Globals.hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat7.xyz = u_xlat7.xyz / u_xlat7.www;
    u_xlat27 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat7.xy, saturate(u_xlat7.z), level(0.0));
    u_xlat30 = (-Globals._LightShadowData.x) + 1.0;
    u_xlat27 = u_xlat27 * u_xlat30 + Globals._LightShadowData.x;
    u_xlat2.x = u_xlat2.x + u_xlat27;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat18 = min(u_xlat2.x, u_xlat18);
    u_xlat2.x = (u_xlatb10) ? u_xlat18 : u_xlat2.x;
    u_xlatb10 = 0.0<u_xlat4.z;
    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat7.xy = u_xlat4.xy / u_xlat4.ww;
    u_xlat7.xy = u_xlat7.xy + float2(0.5, 0.5);
    u_xlat18 = _LightTexture0.sample(sampler_LightTexture0, u_xlat7.xy).w;
    u_xlat10 = u_xlat18 * u_xlat10;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat18)).w;
    u_xlat10 = u_xlat18 * u_xlat10;
    u_xlat2.x = u_xlat2.x * u_xlat10;
    u_xlat4.x = dot(input.TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat4.y = dot(input.TEXCOORD3.xyz, u_xlat6.xyz);
    u_xlat4.z = dot(input.TEXCOORD4.xyz, u_xlat6.xyz);
    u_xlat2.xyz = u_xlat2.xxx * Globals._LightColor0.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat4.xyz = float3(u_xlat27) * u_xlat4.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = float3(u_xlat26) * u_xlat6.xyz + float3(0.220916301, 0.220916301, 0.220916301);
    u_xlat26 = (-u_xlat26) * 0.779083729 + 0.779083729;
    u_xlat5.xyz = float3(u_xlat26) * u_xlat5.xyz;
    u_xlat26 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat24) + u_xlat3.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat11 = clamp(u_xlat11, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat8.x = u_xlat0.x * u_xlat0.x;
    u_xlat8.x = dot(u_xlat8.xx, float2(u_xlat26));
    u_xlat8.x = u_xlat8.x + -0.5;
    u_xlat16 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat16 * u_xlat16;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat1.x;
    u_xlat16 = u_xlat8.x * u_xlat16 + 1.0;
    u_xlat1.x = -abs(u_xlat24) + 1.0;
    u_xlat9 = u_xlat1.x * u_xlat1.x;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat8.x = u_xlat8.x * u_xlat1.x + 1.0;
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat26 * u_xlat26;
    u_xlat1.x = (-u_xlat26) * u_xlat26 + 1.0;
    u_xlat9 = abs(u_xlat24) * u_xlat1.x + u_xlat16;
    u_xlat1.x = u_xlat3.x * u_xlat1.x + u_xlat16;
    u_xlat24 = abs(u_xlat24) * u_xlat1.x;
    u_xlat24 = u_xlat3.x * u_xlat9 + u_xlat24;
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat1.x = u_xlat11 * u_xlat16 + (-u_xlat11);
    u_xlat1.x = u_xlat1.x * u_xlat11 + 1.0;
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat16 = u_xlat16 / u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat8.y = sqrt(u_xlat16);
    u_xlat8.xy = u_xlat3.xx * u_xlat8.xy;
    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat8.y;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz;
    u_xlat8.xyz = u_xlat2.xyz * float3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    output.SV_Target0.xyz = float3(u_xlat25) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec2 vs_TEXCOORD6;
out vec2 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlat0.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
    u_xlat0.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xy);
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD2.y = u_xlat2.x;
    vs_TEXCOORD2.x = u_xlat0.z;
    vs_TEXCOORD2.z = u_xlat1.y;
    vs_TEXCOORD3.x = u_xlat0.x;
    vs_TEXCOORD4.x = u_xlat0.y;
    vs_TEXCOORD3.z = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat1.x;
    vs_TEXCOORD3.y = u_xlat2.y;
    vs_TEXCOORD4.y = u_xlat2.z;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    vs_TEXCOORD7.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  sampler2D _Normal0;
uniform  sampler2D _Normal1;
uniform  sampler2D _Normal2;
uniform  sampler2D _Normal3;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler3D unity_ProbeVolumeSH;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
in  vec2 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat16_4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat10_5;
vec4 u_xlat6;
vec3 u_xlat16_6;
vec4 u_xlat10_6;
vec4 u_xlat7;
vec4 u_xlat10_7;
vec3 u_xlat8;
float u_xlat9;
float u_xlat10;
bool u_xlatb10;
float u_xlat11;
float u_xlat16;
float u_xlat18;
bool u_xlatb18;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
float u_xlat16_25;
float u_xlat26;
float u_xlat16_26;
float u_xlat27;
float u_xlat10_27;
float u_xlat30;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat3.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat10_4 = texture(_Control, vs_TEXCOORD6.xy);
    u_xlat16_25 = dot(u_xlat10_4, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_26 = u_xlat16_25 + 0.00100000005;
    u_xlat16_4 = u_xlat10_4 / vec4(u_xlat16_26);
    u_xlat10_5 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat5 = u_xlat16_4.xxxx * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness0;
    u_xlat10_6 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat6 = u_xlat16_4.yyyy * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat6 = u_xlat16_4.zzzz * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat6 = u_xlat16_4.wwww * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = texture(_Normal0, vs_TEXCOORD0.xy);
    u_xlat10_7 = texture(_Normal1, vs_TEXCOORD0.zw);
    u_xlat16_6.xz = u_xlat16_4.yy * u_xlat10_7.wy;
    u_xlat16_6.xy = u_xlat16_4.xx * u_xlat10_6.wy + u_xlat16_6.xz;
    u_xlat10_7 = texture(_Normal2, vs_TEXCOORD1.xy);
    u_xlat16_6.xy = u_xlat16_4.zz * u_xlat10_7.wy + u_xlat16_6.xy;
    u_xlat10_7 = texture(_Normal3, vs_TEXCOORD1.zw);
    u_xlat16_6.xy = u_xlat16_4.ww * u_xlat10_7.wy + u_xlat16_6.xy;
    u_xlat6.xy = u_xlat16_6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat26 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat26 = min(u_xlat26, 1.0);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat6.z = sqrt(u_xlat26);
    u_xlat26 = dot(u_xlat16_4, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlat4 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat4 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat4;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat10 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat10 = sqrt(u_xlat10);
    u_xlat10 = (-u_xlat2.x) + u_xlat10;
    u_xlat2.x = unity_ShadowFadeCenterAndType.w * u_xlat10 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlatb10 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb10){
        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat7.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat7.xyz;
        u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb18)) ? u_xlat7.xyz : vs_TEXCOORD5.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat7.yzw = u_xlat7.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat18 = u_xlat7.y * 0.25 + 0.75;
        u_xlat27 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat7.x = max(u_xlat18, u_xlat27);
        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xzw);
    } else {
        u_xlat7.x = float(1.0);
        u_xlat7.y = float(1.0);
        u_xlat7.z = float(1.0);
        u_xlat7.w = float(1.0);
    //ENDIF
    }
    u_xlat18 = dot(u_xlat7, unity_OcclusionMaskSelector);
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat7 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat7 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat7;
    u_xlat7 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat7;
    u_xlat7 = u_xlat7 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat7.xyz = u_xlat7.xyz / u_xlat7.www;
    vec3 txVec0 = vec3(u_xlat7.xy,u_xlat7.z);
    u_xlat10_27 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat30 = (-_LightShadowData.x) + 1.0;
    u_xlat27 = u_xlat10_27 * u_xlat30 + _LightShadowData.x;
    u_xlat2.x = u_xlat2.x + u_xlat27;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat18 = min(u_xlat2.x, u_xlat18);
    u_xlat2.x = (u_xlatb10) ? u_xlat18 : u_xlat2.x;
    u_xlatb10 = 0.0<u_xlat4.z;
    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat7.xy = u_xlat4.xy / u_xlat4.ww;
    u_xlat7.xy = u_xlat7.xy + vec2(0.5, 0.5);
    u_xlat10_7 = texture(_LightTexture0, u_xlat7.xy);
    u_xlat10 = u_xlat10 * u_xlat10_7.w;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat10_4 = texture(_LightTextureB0, vec2(u_xlat18));
    u_xlat10 = u_xlat10 * u_xlat10_4.w;
    u_xlat2.x = u_xlat2.x * u_xlat10;
    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);
    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat6.xyz);
    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat6.xyz = u_xlat5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = vec3(u_xlat26) * u_xlat6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat26 = (-u_xlat26) * 0.779083729 + 0.779083729;
    u_xlat5.xyz = vec3(u_xlat26) * u_xlat5.xyz;
    u_xlat26 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat3.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat8.x = u_xlat0.x * u_xlat0.x;
    u_xlat8.x = dot(u_xlat8.xx, vec2(u_xlat26));
    u_xlat8.x = u_xlat8.x + -0.5;
    u_xlat16 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat16 * u_xlat16;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat1.x;
    u_xlat16 = u_xlat8.x * u_xlat16 + 1.0;
    u_xlat1.x = -abs(u_xlat24) + 1.0;
    u_xlat9 = u_xlat1.x * u_xlat1.x;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat8.x = u_xlat8.x * u_xlat1.x + 1.0;
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat26 * u_xlat26;
    u_xlat1.x = (-u_xlat26) * u_xlat26 + 1.0;
    u_xlat9 = abs(u_xlat24) * u_xlat1.x + u_xlat16;
    u_xlat1.x = u_xlat3.x * u_xlat1.x + u_xlat16;
    u_xlat24 = abs(u_xlat24) * u_xlat1.x;
    u_xlat24 = u_xlat3.x * u_xlat9 + u_xlat24;
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat1.x = u_xlat11 * u_xlat16 + (-u_xlat11);
    u_xlat1.x = u_xlat1.x * u_xlat11 + 1.0;
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat16 = u_xlat16 / u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat8.y = sqrt(u_xlat16);
    u_xlat8.xy = u_xlat3.xx * u_xlat8.xy;
    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat8.y;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz;
    u_xlat8.xyz = u_xlat2.xyz * vec3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_25) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: SPOT SHADOWS_DEPTH SHADOWS_SOFT _TERRAIN_NORMAL_MAP 
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (288 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 144
  Vector4 unity_WorldTransformParams at 128
  Vector4 _Control_ST at 208
  Vector4 _Splat0_ST at 224
  Vector4 _Splat1_ST at 240
  Vector4 _Splat2_ST at 256
  Vector4 _Splat3_ST at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD5.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    u_xlat0.xy = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat0.xy = input.NORMAL0.yz * float2(1.0, 0.0) + (-u_xlat0.xy);
    u_xlat3.xyz = u_xlat0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat1.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat1.xyz = float3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * (-Globals.unity_WorldTransformParams.www);
    output.TEXCOORD2.y = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat0.z;
    output.TEXCOORD2.z = u_xlat1.y;
    output.TEXCOORD3.x = u_xlat0.x;
    output.TEXCOORD4.x = u_xlat0.y;
    output.TEXCOORD3.z = u_xlat1.z;
    output.TEXCOORD4.z = u_xlat1.x;
    output.TEXCOORD3.y = u_xlat2.y;
    output.TEXCOORD4.y = u_xlat2.z;
    output.TEXCOORD6.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    output.TEXCOORD7.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 4
Set 2D Texture "_Splat0" to slot 1 sampler slot 5
Set 2D Texture "_Splat1" to slot 2 sampler slot 6
Set 2D Texture "_Splat2" to slot 3 sampler slot 7
Set 2D Texture "_Splat3" to slot 4 sampler slot 8
Set 2D Texture "_Normal0" to slot 5 sampler slot 9
Set 2D Texture "_Normal1" to slot 6 sampler slot 10
Set 2D Texture "_Normal2" to slot 7 sampler slot 11
Set 2D Texture "_Normal3" to slot 8 sampler slot 12
Set 2D Texture "_LightTexture0" to slot 9 sampler slot 2
Set 2D Texture "_LightTextureB0" to slot 10 sampler slot 3
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 12 sampler slot 1

Constant Buffer "Globals" (640 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 48
  Matrix4x4 unity_MatrixV at 336
  Matrix4x4 unity_ProbeVolumeWorldToObject at 416
  Matrix4x4 unity_WorldToLight at 544
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 304
  Vector4 unity_ShadowFadeCenterAndType at 320
  Vector4 unity_ProbeVolumeParams at 400
  Vector3 unity_ProbeVolumeSizeInv at 480
  Vector3 unity_ProbeVolumeMin at 496
  Vector4 _LightColor0 at 512
  Vector4 _ShadowMapTexture_TexelSize at 528
  Float _Metallic0 at 608
  Float _Metallic1 at 612
  Float _Metallic2 at 616
  Float _Metallic3 at 620
  Float _Smoothness0 at 624
  Float _Smoothness1 at 628
  Float _Smoothness2 at 632
  Float _Smoothness3 at 636
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _ShadowMapTexture_TexelSize;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::greater_equal);
fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    sampler sampler_Normal0 [[ sampler (9) ]],
    sampler sampler_Normal1 [[ sampler (10) ]],
    sampler sampler_Normal2 [[ sampler (11) ]],
    sampler sampler_Normal3 [[ sampler (12) ]],
    texture2d<float, access::sample > _Control [[ texture (0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture (2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture (3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture (4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture (5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture (6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture (7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture (8) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture (9) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture (10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (11) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture (12) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    half4 u_xlat10_6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float4 u_xlat12;
    float3 u_xlat13;
    float u_xlat14;
    float u_xlat15;
    bool u_xlatb15;
    float u_xlat16;
    float u_xlat26;
    float u_xlat28;
    bool u_xlatb28;
    float2 u_xlat32;
    half2 u_xlat10_32;
    float2 u_xlat34;
    float u_xlat39;
    bool u_xlatb39;
    float u_xlat40;
    float u_xlat41;
    float u_xlat42;
    bool u_xlatb42;
    float u_xlat45;
    u_xlat0.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat40 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat40 = rsqrt(u_xlat40);
    u_xlat3.xyz = float3(u_xlat40) * u_xlat2.xyz;
    u_xlat4 = _Control.sample(sampler_Control, input.TEXCOORD6.xy);
    u_xlat40 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat41 = u_xlat40 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat41);
    u_xlat5 = _Splat0.sample(sampler_Splat0, input.TEXCOORD0.xy);
    u_xlat5 = u_xlat4.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * Globals._Smoothness0;
    u_xlat10_6 = half4(_Splat1.sample(sampler_Splat1, input.TEXCOORD0.zw));
    u_xlat6 = u_xlat4.yyyy * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = half4(_Splat2.sample(sampler_Splat2, input.TEXCOORD1.xy));
    u_xlat6 = u_xlat4.zzzz * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = half4(_Splat3.sample(sampler_Splat3, input.TEXCOORD1.zw));
    u_xlat6 = u_xlat4.wwww * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6.xy = _Normal0.sample(sampler_Normal0, input.TEXCOORD0.xy).yw;
    u_xlat10_32.xy = half2(_Normal1.sample(sampler_Normal1, input.TEXCOORD0.zw).yw);
    u_xlat32.xy = u_xlat4.yy * float2(u_xlat10_32.yx);
    u_xlat6.xy = u_xlat4.xx * u_xlat6.yx + u_xlat32.xy;
    u_xlat10_32.xy = half2(_Normal2.sample(sampler_Normal2, input.TEXCOORD1.xy).yw);
    u_xlat6.xy = u_xlat4.zz * float2(u_xlat10_32.yx) + u_xlat6.xy;
    u_xlat10_32.xy = half2(_Normal3.sample(sampler_Normal3, input.TEXCOORD1.zw).yw);
    u_xlat6.xy = u_xlat4.ww * float2(u_xlat10_32.yx) + u_xlat6.xy;
    u_xlat6.xy = u_xlat6.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
    u_xlat41 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat6.z = sqrt(u_xlat41);
    u_xlat41 = dot(u_xlat4, float4(Globals._Metallic0, Globals._Metallic1, Globals._Metallic2, Globals._Metallic3));
    u_xlat4 = input.TEXCOORD5.yyyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat4 = Globals.hlslcc_mtx4x4unity_WorldToLight[0] * input.TEXCOORD5.xxxx + u_xlat4;
    u_xlat4 = Globals.hlslcc_mtx4x4unity_WorldToLight[2] * input.TEXCOORD5.zzzz + u_xlat4;
    u_xlat4 = u_xlat4 + Globals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat7.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat7.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat15 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = (-u_xlat2.x) + u_xlat15;
    u_xlat2.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat15 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * Globals._LightShadowData.z + Globals._LightShadowData.w;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb15 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb15){
        u_xlatb28 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD5.xxx + u_xlat7.xyz;
        u_xlat7.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD5.zzz + u_xlat7.xyz;
        u_xlat7.xyz = u_xlat7.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb28)) ? u_xlat7.xyz : input.TEXCOORD5.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat7.yzw = u_xlat7.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat28 = u_xlat7.y * 0.25 + 0.75;
        u_xlat42 = Globals.unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat7.x = max(u_xlat28, u_xlat42);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xzw);
    } else {
        u_xlat7.x = float(1.0);
        u_xlat7.y = float(1.0);
        u_xlat7.z = float(1.0);
        u_xlat7.w = float(1.0);
    }
    u_xlat28 = dot(u_xlat7, Globals.unity_OcclusionMaskSelector);
    u_xlat28 = clamp(u_xlat28, 0.0f, 1.0f);
    u_xlatb42 = u_xlat2.x<0.99000001;
    if(u_xlatb42){
        u_xlat7 = input.TEXCOORD5.yyyy * Globals.hlslcc_mtx4x4unity_WorldToShadow[1];
        u_xlat7 = Globals.hlslcc_mtx4x4unity_WorldToShadow[0] * input.TEXCOORD5.xxxx + u_xlat7;
        u_xlat7 = Globals.hlslcc_mtx4x4unity_WorldToShadow[2] * input.TEXCOORD5.zzzz + u_xlat7;
        u_xlat7 = u_xlat7 + Globals.hlslcc_mtx4x4unity_WorldToShadow[3];
        u_xlat7.xyz = u_xlat7.xyz / u_xlat7.www;
        u_xlat8.xy = u_xlat7.xy * Globals._ShadowMapTexture_TexelSize.zw + float2(0.5, 0.5);
        u_xlat8.xy = floor(u_xlat8.xy);
        u_xlat7.xy = u_xlat7.xy * Globals._ShadowMapTexture_TexelSize.zw + (-u_xlat8.xy);
        u_xlat9 = u_xlat7.xxyy + float4(0.5, 1.0, 0.5, 1.0);
        u_xlat10.xw = u_xlat9.xz * u_xlat9.xz;
        u_xlat34.xy = u_xlat10.xw * float2(0.5, 0.5) + (-u_xlat7.xy);
        u_xlat9.xz = (-u_xlat7.xy) + float2(1.0, 1.0);
        u_xlat11.xy = min(u_xlat7.xy, float2(0.0, 0.0));
        u_xlat9.xz = (-u_xlat11.xy) * u_xlat11.xy + u_xlat9.xz;
        u_xlat7.xy = max(u_xlat7.xy, float2(0.0, 0.0));
        u_xlat7.xy = (-u_xlat7.xy) * u_xlat7.xy + u_xlat9.yw;
        u_xlat11.x = u_xlat34.x;
        u_xlat11.y = u_xlat9.x;
        u_xlat11.z = u_xlat7.x;
        u_xlat11.w = u_xlat10.x;
        u_xlat11 = u_xlat11 * float4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat10.x = u_xlat34.y;
        u_xlat10.y = u_xlat9.z;
        u_xlat10.z = u_xlat7.y;
        u_xlat9 = u_xlat10 * float4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat10 = u_xlat11.ywyw + u_xlat11.xzxz;
        u_xlat12 = u_xlat9.yyww + u_xlat9.xxzz;
        u_xlat7.xy = u_xlat11.yw / u_xlat10.zw;
        u_xlat7.xy = u_xlat7.xy + float2(-1.5, 0.5);
        u_xlat34.xy = u_xlat9.yw / u_xlat12.yw;
        u_xlat34.xy = u_xlat34.xy + float2(-1.5, 0.5);
        u_xlat9.xy = u_xlat7.xy * Globals._ShadowMapTexture_TexelSize.xx;
        u_xlat9.zw = u_xlat34.xy * Globals._ShadowMapTexture_TexelSize.yy;
        u_xlat10 = u_xlat10 * u_xlat12;
        u_xlat11 = u_xlat8.xyxy * Globals._ShadowMapTexture_TexelSize.xyxy + u_xlat9.xzyz;
        u_xlat42 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat11.xy, saturate(u_xlat7.z), level(0.0));
        u_xlat45 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat11.zw, saturate(u_xlat7.z), level(0.0));
        u_xlat45 = u_xlat45 * u_xlat10.y;
        u_xlat42 = u_xlat10.x * u_xlat42 + u_xlat45;
        u_xlat8 = u_xlat8.xyxy * Globals._ShadowMapTexture_TexelSize.xyxy + u_xlat9.xwyw;
        u_xlat45 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat8.xy, saturate(u_xlat7.z), level(0.0));
        u_xlat42 = u_xlat10.z * u_xlat45 + u_xlat42;
        u_xlat45 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, u_xlat8.zw, saturate(u_xlat7.z), level(0.0));
        u_xlat42 = u_xlat10.w * u_xlat45 + u_xlat42;
        u_xlat45 = (-Globals._LightShadowData.x) + 1.0;
        u_xlat42 = u_xlat42 * u_xlat45 + Globals._LightShadowData.x;
    } else {
        u_xlat42 = 1.0;
    }
    u_xlat2.x = u_xlat2.x + u_xlat42;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat28 = min(u_xlat2.x, u_xlat28);
    u_xlat2.x = (u_xlatb15) ? u_xlat28 : u_xlat2.x;
    u_xlatb15 = 0.0<u_xlat4.z;
    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
    u_xlat7.xy = u_xlat4.xy / u_xlat4.ww;
    u_xlat7.xy = u_xlat7.xy + float2(0.5, 0.5);
    u_xlat28 = _LightTexture0.sample(sampler_LightTexture0, u_xlat7.xy).w;
    u_xlat15 = u_xlat28 * u_xlat15;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat28)).w;
    u_xlat15 = u_xlat28 * u_xlat15;
    u_xlat2.x = u_xlat2.x * u_xlat15;
    u_xlat4.x = dot(input.TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat4.y = dot(input.TEXCOORD3.xyz, u_xlat6.xyz);
    u_xlat4.z = dot(input.TEXCOORD4.xyz, u_xlat6.xyz);
    u_xlat2.xyz = u_xlat2.xxx * Globals._LightColor0.xyz;
    u_xlat42 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat4.xyz = float3(u_xlat42) * u_xlat4.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = float3(u_xlat41) * u_xlat6.xyz + float3(0.220916301, 0.220916301, 0.220916301);
    u_xlat41 = (-u_xlat41) * 0.779083729 + 0.779083729;
    u_xlat5.xyz = float3(u_xlat41) * u_xlat5.xyz;
    u_xlat41 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat39) + u_xlat3.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat0.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat16 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat16 = clamp(u_xlat16, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, float2(u_xlat41));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat26 * u_xlat26;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat26 = u_xlat26 * u_xlat1.x;
    u_xlat26 = u_xlat13.x * u_xlat26 + 1.0;
    u_xlat1.x = -abs(u_xlat39) + 1.0;
    u_xlat14 = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat14;
    u_xlat13.x = u_xlat13.x * u_xlat1.x + 1.0;
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat41 * u_xlat41;
    u_xlat1.x = (-u_xlat41) * u_xlat41 + 1.0;
    u_xlat14 = abs(u_xlat39) * u_xlat1.x + u_xlat26;
    u_xlat1.x = u_xlat3.x * u_xlat1.x + u_xlat26;
    u_xlat39 = abs(u_xlat39) * u_xlat1.x;
    u_xlat39 = u_xlat3.x * u_xlat14 + u_xlat39;
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat26 = u_xlat26 * u_xlat26;
    u_xlat1.x = u_xlat16 * u_xlat26 + (-u_xlat16);
    u_xlat1.x = u_xlat1.x * u_xlat16 + 1.0;
    u_xlat26 = u_xlat26 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat26 = u_xlat26 / u_xlat1.x;
    u_xlat26 = u_xlat26 * u_xlat39;
    u_xlat26 = u_xlat26 * 3.14159274;
    u_xlat26 = max(u_xlat26, 9.99999975e-05);
    u_xlat13.y = sqrt(u_xlat26);
    u_xlat13.xy = u_xlat3.xx * u_xlat13.xy;
    u_xlat39 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb39 = u_xlat39!=0.0;
    u_xlat39 = u_xlatb39 ? 1.0 : float(0.0);
    u_xlat26 = u_xlat39 * u_xlat13.y;
    u_xlat1.xyz = u_xlat13.xxx * u_xlat2.xyz;
    u_xlat13.xyz = u_xlat2.xyz * float3(u_xlat26);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    output.SV_Target0.xyz = float3(u_xlat40) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec2 vs_TEXCOORD6;
out vec2 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlat0.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
    u_xlat0.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xy);
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD2.y = u_xlat2.x;
    vs_TEXCOORD2.x = u_xlat0.z;
    vs_TEXCOORD2.z = u_xlat1.y;
    vs_TEXCOORD3.x = u_xlat0.x;
    vs_TEXCOORD4.x = u_xlat0.y;
    vs_TEXCOORD3.z = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat1.x;
    vs_TEXCOORD3.y = u_xlat2.y;
    vs_TEXCOORD4.y = u_xlat2.z;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    vs_TEXCOORD7.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  sampler2D _Normal0;
uniform  sampler2D _Normal1;
uniform  sampler2D _Normal2;
uniform  sampler2D _Normal3;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler3D unity_ProbeVolumeSH;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
in  vec2 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat16_4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat10_5;
vec4 u_xlat6;
vec3 u_xlat16_6;
vec4 u_xlat10_6;
vec4 u_xlat7;
vec4 u_xlat10_7;
vec4 u_xlat8;
vec4 u_xlat9;
vec4 u_xlat10;
vec4 u_xlat11;
vec4 u_xlat12;
vec3 u_xlat13;
float u_xlat14;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
float u_xlat26;
float u_xlat28;
bool u_xlatb28;
vec2 u_xlat34;
float u_xlat39;
bool u_xlatb39;
float u_xlat40;
float u_xlat16_40;
float u_xlat41;
float u_xlat16_41;
float u_xlat42;
float u_xlat10_42;
bool u_xlatb42;
float u_xlat45;
float u_xlat10_45;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat1.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat40 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat3.xyz = vec3(u_xlat40) * u_xlat2.xyz;
    u_xlat10_4 = texture(_Control, vs_TEXCOORD6.xy);
    u_xlat16_40 = dot(u_xlat10_4, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_41 = u_xlat16_40 + 0.00100000005;
    u_xlat16_4 = u_xlat10_4 / vec4(u_xlat16_41);
    u_xlat10_5 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat5 = u_xlat16_4.xxxx * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness0;
    u_xlat10_6 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat6 = u_xlat16_4.yyyy * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat6 = u_xlat16_4.zzzz * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat6 = u_xlat16_4.wwww * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = texture(_Normal0, vs_TEXCOORD0.xy);
    u_xlat10_7 = texture(_Normal1, vs_TEXCOORD0.zw);
    u_xlat16_6.xz = u_xlat16_4.yy * u_xlat10_7.wy;
    u_xlat16_6.xy = u_xlat16_4.xx * u_xlat10_6.wy + u_xlat16_6.xz;
    u_xlat10_7 = texture(_Normal2, vs_TEXCOORD1.xy);
    u_xlat16_6.xy = u_xlat16_4.zz * u_xlat10_7.wy + u_xlat16_6.xy;
    u_xlat10_7 = texture(_Normal3, vs_TEXCOORD1.zw);
    u_xlat16_6.xy = u_xlat16_4.ww * u_xlat10_7.wy + u_xlat16_6.xy;
    u_xlat6.xy = u_xlat16_6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat41 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat6.z = sqrt(u_xlat41);
    u_xlat41 = dot(u_xlat16_4, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlat4 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat4 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat4;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat15 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = (-u_xlat2.x) + u_xlat15;
    u_xlat2.x = unity_ShadowFadeCenterAndType.w * u_xlat15 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb15){
        u_xlatb28 = unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat7.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat7.xyz;
        u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb28)) ? u_xlat7.xyz : vs_TEXCOORD5.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat7.yzw = u_xlat7.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat28 = u_xlat7.y * 0.25 + 0.75;
        u_xlat42 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat7.x = max(u_xlat28, u_xlat42);
        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xzw);
    } else {
        u_xlat7.x = float(1.0);
        u_xlat7.y = float(1.0);
        u_xlat7.z = float(1.0);
        u_xlat7.w = float(1.0);
    //ENDIF
    }
    u_xlat28 = dot(u_xlat7, unity_OcclusionMaskSelector);
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
    u_xlatb42 = u_xlat2.x<0.99000001;
    if(u_xlatb42){
        u_xlat7 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
        u_xlat7 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat7;
        u_xlat7 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat7;
        u_xlat7 = u_xlat7 + hlslcc_mtx4x4unity_WorldToShadow[3];
        u_xlat7.xyz = u_xlat7.xyz / u_xlat7.www;
        u_xlat8.xy = u_xlat7.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
        u_xlat8.xy = floor(u_xlat8.xy);
        u_xlat7.xy = u_xlat7.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat8.xy);
        u_xlat9 = u_xlat7.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
        u_xlat10.xw = u_xlat9.xz * u_xlat9.xz;
        u_xlat34.xy = u_xlat10.xw * vec2(0.5, 0.5) + (-u_xlat7.xy);
        u_xlat9.xz = (-u_xlat7.xy) + vec2(1.0, 1.0);
        u_xlat11.xy = min(u_xlat7.xy, vec2(0.0, 0.0));
        u_xlat9.xz = (-u_xlat11.xy) * u_xlat11.xy + u_xlat9.xz;
        u_xlat7.xy = max(u_xlat7.xy, vec2(0.0, 0.0));
        u_xlat7.xy = (-u_xlat7.xy) * u_xlat7.xy + u_xlat9.yw;
        u_xlat11.x = u_xlat34.x;
        u_xlat11.y = u_xlat9.x;
        u_xlat11.z = u_xlat7.x;
        u_xlat11.w = u_xlat10.x;
        u_xlat11 = u_xlat11 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat10.x = u_xlat34.y;
        u_xlat10.y = u_xlat9.z;
        u_xlat10.z = u_xlat7.y;
        u_xlat9 = u_xlat10 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat10 = u_xlat11.ywyw + u_xlat11.xzxz;
        u_xlat12 = u_xlat9.yyww + u_xlat9.xxzz;
        u_xlat7.xy = u_xlat11.yw / u_xlat10.zw;
        u_xlat7.xy = u_xlat7.xy + vec2(-1.5, 0.5);
        u_xlat34.xy = u_xlat9.yw / u_xlat12.yw;
        u_xlat34.xy = u_xlat34.xy + vec2(-1.5, 0.5);
        u_xlat9.xy = u_xlat7.xy * _ShadowMapTexture_TexelSize.xx;
        u_xlat9.zw = u_xlat34.xy * _ShadowMapTexture_TexelSize.yy;
        u_xlat10 = u_xlat10 * u_xlat12;
        u_xlat11 = u_xlat8.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat9.xzyz;
        vec3 txVec0 = vec3(u_xlat11.xy,u_xlat7.z);
        u_xlat10_42 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
        vec3 txVec1 = vec3(u_xlat11.zw,u_xlat7.z);
        u_xlat10_45 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
        u_xlat45 = u_xlat10_45 * u_xlat10.y;
        u_xlat42 = u_xlat10.x * u_xlat10_42 + u_xlat45;
        u_xlat8 = u_xlat8.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat9.xwyw;
        vec3 txVec2 = vec3(u_xlat8.xy,u_xlat7.z);
        u_xlat10_45 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
        u_xlat42 = u_xlat10.z * u_xlat10_45 + u_xlat42;
        vec3 txVec3 = vec3(u_xlat8.zw,u_xlat7.z);
        u_xlat10_45 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
        u_xlat42 = u_xlat10.w * u_xlat10_45 + u_xlat42;
        u_xlat45 = (-_LightShadowData.x) + 1.0;
        u_xlat42 = u_xlat42 * u_xlat45 + _LightShadowData.x;
    } else {
        u_xlat42 = 1.0;
    //ENDIF
    }
    u_xlat2.x = u_xlat2.x + u_xlat42;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat28 = min(u_xlat2.x, u_xlat28);
    u_xlat2.x = (u_xlatb15) ? u_xlat28 : u_xlat2.x;
    u_xlatb15 = 0.0<u_xlat4.z;
    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
    u_xlat7.xy = u_xlat4.xy / u_xlat4.ww;
    u_xlat7.xy = u_xlat7.xy + vec2(0.5, 0.5);
    u_xlat10_7 = texture(_LightTexture0, u_xlat7.xy);
    u_xlat15 = u_xlat15 * u_xlat10_7.w;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat10_4 = texture(_LightTextureB0, vec2(u_xlat28));
    u_xlat15 = u_xlat15 * u_xlat10_4.w;
    u_xlat2.x = u_xlat2.x * u_xlat15;
    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);
    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat6.xyz);
    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
    u_xlat42 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat4.xyz = vec3(u_xlat42) * u_xlat4.xyz;
    u_xlat6.xyz = u_xlat5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = vec3(u_xlat41) * u_xlat6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat41 = (-u_xlat41) * 0.779083729 + 0.779083729;
    u_xlat5.xyz = vec3(u_xlat41) * u_xlat5.xyz;
    u_xlat41 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + u_xlat3.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat16 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, vec2(u_xlat41));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat26 * u_xlat26;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat26 = u_xlat26 * u_xlat1.x;
    u_xlat26 = u_xlat13.x * u_xlat26 + 1.0;
    u_xlat1.x = -abs(u_xlat39) + 1.0;
    u_xlat14 = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat14;
    u_xlat13.x = u_xlat13.x * u_xlat1.x + 1.0;
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat41 * u_xlat41;
    u_xlat1.x = (-u_xlat41) * u_xlat41 + 1.0;
    u_xlat14 = abs(u_xlat39) * u_xlat1.x + u_xlat26;
    u_xlat1.x = u_xlat3.x * u_xlat1.x + u_xlat26;
    u_xlat39 = abs(u_xlat39) * u_xlat1.x;
    u_xlat39 = u_xlat3.x * u_xlat14 + u_xlat39;
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat26 = u_xlat26 * u_xlat26;
    u_xlat1.x = u_xlat16 * u_xlat26 + (-u_xlat16);
    u_xlat1.x = u_xlat1.x * u_xlat16 + 1.0;
    u_xlat26 = u_xlat26 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat26 = u_xlat26 / u_xlat1.x;
    u_xlat26 = u_xlat26 * u_xlat39;
    u_xlat26 = u_xlat26 * 3.14159274;
    u_xlat26 = max(u_xlat26, 9.99999975e-05);
    u_xlat13.y = sqrt(u_xlat26);
    u_xlat13.xy = u_xlat3.xx * u_xlat13.xy;
    u_xlat39 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb39 = u_xlat39!=0.0;
    u_xlat39 = u_xlatb39 ? 1.0 : float(0.0);
    u_xlat26 = u_xlat39 * u_xlat13.y;
    u_xlat1.xyz = u_xlat13.xxx * u_xlat2.xyz;
    u_xlat13.xyz = u_xlat2.xyz * vec3(u_xlat26);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (304 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_WorldToObject at 80
  Matrix4x4 unity_MatrixVP at 160
  Vector4 _ProjectionParams at 0
  Vector4 unity_WorldTransformParams at 144
  Vector4 _Control_ST at 224
  Vector4 _Splat0_ST at 240
  Vector4 _Splat1_ST at 256
  Vector4 _Splat2_ST at 272
  Vector4 _Splat3_ST at 288
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float4 TEXCOORD7 [[ user(TEXCOORD7) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat5;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD5.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    output.mtl_Position = u_xlat0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    u_xlat1.xy = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat1.xy = input.NORMAL0.yz * float2(1.0, 0.0) + (-u_xlat1.xy);
    u_xlat5.xyz = u_xlat1.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat5.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat1.xyz = float3(u_xlat13) * u_xlat1.xyz;
    u_xlat2.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat2.xyz = float3(u_xlat13) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat2.zxy * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * (-Globals.unity_WorldTransformParams.www);
    output.TEXCOORD2.y = u_xlat3.x;
    output.TEXCOORD2.x = u_xlat1.z;
    output.TEXCOORD2.z = u_xlat2.y;
    output.TEXCOORD3.x = u_xlat1.x;
    output.TEXCOORD4.x = u_xlat1.y;
    output.TEXCOORD3.z = u_xlat2.z;
    output.TEXCOORD4.z = u_xlat2.x;
    output.TEXCOORD3.y = u_xlat3.y;
    output.TEXCOORD4.y = u_xlat3.z;
    output.TEXCOORD6.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    u_xlat0.y = u_xlat0.y * Globals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD7.zw = u_xlat0.zw;
    output.TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 2
Set 2D Texture "_Splat0" to slot 1 sampler slot 3
Set 2D Texture "_Splat1" to slot 2 sampler slot 4
Set 2D Texture "_Splat2" to slot 3 sampler slot 5
Set 2D Texture "_Splat3" to slot 4 sampler slot 6
Set 2D Texture "_Normal0" to slot 5 sampler slot 7
Set 2D Texture "_Normal1" to slot 6 sampler slot 8
Set 2D Texture "_Normal2" to slot 7 sampler slot 9
Set 2D Texture "_Normal3" to slot 8 sampler slot 10
Set 2D Texture "_ShadowMapTexture" to slot 9 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 10 sampler slot 0

Constant Buffer "Globals" (304 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_ProbeVolumeWorldToObject at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 48
  Vector4 unity_ShadowFadeCenterAndType at 64
  Vector4 unity_ProbeVolumeParams at 144
  Vector3 unity_ProbeVolumeSizeInv at 224
  Vector3 unity_ProbeVolumeMin at 240
  Vector4 _LightColor0 at 256
  Float _Metallic0 at 272
  Float _Metallic1 at 276
  Float _Metallic2 at 280
  Float _Metallic3 at 284
  Float _Smoothness0 at 288
  Float _Smoothness1 at 292
  Float _Smoothness2 at 296
  Float _Smoothness3 at 300
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
    float4 TEXCOORD7 [[ user(TEXCOORD7) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler_Normal0 [[ sampler (7) ]],
    sampler sampler_Normal1 [[ sampler (8) ]],
    sampler sampler_Normal2 [[ sampler (9) ]],
    sampler sampler_Normal3 [[ sampler (10) ]],
    texture2d<float, access::sample > _Control [[ texture (0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture (2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture (3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture (4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture (5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture (6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture (7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture (8) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture (9) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (10) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    half4 u_xlat10_4;
    float4 u_xlat5;
    float3 u_xlat6;
    float u_xlat7;
    float3 u_xlat8;
    float u_xlat12;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb14;
    float2 u_xlat16;
    half2 u_xlat10_16;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    float u_xlat20;
    bool u_xlatb20;
    float u_xlat21;
    float u_xlat22;
    u_xlat0.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat1.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat2 = _Control.sample(sampler_Control, input.TEXCOORD6.xy);
    u_xlat19 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat19 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3 = _Splat0.sample(sampler_Splat0, input.TEXCOORD0.xy);
    u_xlat3 = u_xlat2.xxxx * u_xlat3;
    u_xlat3.w = u_xlat3.w * Globals._Smoothness0;
    u_xlat10_4 = half4(_Splat1.sample(sampler_Splat1, input.TEXCOORD0.zw));
    u_xlat4 = u_xlat2.yyyy * float4(u_xlat10_4);
    u_xlat4.w = u_xlat4.w * Globals._Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = half4(_Splat2.sample(sampler_Splat2, input.TEXCOORD1.xy));
    u_xlat4 = u_xlat2.zzzz * float4(u_xlat10_4);
    u_xlat4.w = u_xlat4.w * Globals._Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = half4(_Splat3.sample(sampler_Splat3, input.TEXCOORD1.zw));
    u_xlat4 = u_xlat2.wwww * float4(u_xlat10_4);
    u_xlat4.w = u_xlat4.w * Globals._Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat4.xy = _Normal0.sample(sampler_Normal0, input.TEXCOORD0.xy).yw;
    u_xlat10_16.xy = half2(_Normal1.sample(sampler_Normal1, input.TEXCOORD0.zw).yw);
    u_xlat16.xy = u_xlat2.yy * float2(u_xlat10_16.yx);
    u_xlat4.xy = u_xlat2.xx * u_xlat4.yx + u_xlat16.xy;
    u_xlat10_16.xy = half2(_Normal2.sample(sampler_Normal2, input.TEXCOORD1.xy).yw);
    u_xlat4.xy = u_xlat2.zz * float2(u_xlat10_16.yx) + u_xlat4.xy;
    u_xlat10_16.xy = half2(_Normal3.sample(sampler_Normal3, input.TEXCOORD1.zw).yw);
    u_xlat4.xy = u_xlat2.ww * float2(u_xlat10_16.yx) + u_xlat4.xy;
    u_xlat4.xy = u_xlat4.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
    u_xlat22 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat22 = min(u_xlat22, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat4.z = sqrt(u_xlat22);
    u_xlat2.x = dot(u_xlat2, float4(Globals._Metallic0, Globals._Metallic1, Globals._Metallic2, Globals._Metallic3));
    u_xlat5.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat8.x = dot(u_xlat0.xyz, u_xlat5.xyz);
    u_xlat5.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat14 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat14 = sqrt(u_xlat14);
    u_xlat14 = (-u_xlat8.x) + u_xlat14;
    u_xlat8.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat14 + u_xlat8.x;
    u_xlat8.x = u_xlat8.x * Globals._LightShadowData.z + Globals._LightShadowData.w;
    u_xlat8.x = clamp(u_xlat8.x, 0.0f, 1.0f);
    u_xlatb14 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb14){
        u_xlatb20 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD5.xxx + u_xlat5.xyz;
        u_xlat5.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD5.zzz + u_xlat5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb20)) ? u_xlat5.xyz : input.TEXCOORD5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat20 = u_xlat5.y * 0.25 + 0.75;
        u_xlat22 = Globals.unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat5.x = max(u_xlat20, u_xlat22);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat20 = dot(u_xlat5, Globals.unity_OcclusionMaskSelector);
    u_xlat20 = clamp(u_xlat20, 0.0f, 1.0f);
    u_xlat5.xy = input.TEXCOORD7.xy / input.TEXCOORD7.ww;
    u_xlat22 = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat5.xy).x;
    u_xlat8.x = u_xlat8.x + u_xlat22;
    u_xlat8.x = clamp(u_xlat8.x, 0.0f, 1.0f);
    u_xlat20 = min(u_xlat8.x, u_xlat20);
    u_xlat8.x = (u_xlatb14) ? u_xlat20 : u_xlat8.x;
    u_xlat5.x = dot(input.TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(input.TEXCOORD3.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(input.TEXCOORD4.xyz, u_xlat4.xyz);
    u_xlat8.xyz = u_xlat8.xxx * Globals._LightColor0.xyz;
    u_xlat4.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat4.x = rsqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * u_xlat5.xyz;
    u_xlat5.xyz = u_xlat3.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz + float3(0.220916301, 0.220916301, 0.220916301);
    u_xlat2.x = (-u_xlat2.x) * 0.779083729 + 0.779083729;
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat2.x = (-u_xlat3.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat18) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat0.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat7 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat7 = clamp(u_xlat7, 0.0f, 1.0f);
    u_xlat0.x = dot(Globals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.x = u_xlat0.x * u_xlat0.x;
    u_xlat6.x = dot(u_xlat6.xx, u_xlat2.xx);
    u_xlat6.x = u_xlat6.x + -0.5;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat12 = u_xlat6.x * u_xlat12 + 1.0;
    u_xlat13 = -abs(u_xlat18) + 1.0;
    u_xlat21 = u_xlat13 * u_xlat13;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat13 = u_xlat13 * u_xlat21;
    u_xlat6.x = u_xlat6.x * u_xlat13 + 1.0;
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat12 = u_xlat2.x * u_xlat2.x;
    u_xlat13 = (-u_xlat2.x) * u_xlat2.x + 1.0;
    u_xlat2.x = abs(u_xlat18) * u_xlat13 + u_xlat12;
    u_xlat13 = u_xlat1.x * u_xlat13 + u_xlat12;
    u_xlat18 = abs(u_xlat18) * u_xlat13;
    u_xlat18 = u_xlat1.x * u_xlat2.x + u_xlat18;
    u_xlat18 = u_xlat18 + 9.99999975e-06;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat7 * u_xlat12 + (-u_xlat7);
    u_xlat7 = u_xlat13 * u_xlat7 + 1.0;
    u_xlat12 = u_xlat12 * 0.318309873;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat12 = u_xlat12 / u_xlat7;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat6.y = sqrt(u_xlat12);
    u_xlat6.xy = u_xlat1.xx * u_xlat6.xy;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat6.y;
    u_xlat1.xyz = u_xlat6.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat8.xyz * float3(u_xlat12);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
    output.SV_Target0.xyz = float3(u_xlat19) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec2 vs_TEXCOORD6;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat5;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
    u_xlat5.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat5.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat2.zxy * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD2.y = u_xlat3.x;
    vs_TEXCOORD2.x = u_xlat1.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat1.x;
    vs_TEXCOORD4.x = u_xlat1.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.y = u_xlat3.y;
    vs_TEXCOORD4.y = u_xlat3.z;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  sampler2D _Normal0;
uniform  sampler2D _Normal1;
uniform  sampler2D _Normal2;
uniform  sampler2D _Normal3;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
in  vec2 vs_TEXCOORD6;
in  vec4 vs_TEXCOORD7;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec4 u_xlat16_2;
vec4 u_xlat10_2;
vec4 u_xlat3;
float u_xlat16_3;
vec4 u_xlat10_3;
vec4 u_xlat4;
vec3 u_xlat16_4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat10_5;
vec3 u_xlat6;
float u_xlat7;
vec3 u_xlat8;
float u_xlat12;
float u_xlat13;
float u_xlat14;
bool u_xlatb14;
float u_xlat18;
bool u_xlatb18;
float u_xlat16_19;
float u_xlat20;
bool u_xlatb20;
float u_xlat21;
float u_xlat22;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat10_2 = texture(_Control, vs_TEXCOORD6.xy);
    u_xlat16_19 = dot(u_xlat10_2, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = u_xlat16_19 + 0.00100000005;
    u_xlat16_2 = u_xlat10_2 / vec4(u_xlat16_3);
    u_xlat10_3 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat3 = u_xlat16_2.xxxx * u_xlat10_3;
    u_xlat3.w = u_xlat3.w * _Smoothness0;
    u_xlat10_4 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat4 = u_xlat16_2.yyyy * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat4 = u_xlat16_2.zzzz * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat4 = u_xlat16_2.wwww * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = texture(_Normal0, vs_TEXCOORD0.xy);
    u_xlat10_5 = texture(_Normal1, vs_TEXCOORD0.zw);
    u_xlat16_4.xz = u_xlat16_2.yy * u_xlat10_5.wy;
    u_xlat16_4.xy = u_xlat16_2.xx * u_xlat10_4.wy + u_xlat16_4.xz;
    u_xlat10_5 = texture(_Normal2, vs_TEXCOORD1.xy);
    u_xlat16_4.xy = u_xlat16_2.zz * u_xlat10_5.wy + u_xlat16_4.xy;
    u_xlat10_5 = texture(_Normal3, vs_TEXCOORD1.zw);
    u_xlat16_4.xy = u_xlat16_2.ww * u_xlat10_5.wy + u_xlat16_4.xy;
    u_xlat4.xy = u_xlat16_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat22 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat22 = min(u_xlat22, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat4.z = sqrt(u_xlat22);
    u_xlat2.x = dot(u_xlat16_2, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat8.x = dot(u_xlat0.xyz, u_xlat5.xyz);
    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat14 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat14 = sqrt(u_xlat14);
    u_xlat14 = (-u_xlat8.x) + u_xlat14;
    u_xlat8.x = unity_ShadowFadeCenterAndType.w * u_xlat14 + u_xlat8.x;
    u_xlat8.x = u_xlat8.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
    u_xlatb14 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb14){
        u_xlatb20 = unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat5.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb20)) ? u_xlat5.xyz : vs_TEXCOORD5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat20 = u_xlat5.y * 0.25 + 0.75;
        u_xlat22 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat5.x = max(u_xlat20, u_xlat22);
        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    //ENDIF
    }
    u_xlat20 = dot(u_xlat5, unity_OcclusionMaskSelector);
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat10_5 = texture(_ShadowMapTexture, u_xlat5.xy);
    u_xlat8.x = u_xlat8.x + u_xlat10_5.x;
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
    u_xlat20 = min(u_xlat8.x, u_xlat20);
    u_xlat8.x = (u_xlatb14) ? u_xlat20 : u_xlat8.x;
    u_xlat5.x = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(vs_TEXCOORD4.xyz, u_xlat4.xyz);
    u_xlat8.xyz = u_xlat8.xxx * _LightColor0.xyz;
    u_xlat4.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * u_xlat5.xyz;
    u_xlat5.xyz = u_xlat3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat2.x = (-u_xlat2.x) * 0.779083729 + 0.779083729;
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat2.x = (-u_xlat3.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat7 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat6.x = u_xlat0.x * u_xlat0.x;
    u_xlat6.x = dot(u_xlat6.xx, u_xlat2.xx);
    u_xlat6.x = u_xlat6.x + -0.5;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat12 = u_xlat6.x * u_xlat12 + 1.0;
    u_xlat13 = -abs(u_xlat18) + 1.0;
    u_xlat21 = u_xlat13 * u_xlat13;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat13 = u_xlat13 * u_xlat21;
    u_xlat6.x = u_xlat6.x * u_xlat13 + 1.0;
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat12 = u_xlat2.x * u_xlat2.x;
    u_xlat13 = (-u_xlat2.x) * u_xlat2.x + 1.0;
    u_xlat2.x = abs(u_xlat18) * u_xlat13 + u_xlat12;
    u_xlat13 = u_xlat1.x * u_xlat13 + u_xlat12;
    u_xlat18 = abs(u_xlat18) * u_xlat13;
    u_xlat18 = u_xlat1.x * u_xlat2.x + u_xlat18;
    u_xlat18 = u_xlat18 + 9.99999975e-06;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat7 * u_xlat12 + (-u_xlat7);
    u_xlat7 = u_xlat13 * u_xlat7 + 1.0;
    u_xlat12 = u_xlat12 * 0.318309873;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat12 = u_xlat12 / u_xlat7;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat6.y = sqrt(u_xlat12);
    u_xlat6.xy = u_xlat1.xx * u_xlat6.xy;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat6.y;
    u_xlat1.xyz = u_xlat6.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat8.xyz * vec3(u_xlat12);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_19) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL_COOKIE SHADOWS_SCREEN _TERRAIN_NORMAL_MAP 
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (304 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_WorldToObject at 80
  Matrix4x4 unity_MatrixVP at 160
  Vector4 _ProjectionParams at 0
  Vector4 unity_WorldTransformParams at 144
  Vector4 _Control_ST at 224
  Vector4 _Splat0_ST at 240
  Vector4 _Splat1_ST at 256
  Vector4 _Splat2_ST at 272
  Vector4 _Splat3_ST at 288
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float4 TEXCOORD7 [[ user(TEXCOORD7) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat5;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD5.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    output.mtl_Position = u_xlat0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    u_xlat1.xy = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat1.xy = input.NORMAL0.yz * float2(1.0, 0.0) + (-u_xlat1.xy);
    u_xlat5.xyz = u_xlat1.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat5.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat1.xyz = float3(u_xlat13) * u_xlat1.xyz;
    u_xlat2.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat2.xyz = float3(u_xlat13) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat2.zxy * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * (-Globals.unity_WorldTransformParams.www);
    output.TEXCOORD2.y = u_xlat3.x;
    output.TEXCOORD2.x = u_xlat1.z;
    output.TEXCOORD2.z = u_xlat2.y;
    output.TEXCOORD3.x = u_xlat1.x;
    output.TEXCOORD4.x = u_xlat1.y;
    output.TEXCOORD3.z = u_xlat2.z;
    output.TEXCOORD4.z = u_xlat2.x;
    output.TEXCOORD3.y = u_xlat3.y;
    output.TEXCOORD4.y = u_xlat3.z;
    output.TEXCOORD6.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    u_xlat0.y = u_xlat0.y * Globals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD7.zw = u_xlat0.zw;
    output.TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_Normal0" to slot 5 sampler slot 8
Set 2D Texture "_Normal1" to slot 6 sampler slot 9
Set 2D Texture "_Normal2" to slot 7 sampler slot 10
Set 2D Texture "_Normal3" to slot 8 sampler slot 11
Set 2D Texture "_ShadowMapTexture" to slot 9 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 10 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 0

Constant Buffer "Globals" (368 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_ProbeVolumeWorldToObject at 160
  Matrix4x4 unity_WorldToLight at 272
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 48
  Vector4 unity_ShadowFadeCenterAndType at 64
  Vector4 unity_ProbeVolumeParams at 144
  Vector3 unity_ProbeVolumeSizeInv at 224
  Vector3 unity_ProbeVolumeMin at 240
  Vector4 _LightColor0 at 256
  Float _Metallic0 at 336
  Float _Metallic1 at 340
  Float _Metallic2 at 344
  Float _Metallic3 at 348
  Float _Smoothness0 at 352
  Float _Smoothness1 at 356
  Float _Smoothness2 at 360
  Float _Smoothness3 at 364
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
    float4 TEXCOORD7 [[ user(TEXCOORD7) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler_Normal0 [[ sampler (8) ]],
    sampler sampler_Normal1 [[ sampler (9) ]],
    sampler sampler_Normal2 [[ sampler (10) ]],
    sampler sampler_Normal3 [[ sampler (11) ]],
    texture2d<float, access::sample > _Control [[ texture (0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture (2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture (3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture (4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture (5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture (6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture (7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture (8) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture (9) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture (10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (11) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    half4 u_xlat10_4;
    float4 u_xlat5;
    bool u_xlatb5;
    float u_xlat6;
    float3 u_xlat7;
    float u_xlat8;
    float3 u_xlat9;
    float3 u_xlat12;
    float u_xlat14;
    float u_xlat15;
    float2 u_xlat18;
    half2 u_xlat10_18;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    float u_xlat25;
    bool u_xlatb25;
    u_xlat0.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat2 = _Control.sample(sampler_Control, input.TEXCOORD6.xy);
    u_xlat22 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat22 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3 = _Splat0.sample(sampler_Splat0, input.TEXCOORD0.xy);
    u_xlat3 = u_xlat2.xxxx * u_xlat3;
    u_xlat3.w = u_xlat3.w * Globals._Smoothness0;
    u_xlat10_4 = half4(_Splat1.sample(sampler_Splat1, input.TEXCOORD0.zw));
    u_xlat4 = u_xlat2.yyyy * float4(u_xlat10_4);
    u_xlat4.w = u_xlat4.w * Globals._Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = half4(_Splat2.sample(sampler_Splat2, input.TEXCOORD1.xy));
    u_xlat4 = u_xlat2.zzzz * float4(u_xlat10_4);
    u_xlat4.w = u_xlat4.w * Globals._Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = half4(_Splat3.sample(sampler_Splat3, input.TEXCOORD1.zw));
    u_xlat4 = u_xlat2.wwww * float4(u_xlat10_4);
    u_xlat4.w = u_xlat4.w * Globals._Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat4.xy = _Normal0.sample(sampler_Normal0, input.TEXCOORD0.xy).yw;
    u_xlat10_18.xy = half2(_Normal1.sample(sampler_Normal1, input.TEXCOORD0.zw).yw);
    u_xlat18.xy = u_xlat2.yy * float2(u_xlat10_18.yx);
    u_xlat4.xy = u_xlat2.xx * u_xlat4.yx + u_xlat18.xy;
    u_xlat10_18.xy = half2(_Normal2.sample(sampler_Normal2, input.TEXCOORD1.xy).yw);
    u_xlat4.xy = u_xlat2.zz * float2(u_xlat10_18.yx) + u_xlat4.xy;
    u_xlat10_18.xy = half2(_Normal3.sample(sampler_Normal3, input.TEXCOORD1.zw).yw);
    u_xlat4.xy = u_xlat2.ww * float2(u_xlat10_18.yx) + u_xlat4.xy;
    u_xlat4.xy = u_xlat4.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
    u_xlat25 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat25 = min(u_xlat25, 1.0);
    u_xlat25 = (-u_xlat25) + 1.0;
    u_xlat4.z = sqrt(u_xlat25);
    u_xlat2.x = dot(u_xlat2, float4(Globals._Metallic0, Globals._Metallic1, Globals._Metallic2, Globals._Metallic3));
    u_xlat9.xy = input.TEXCOORD5.yy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat9.xy = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xy * input.TEXCOORD5.xx + u_xlat9.xy;
    u_xlat9.xy = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xy * input.TEXCOORD5.zz + u_xlat9.xy;
    u_xlat9.xy = u_xlat9.xy + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat5.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat23 = dot(u_xlat0.xyz, u_xlat5.xyz);
    u_xlat5.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat25 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat25 = sqrt(u_xlat25);
    u_xlat25 = (-u_xlat23) + u_xlat25;
    u_xlat23 = Globals.unity_ShadowFadeCenterAndType.w * u_xlat25 + u_xlat23;
    u_xlat23 = u_xlat23 * Globals._LightShadowData.z + Globals._LightShadowData.w;
    u_xlat23 = clamp(u_xlat23, 0.0f, 1.0f);
    u_xlatb25 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb25){
        u_xlatb5 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat12.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat12.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD5.xxx + u_xlat12.xyz;
        u_xlat12.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD5.zzz + u_xlat12.xyz;
        u_xlat12.xyz = u_xlat12.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb5)) ? u_xlat12.xyz : input.TEXCOORD5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat12.x = u_xlat5.y * 0.25 + 0.75;
        u_xlat6 = Globals.unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat5.x = max(u_xlat12.x, u_xlat6);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat5.x = dot(u_xlat5, Globals.unity_OcclusionMaskSelector);
    u_xlat5.x = clamp(u_xlat5.x, 0.0f, 1.0f);
    u_xlat12.xy = input.TEXCOORD7.xy / input.TEXCOORD7.ww;
    u_xlat12.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat12.xy).x;
    u_xlat23 = u_xlat23 + u_xlat12.x;
    u_xlat23 = clamp(u_xlat23, 0.0f, 1.0f);
    u_xlat5.x = min(u_xlat23, u_xlat5.x);
    u_xlat23 = (u_xlatb25) ? u_xlat5.x : u_xlat23;
    u_xlat9.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat9.xy).w;
    u_xlat9.x = u_xlat23 * u_xlat9.x;
    u_xlat5.x = dot(input.TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(input.TEXCOORD3.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(input.TEXCOORD4.xyz, u_xlat4.xyz);
    u_xlat9.xyz = u_xlat9.xxx * Globals._LightColor0.xyz;
    u_xlat4.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat4.x = rsqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * u_xlat5.xyz;
    u_xlat5.xyz = u_xlat3.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz + float3(0.220916301, 0.220916301, 0.220916301);
    u_xlat2.x = (-u_xlat2.x) * 0.779083729 + 0.779083729;
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat2.x = (-u_xlat3.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat21) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat8 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0f, 1.0f);
    u_xlat0.x = dot(Globals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, u_xlat2.xx);
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat1.x) + 1.0;
    u_xlat15 = u_xlat14 * u_xlat14;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat14 = u_xlat14 * u_xlat15;
    u_xlat14 = u_xlat7.x * u_xlat14 + 1.0;
    u_xlat15 = -abs(u_xlat21) + 1.0;
    u_xlat24 = u_xlat15 * u_xlat15;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat15 = u_xlat15 * u_xlat24;
    u_xlat7.x = u_xlat7.x * u_xlat15 + 1.0;
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat2.x * u_xlat2.x;
    u_xlat15 = (-u_xlat2.x) * u_xlat2.x + 1.0;
    u_xlat2.x = abs(u_xlat21) * u_xlat15 + u_xlat14;
    u_xlat15 = u_xlat1.x * u_xlat15 + u_xlat14;
    u_xlat21 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = u_xlat1.x * u_xlat2.x + u_xlat21;
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat15 = u_xlat8 * u_xlat14 + (-u_xlat8);
    u_xlat8 = u_xlat15 * u_xlat8 + 1.0;
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat8 = u_xlat8 * u_xlat8 + 1.00000001e-07;
    u_xlat14 = u_xlat14 / u_xlat8;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat1.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat9.xyz * float3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
    output.SV_Target0.xyz = float3(u_xlat22) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec2 vs_TEXCOORD6;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat5;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
    u_xlat5.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat5.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat2.zxy * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD2.y = u_xlat3.x;
    vs_TEXCOORD2.x = u_xlat1.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat1.x;
    vs_TEXCOORD4.x = u_xlat1.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.y = u_xlat3.y;
    vs_TEXCOORD4.y = u_xlat3.z;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  sampler2D _Normal0;
uniform  sampler2D _Normal1;
uniform  sampler2D _Normal2;
uniform  sampler2D _Normal3;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
in  vec2 vs_TEXCOORD6;
in  vec4 vs_TEXCOORD7;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec4 u_xlat16_2;
vec4 u_xlat10_2;
vec4 u_xlat3;
float u_xlat16_3;
vec4 u_xlat10_3;
vec4 u_xlat4;
vec3 u_xlat16_4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat10_5;
bool u_xlatb5;
float u_xlat6;
vec4 u_xlat10_6;
vec3 u_xlat7;
float u_xlat8;
vec3 u_xlat9;
vec3 u_xlat12;
float u_xlat14;
float u_xlat15;
float u_xlat21;
bool u_xlatb21;
float u_xlat16_22;
float u_xlat23;
float u_xlat24;
float u_xlat25;
bool u_xlatb25;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat10_2 = texture(_Control, vs_TEXCOORD6.xy);
    u_xlat16_22 = dot(u_xlat10_2, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_3 = u_xlat16_22 + 0.00100000005;
    u_xlat16_2 = u_xlat10_2 / vec4(u_xlat16_3);
    u_xlat10_3 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat3 = u_xlat16_2.xxxx * u_xlat10_3;
    u_xlat3.w = u_xlat3.w * _Smoothness0;
    u_xlat10_4 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat4 = u_xlat16_2.yyyy * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat4 = u_xlat16_2.zzzz * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat4 = u_xlat16_2.wwww * u_xlat10_4;
    u_xlat4.w = u_xlat4.w * _Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat10_4 = texture(_Normal0, vs_TEXCOORD0.xy);
    u_xlat10_5 = texture(_Normal1, vs_TEXCOORD0.zw);
    u_xlat16_4.xz = u_xlat16_2.yy * u_xlat10_5.wy;
    u_xlat16_4.xy = u_xlat16_2.xx * u_xlat10_4.wy + u_xlat16_4.xz;
    u_xlat10_5 = texture(_Normal2, vs_TEXCOORD1.xy);
    u_xlat16_4.xy = u_xlat16_2.zz * u_xlat10_5.wy + u_xlat16_4.xy;
    u_xlat10_5 = texture(_Normal3, vs_TEXCOORD1.zw);
    u_xlat16_4.xy = u_xlat16_2.ww * u_xlat10_5.wy + u_xlat16_4.xy;
    u_xlat4.xy = u_xlat16_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat25 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat25 = min(u_xlat25, 1.0);
    u_xlat25 = (-u_xlat25) + 1.0;
    u_xlat4.z = sqrt(u_xlat25);
    u_xlat2.x = dot(u_xlat16_2, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlat9.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat9.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat9.xy;
    u_xlat9.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat9.xy;
    u_xlat9.xy = u_xlat9.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat23 = dot(u_xlat0.xyz, u_xlat5.xyz);
    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat25 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat25 = sqrt(u_xlat25);
    u_xlat25 = (-u_xlat23) + u_xlat25;
    u_xlat23 = unity_ShadowFadeCenterAndType.w * u_xlat25 + u_xlat23;
    u_xlat23 = u_xlat23 * _LightShadowData.z + _LightShadowData.w;
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlatb25 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb25){
        u_xlatb5 = unity_ProbeVolumeParams.y==1.0;
        u_xlat12.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat12.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat12.xyz;
        u_xlat12.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat12.xyz;
        u_xlat12.xyz = u_xlat12.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb5)) ? u_xlat12.xyz : vs_TEXCOORD5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat12.x = u_xlat5.y * 0.25 + 0.75;
        u_xlat6 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat5.x = max(u_xlat12.x, u_xlat6);
        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    //ENDIF
    }
    u_xlat5.x = dot(u_xlat5, unity_OcclusionMaskSelector);
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat10_6 = texture(_ShadowMapTexture, u_xlat12.xy);
    u_xlat23 = u_xlat23 + u_xlat10_6.x;
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.x = min(u_xlat23, u_xlat5.x);
    u_xlat23 = (u_xlatb25) ? u_xlat5.x : u_xlat23;
    u_xlat10_5 = texture(_LightTexture0, u_xlat9.xy);
    u_xlat9.x = u_xlat23 * u_xlat10_5.w;
    u_xlat5.x = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(vs_TEXCOORD4.xyz, u_xlat4.xyz);
    u_xlat9.xyz = u_xlat9.xxx * _LightColor0.xyz;
    u_xlat4.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * u_xlat5.xyz;
    u_xlat5.xyz = u_xlat3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat2.x = (-u_xlat2.x) * 0.779083729 + 0.779083729;
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat2.x = (-u_xlat3.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat8 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, u_xlat2.xx);
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat1.x) + 1.0;
    u_xlat15 = u_xlat14 * u_xlat14;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat14 = u_xlat14 * u_xlat15;
    u_xlat14 = u_xlat7.x * u_xlat14 + 1.0;
    u_xlat15 = -abs(u_xlat21) + 1.0;
    u_xlat24 = u_xlat15 * u_xlat15;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat15 = u_xlat15 * u_xlat24;
    u_xlat7.x = u_xlat7.x * u_xlat15 + 1.0;
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat2.x * u_xlat2.x;
    u_xlat15 = (-u_xlat2.x) * u_xlat2.x + 1.0;
    u_xlat2.x = abs(u_xlat21) * u_xlat15 + u_xlat14;
    u_xlat15 = u_xlat1.x * u_xlat15 + u_xlat14;
    u_xlat21 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = u_xlat1.x * u_xlat2.x + u_xlat21;
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat15 = u_xlat8 * u_xlat14 + (-u_xlat8);
    u_xlat8 = u_xlat15 * u_xlat8 + 1.0;
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat8 = u_xlat8 * u_xlat8 + 1.00000001e-07;
    u_xlat14 = u_xlat14 / u_xlat8;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat1.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat9.xyz * vec3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_22) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: POINT SHADOWS_CUBE _TERRAIN_NORMAL_MAP 
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (288 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 144
  Vector4 unity_WorldTransformParams at 128
  Vector4 _Control_ST at 208
  Vector4 _Splat0_ST at 224
  Vector4 _Splat1_ST at 240
  Vector4 _Splat2_ST at 256
  Vector4 _Splat3_ST at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD5.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    u_xlat0.xy = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat0.xy = input.NORMAL0.yz * float2(1.0, 0.0) + (-u_xlat0.xy);
    u_xlat3.xyz = u_xlat0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat1.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat1.xyz = float3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * (-Globals.unity_WorldTransformParams.www);
    output.TEXCOORD2.y = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat0.z;
    output.TEXCOORD2.z = u_xlat1.y;
    output.TEXCOORD3.x = u_xlat0.x;
    output.TEXCOORD4.x = u_xlat0.y;
    output.TEXCOORD3.z = u_xlat1.z;
    output.TEXCOORD4.z = u_xlat1.x;
    output.TEXCOORD3.y = u_xlat2.y;
    output.TEXCOORD4.y = u_xlat2.z;
    output.TEXCOORD6.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    output.TEXCOORD7.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_Normal0" to slot 5 sampler slot 8
Set 2D Texture "_Normal1" to slot 6 sampler slot 9
Set 2D Texture "_Normal2" to slot 7 sampler slot 10
Set 2D Texture "_Normal3" to slot 8 sampler slot 11
Set CUBE Texture "_ShadowMapTexture" to slot 9 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 10 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 0

Constant Buffer "Globals" (384 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 96
  Matrix4x4 unity_ProbeVolumeWorldToObject at 176
  Matrix4x4 unity_WorldToLight at 288
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 unity_OcclusionMaskSelector at 48
  Vector4 _LightShadowData at 64
  Vector4 unity_ShadowFadeCenterAndType at 80
  Vector4 unity_ProbeVolumeParams at 160
  Vector3 unity_ProbeVolumeSizeInv at 240
  Vector3 unity_ProbeVolumeMin at 256
  Vector4 _LightColor0 at 272
  Float _Metallic0 at 352
  Float _Metallic1 at 356
  Float _Metallic2 at 360
  Float _Metallic3 at 364
  Float _Smoothness0 at 368
  Float _Smoothness1 at 372
  Float _Smoothness2 at 376
  Float _Smoothness3 at 380
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler_Normal0 [[ sampler (8) ]],
    sampler sampler_Normal1 [[ sampler (9) ]],
    sampler sampler_Normal2 [[ sampler (10) ]],
    sampler sampler_Normal3 [[ sampler (11) ]],
    texture2d<float, access::sample > _Control [[ texture (0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture (2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture (3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture (4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture (5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture (6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture (7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture (8) ]] ,
    texturecube<float, access::sample > _ShadowMapTexture [[ texture (9) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture (10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (11) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    half4 u_xlat10_6;
    float4 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    bool u_xlatb10;
    float u_xlat11;
    float u_xlat16;
    float u_xlat18;
    bool u_xlatb18;
    float2 u_xlat22;
    half2 u_xlat10_22;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    u_xlat0.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat1.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = rsqrt(u_xlat25);
    u_xlat3.xyz = float3(u_xlat25) * u_xlat2.xyz;
    u_xlat4 = _Control.sample(sampler_Control, input.TEXCOORD6.xy);
    u_xlat25 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat26 = u_xlat25 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat26);
    u_xlat5 = _Splat0.sample(sampler_Splat0, input.TEXCOORD0.xy);
    u_xlat5 = u_xlat4.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * Globals._Smoothness0;
    u_xlat10_6 = half4(_Splat1.sample(sampler_Splat1, input.TEXCOORD0.zw));
    u_xlat6 = u_xlat4.yyyy * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = half4(_Splat2.sample(sampler_Splat2, input.TEXCOORD1.xy));
    u_xlat6 = u_xlat4.zzzz * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = half4(_Splat3.sample(sampler_Splat3, input.TEXCOORD1.zw));
    u_xlat6 = u_xlat4.wwww * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6.xy = _Normal0.sample(sampler_Normal0, input.TEXCOORD0.xy).yw;
    u_xlat10_22.xy = half2(_Normal1.sample(sampler_Normal1, input.TEXCOORD0.zw).yw);
    u_xlat22.xy = u_xlat4.yy * float2(u_xlat10_22.yx);
    u_xlat6.xy = u_xlat4.xx * u_xlat6.yx + u_xlat22.xy;
    u_xlat10_22.xy = half2(_Normal2.sample(sampler_Normal2, input.TEXCOORD1.xy).yw);
    u_xlat6.xy = u_xlat4.zz * float2(u_xlat10_22.yx) + u_xlat6.xy;
    u_xlat10_22.xy = half2(_Normal3.sample(sampler_Normal3, input.TEXCOORD1.zw).yw);
    u_xlat6.xy = u_xlat4.ww * float2(u_xlat10_22.yx) + u_xlat6.xy;
    u_xlat6.xy = u_xlat6.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
    u_xlat26 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat26 = min(u_xlat26, 1.0);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat6.z = sqrt(u_xlat26);
    u_xlat26 = dot(u_xlat4, float4(Globals._Metallic0, Globals._Metallic1, Globals._Metallic2, Globals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat4.xyz;
    u_xlat4.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat7.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat7.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat10 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat10 = sqrt(u_xlat10);
    u_xlat10 = (-u_xlat2.x) + u_xlat10;
    u_xlat2.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat10 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * Globals._LightShadowData.z + Globals._LightShadowData.w;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb10 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb10){
        u_xlatb18 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD5.xxx + u_xlat7.xyz;
        u_xlat7.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD5.zzz + u_xlat7.xyz;
        u_xlat7.xyz = u_xlat7.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb18)) ? u_xlat7.xyz : input.TEXCOORD5.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat7.yzw = u_xlat7.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat18 = u_xlat7.y * 0.25 + 0.75;
        u_xlat27 = Globals.unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat7.x = max(u_xlat18, u_xlat27);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xzw);
    } else {
        u_xlat7.x = float(1.0);
        u_xlat7.y = float(1.0);
        u_xlat7.z = float(1.0);
        u_xlat7.w = float(1.0);
    }
    u_xlat18 = dot(u_xlat7, Globals.unity_OcclusionMaskSelector);
    u_xlat18 = clamp(u_xlat18, 0.0f, 1.0f);
    u_xlat7.xyz = input.TEXCOORD5.xyz + (-Globals._LightPositionRange.xyz);
    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat27 = u_xlat27 * Globals._LightPositionRange.w;
    u_xlat27 = u_xlat27 * 0.970000029;
    u_xlat28 = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat7.xyz, level(0.0)).x;
    u_xlatb27 = u_xlat28<u_xlat27;
    u_xlat27 = (u_xlatb27) ? Globals._LightShadowData.x : 1.0;
    u_xlat2.x = u_xlat2.x + u_xlat27;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat18 = min(u_xlat2.x, u_xlat18);
    u_xlat2.x = (u_xlatb10) ? u_xlat18 : u_xlat2.x;
    u_xlat10 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat10 = _LightTexture0.sample(sampler_LightTexture0, float2(u_xlat10)).w;
    u_xlat2.x = u_xlat2.x * u_xlat10;
    u_xlat4.x = dot(input.TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat4.y = dot(input.TEXCOORD3.xyz, u_xlat6.xyz);
    u_xlat4.z = dot(input.TEXCOORD4.xyz, u_xlat6.xyz);
    u_xlat2.xyz = u_xlat2.xxx * Globals._LightColor0.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat4.xyz = float3(u_xlat27) * u_xlat4.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = float3(u_xlat26) * u_xlat6.xyz + float3(0.220916301, 0.220916301, 0.220916301);
    u_xlat26 = (-u_xlat26) * 0.779083729 + 0.779083729;
    u_xlat5.xyz = float3(u_xlat26) * u_xlat5.xyz;
    u_xlat26 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat24) + u_xlat3.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat11 = clamp(u_xlat11, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat8.x = u_xlat0.x * u_xlat0.x;
    u_xlat8.x = dot(u_xlat8.xx, float2(u_xlat26));
    u_xlat8.x = u_xlat8.x + -0.5;
    u_xlat16 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat16 * u_xlat16;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat1.x;
    u_xlat16 = u_xlat8.x * u_xlat16 + 1.0;
    u_xlat1.x = -abs(u_xlat24) + 1.0;
    u_xlat9 = u_xlat1.x * u_xlat1.x;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat8.x = u_xlat8.x * u_xlat1.x + 1.0;
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat26 * u_xlat26;
    u_xlat1.x = (-u_xlat26) * u_xlat26 + 1.0;
    u_xlat9 = abs(u_xlat24) * u_xlat1.x + u_xlat16;
    u_xlat1.x = u_xlat3.x * u_xlat1.x + u_xlat16;
    u_xlat24 = abs(u_xlat24) * u_xlat1.x;
    u_xlat24 = u_xlat3.x * u_xlat9 + u_xlat24;
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat1.x = u_xlat11 * u_xlat16 + (-u_xlat11);
    u_xlat1.x = u_xlat1.x * u_xlat11 + 1.0;
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat16 = u_xlat16 / u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat8.y = sqrt(u_xlat16);
    u_xlat8.xy = u_xlat3.xx * u_xlat8.xy;
    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat8.y;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz;
    u_xlat8.xyz = u_xlat2.xyz * float3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    output.SV_Target0.xyz = float3(u_xlat25) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec2 vs_TEXCOORD6;
out vec2 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlat0.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
    u_xlat0.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xy);
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD2.y = u_xlat2.x;
    vs_TEXCOORD2.x = u_xlat0.z;
    vs_TEXCOORD2.z = u_xlat1.y;
    vs_TEXCOORD3.x = u_xlat0.x;
    vs_TEXCOORD4.x = u_xlat0.y;
    vs_TEXCOORD3.z = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat1.x;
    vs_TEXCOORD3.y = u_xlat2.y;
    vs_TEXCOORD4.y = u_xlat2.z;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    vs_TEXCOORD7.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  sampler2D _Normal0;
uniform  sampler2D _Normal1;
uniform  sampler2D _Normal2;
uniform  sampler2D _Normal3;
uniform  samplerCube _ShadowMapTexture;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
in  vec2 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat16_4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat10_5;
vec4 u_xlat6;
vec3 u_xlat16_6;
vec4 u_xlat10_6;
vec4 u_xlat7;
vec4 u_xlat10_7;
vec3 u_xlat8;
float u_xlat9;
float u_xlat10;
bool u_xlatb10;
float u_xlat11;
float u_xlat16;
float u_xlat18;
bool u_xlatb18;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
float u_xlat16_25;
float u_xlat26;
float u_xlat16_26;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat3.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat10_4 = texture(_Control, vs_TEXCOORD6.xy);
    u_xlat16_25 = dot(u_xlat10_4, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_26 = u_xlat16_25 + 0.00100000005;
    u_xlat16_4 = u_xlat10_4 / vec4(u_xlat16_26);
    u_xlat10_5 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat5 = u_xlat16_4.xxxx * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness0;
    u_xlat10_6 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat6 = u_xlat16_4.yyyy * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat6 = u_xlat16_4.zzzz * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat6 = u_xlat16_4.wwww * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = texture(_Normal0, vs_TEXCOORD0.xy);
    u_xlat10_7 = texture(_Normal1, vs_TEXCOORD0.zw);
    u_xlat16_6.xz = u_xlat16_4.yy * u_xlat10_7.wy;
    u_xlat16_6.xy = u_xlat16_4.xx * u_xlat10_6.wy + u_xlat16_6.xz;
    u_xlat10_7 = texture(_Normal2, vs_TEXCOORD1.xy);
    u_xlat16_6.xy = u_xlat16_4.zz * u_xlat10_7.wy + u_xlat16_6.xy;
    u_xlat10_7 = texture(_Normal3, vs_TEXCOORD1.zw);
    u_xlat16_6.xy = u_xlat16_4.ww * u_xlat10_7.wy + u_xlat16_6.xy;
    u_xlat6.xy = u_xlat16_6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat26 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat26 = min(u_xlat26, 1.0);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat6.z = sqrt(u_xlat26);
    u_xlat26 = dot(u_xlat16_4, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlat4.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat10 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat10 = sqrt(u_xlat10);
    u_xlat10 = (-u_xlat2.x) + u_xlat10;
    u_xlat2.x = unity_ShadowFadeCenterAndType.w * u_xlat10 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlatb10 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb10){
        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat7.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat7.xyz;
        u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb18)) ? u_xlat7.xyz : vs_TEXCOORD5.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat7.yzw = u_xlat7.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat18 = u_xlat7.y * 0.25 + 0.75;
        u_xlat27 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat7.x = max(u_xlat18, u_xlat27);
        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xzw);
    } else {
        u_xlat7.x = float(1.0);
        u_xlat7.y = float(1.0);
        u_xlat7.z = float(1.0);
        u_xlat7.w = float(1.0);
    //ENDIF
    }
    u_xlat18 = dot(u_xlat7, unity_OcclusionMaskSelector);
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat27 = u_xlat27 * _LightPositionRange.w;
    u_xlat27 = u_xlat27 * 0.970000029;
    u_xlat10_7 = textureLod(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlatb27 = u_xlat10_7.x<u_xlat27;
    u_xlat27 = (u_xlatb27) ? _LightShadowData.x : 1.0;
    u_xlat2.x = u_xlat2.x + u_xlat27;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat18 = min(u_xlat2.x, u_xlat18);
    u_xlat2.x = (u_xlatb10) ? u_xlat18 : u_xlat2.x;
    u_xlat10 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat10_4 = texture(_LightTexture0, vec2(u_xlat10));
    u_xlat2.x = u_xlat2.x * u_xlat10_4.w;
    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);
    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat6.xyz);
    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat6.xyz = u_xlat5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = vec3(u_xlat26) * u_xlat6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat26 = (-u_xlat26) * 0.779083729 + 0.779083729;
    u_xlat5.xyz = vec3(u_xlat26) * u_xlat5.xyz;
    u_xlat26 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat3.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat8.x = u_xlat0.x * u_xlat0.x;
    u_xlat8.x = dot(u_xlat8.xx, vec2(u_xlat26));
    u_xlat8.x = u_xlat8.x + -0.5;
    u_xlat16 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat16 * u_xlat16;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat1.x;
    u_xlat16 = u_xlat8.x * u_xlat16 + 1.0;
    u_xlat1.x = -abs(u_xlat24) + 1.0;
    u_xlat9 = u_xlat1.x * u_xlat1.x;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat8.x = u_xlat8.x * u_xlat1.x + 1.0;
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat26 * u_xlat26;
    u_xlat1.x = (-u_xlat26) * u_xlat26 + 1.0;
    u_xlat9 = abs(u_xlat24) * u_xlat1.x + u_xlat16;
    u_xlat1.x = u_xlat3.x * u_xlat1.x + u_xlat16;
    u_xlat24 = abs(u_xlat24) * u_xlat1.x;
    u_xlat24 = u_xlat3.x * u_xlat9 + u_xlat24;
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat1.x = u_xlat11 * u_xlat16 + (-u_xlat11);
    u_xlat1.x = u_xlat1.x * u_xlat11 + 1.0;
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat16 = u_xlat16 / u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat8.y = sqrt(u_xlat16);
    u_xlat8.xy = u_xlat3.xx * u_xlat8.xy;
    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat8.y;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz;
    u_xlat8.xyz = u_xlat2.xyz * vec3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_25) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: POINT SHADOWS_CUBE SHADOWS_SOFT _TERRAIN_NORMAL_MAP 
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (288 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 144
  Vector4 unity_WorldTransformParams at 128
  Vector4 _Control_ST at 208
  Vector4 _Splat0_ST at 224
  Vector4 _Splat1_ST at 240
  Vector4 _Splat2_ST at 256
  Vector4 _Splat3_ST at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD5.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    u_xlat0.xy = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat0.xy = input.NORMAL0.yz * float2(1.0, 0.0) + (-u_xlat0.xy);
    u_xlat3.xyz = u_xlat0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat1.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat1.xyz = float3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * (-Globals.unity_WorldTransformParams.www);
    output.TEXCOORD2.y = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat0.z;
    output.TEXCOORD2.z = u_xlat1.y;
    output.TEXCOORD3.x = u_xlat0.x;
    output.TEXCOORD4.x = u_xlat0.y;
    output.TEXCOORD3.z = u_xlat1.z;
    output.TEXCOORD4.z = u_xlat1.x;
    output.TEXCOORD3.y = u_xlat2.y;
    output.TEXCOORD4.y = u_xlat2.z;
    output.TEXCOORD6.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    output.TEXCOORD7.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_Normal0" to slot 5 sampler slot 8
Set 2D Texture "_Normal1" to slot 6 sampler slot 9
Set 2D Texture "_Normal2" to slot 7 sampler slot 10
Set 2D Texture "_Normal3" to slot 8 sampler slot 11
Set CUBE Texture "_ShadowMapTexture" to slot 9 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 10 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 0

Constant Buffer "Globals" (384 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 96
  Matrix4x4 unity_ProbeVolumeWorldToObject at 176
  Matrix4x4 unity_WorldToLight at 288
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 unity_OcclusionMaskSelector at 48
  Vector4 _LightShadowData at 64
  Vector4 unity_ShadowFadeCenterAndType at 80
  Vector4 unity_ProbeVolumeParams at 160
  Vector3 unity_ProbeVolumeSizeInv at 240
  Vector3 unity_ProbeVolumeMin at 256
  Vector4 _LightColor0 at 272
  Float _Metallic0 at 352
  Float _Metallic1 at 356
  Float _Metallic2 at 360
  Float _Metallic3 at 364
  Float _Smoothness0 at 368
  Float _Smoothness1 at 372
  Float _Smoothness2 at 376
  Float _Smoothness3 at 380
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler_Normal0 [[ sampler (8) ]],
    sampler sampler_Normal1 [[ sampler (9) ]],
    sampler sampler_Normal2 [[ sampler (10) ]],
    sampler sampler_Normal3 [[ sampler (11) ]],
    texture2d<float, access::sample > _Control [[ texture (0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture (2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture (3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture (4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture (5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture (6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture (7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture (8) ]] ,
    texturecube<float, access::sample > _ShadowMapTexture [[ texture (9) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture (10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (11) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    half4 u_xlat10_6;
    float4 u_xlat7;
    bool4 u_xlatb7;
    float4 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float u_xlat11;
    float u_xlat12;
    bool u_xlatb12;
    float u_xlat13;
    float u_xlat20;
    float u_xlat22;
    bool u_xlatb22;
    float2 u_xlat26;
    half2 u_xlat10_26;
    float u_xlat30;
    bool u_xlatb30;
    float u_xlat31;
    float u_xlat32;
    float u_xlat33;
    bool u_xlatb33;
    u_xlat0.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat1.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = rsqrt(u_xlat31);
    u_xlat3.xyz = float3(u_xlat31) * u_xlat2.xyz;
    u_xlat4 = _Control.sample(sampler_Control, input.TEXCOORD6.xy);
    u_xlat31 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat32 = u_xlat31 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat32);
    u_xlat5 = _Splat0.sample(sampler_Splat0, input.TEXCOORD0.xy);
    u_xlat5 = u_xlat4.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * Globals._Smoothness0;
    u_xlat10_6 = half4(_Splat1.sample(sampler_Splat1, input.TEXCOORD0.zw));
    u_xlat6 = u_xlat4.yyyy * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = half4(_Splat2.sample(sampler_Splat2, input.TEXCOORD1.xy));
    u_xlat6 = u_xlat4.zzzz * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = half4(_Splat3.sample(sampler_Splat3, input.TEXCOORD1.zw));
    u_xlat6 = u_xlat4.wwww * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6.xy = _Normal0.sample(sampler_Normal0, input.TEXCOORD0.xy).yw;
    u_xlat10_26.xy = half2(_Normal1.sample(sampler_Normal1, input.TEXCOORD0.zw).yw);
    u_xlat26.xy = u_xlat4.yy * float2(u_xlat10_26.yx);
    u_xlat6.xy = u_xlat4.xx * u_xlat6.yx + u_xlat26.xy;
    u_xlat10_26.xy = half2(_Normal2.sample(sampler_Normal2, input.TEXCOORD1.xy).yw);
    u_xlat6.xy = u_xlat4.zz * float2(u_xlat10_26.yx) + u_xlat6.xy;
    u_xlat10_26.xy = half2(_Normal3.sample(sampler_Normal3, input.TEXCOORD1.zw).yw);
    u_xlat6.xy = u_xlat4.ww * float2(u_xlat10_26.yx) + u_xlat6.xy;
    u_xlat6.xy = u_xlat6.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
    u_xlat32 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat6.z = sqrt(u_xlat32);
    u_xlat32 = dot(u_xlat4, float4(Globals._Metallic0, Globals._Metallic1, Globals._Metallic2, Globals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat4.xyz;
    u_xlat4.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat7.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat7.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat12 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat2.x) + u_xlat12;
    u_xlat2.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * Globals._LightShadowData.z + Globals._LightShadowData.w;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb12 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb22 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD5.xxx + u_xlat7.xyz;
        u_xlat7.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD5.zzz + u_xlat7.xyz;
        u_xlat7.xyz = u_xlat7.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb22)) ? u_xlat7.xyz : input.TEXCOORD5.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat7.yzw = u_xlat7.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat22 = u_xlat7.y * 0.25 + 0.75;
        u_xlat33 = Globals.unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat7.x = max(u_xlat22, u_xlat33);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xzw);
    } else {
        u_xlat7.x = float(1.0);
        u_xlat7.y = float(1.0);
        u_xlat7.z = float(1.0);
        u_xlat7.w = float(1.0);
    }
    u_xlat22 = dot(u_xlat7, Globals.unity_OcclusionMaskSelector);
    u_xlat22 = clamp(u_xlat22, 0.0f, 1.0f);
    u_xlatb33 = u_xlat2.x<0.99000001;
    if(u_xlatb33){
        u_xlat7.xyz = input.TEXCOORD5.xyz + (-Globals._LightPositionRange.xyz);
        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat33 = u_xlat33 * Globals._LightPositionRange.w;
        u_xlat33 = u_xlat33 * 0.970000029;
        u_xlat8.xyz = u_xlat7.xyz + float3(0.0078125, 0.0078125, 0.0078125);
        u_xlat8.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat8.xyz, level(0.0)).x;
        u_xlat9.xyz = u_xlat7.xyz + float3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat8.y = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat9.xyz, level(0.0)).x;
        u_xlat9.xyz = u_xlat7.xyz + float3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat8.z = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat9.xyz, level(0.0)).x;
        u_xlat7.xyz = u_xlat7.xyz + float3(0.0078125, -0.0078125, -0.0078125);
        u_xlat8.w = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat7.xyz, level(0.0)).x;
        u_xlatb7 = (u_xlat8<float4(u_xlat33));
        u_xlat7.x = (u_xlatb7.x) ? Globals._LightShadowData.x : float(1.0);
        u_xlat7.y = (u_xlatb7.y) ? Globals._LightShadowData.x : float(1.0);
        u_xlat7.z = (u_xlatb7.z) ? Globals._LightShadowData.x : float(1.0);
        u_xlat7.w = (u_xlatb7.w) ? Globals._LightShadowData.x : float(1.0);
        u_xlat33 = dot(u_xlat7, float4(0.25, 0.25, 0.25, 0.25));
    } else {
        u_xlat33 = 1.0;
    }
    u_xlat2.x = u_xlat2.x + u_xlat33;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat22 = min(u_xlat2.x, u_xlat22);
    u_xlat2.x = (u_xlatb12) ? u_xlat22 : u_xlat2.x;
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = _LightTexture0.sample(sampler_LightTexture0, float2(u_xlat12)).w;
    u_xlat2.x = u_xlat2.x * u_xlat12;
    u_xlat4.x = dot(input.TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat4.y = dot(input.TEXCOORD3.xyz, u_xlat6.xyz);
    u_xlat4.z = dot(input.TEXCOORD4.xyz, u_xlat6.xyz);
    u_xlat2.xyz = u_xlat2.xxx * Globals._LightColor0.xyz;
    u_xlat33 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat4.xyz = float3(u_xlat33) * u_xlat4.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = float3(u_xlat32) * u_xlat6.xyz + float3(0.220916301, 0.220916301, 0.220916301);
    u_xlat32 = (-u_xlat32) * 0.779083729 + 0.779083729;
    u_xlat5.xyz = float3(u_xlat32) * u_xlat5.xyz;
    u_xlat32 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat30) + u_xlat3.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat0.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat10.x = u_xlat0.x * u_xlat0.x;
    u_xlat10.x = dot(u_xlat10.xx, float2(u_xlat32));
    u_xlat10.x = u_xlat10.x + -0.5;
    u_xlat20 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat20 * u_xlat20;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat1.x;
    u_xlat20 = u_xlat10.x * u_xlat20 + 1.0;
    u_xlat1.x = -abs(u_xlat30) + 1.0;
    u_xlat11 = u_xlat1.x * u_xlat1.x;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat1.x = u_xlat1.x * u_xlat11;
    u_xlat10.x = u_xlat10.x * u_xlat1.x + 1.0;
    u_xlat10.x = u_xlat10.x * u_xlat20;
    u_xlat20 = u_xlat32 * u_xlat32;
    u_xlat1.x = (-u_xlat32) * u_xlat32 + 1.0;
    u_xlat11 = abs(u_xlat30) * u_xlat1.x + u_xlat20;
    u_xlat1.x = u_xlat3.x * u_xlat1.x + u_xlat20;
    u_xlat30 = abs(u_xlat30) * u_xlat1.x;
    u_xlat30 = u_xlat3.x * u_xlat11 + u_xlat30;
    u_xlat30 = u_xlat30 + 9.99999975e-06;
    u_xlat30 = 0.5 / u_xlat30;
    u_xlat20 = u_xlat20 * u_xlat20;
    u_xlat1.x = u_xlat13 * u_xlat20 + (-u_xlat13);
    u_xlat1.x = u_xlat1.x * u_xlat13 + 1.0;
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat20 = u_xlat20 / u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat30;
    u_xlat20 = u_xlat20 * 3.14159274;
    u_xlat20 = max(u_xlat20, 9.99999975e-05);
    u_xlat10.y = sqrt(u_xlat20);
    u_xlat10.xy = u_xlat3.xx * u_xlat10.xy;
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb30 = u_xlat30!=0.0;
    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
    u_xlat20 = u_xlat30 * u_xlat10.y;
    u_xlat1.xyz = u_xlat10.xxx * u_xlat2.xyz;
    u_xlat10.xyz = u_xlat2.xyz * float3(u_xlat20);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat10.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    output.SV_Target0.xyz = float3(u_xlat31) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec2 vs_TEXCOORD6;
out vec2 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlat0.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
    u_xlat0.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xy);
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD2.y = u_xlat2.x;
    vs_TEXCOORD2.x = u_xlat0.z;
    vs_TEXCOORD2.z = u_xlat1.y;
    vs_TEXCOORD3.x = u_xlat0.x;
    vs_TEXCOORD4.x = u_xlat0.y;
    vs_TEXCOORD3.z = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat1.x;
    vs_TEXCOORD3.y = u_xlat2.y;
    vs_TEXCOORD4.y = u_xlat2.z;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    vs_TEXCOORD7.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  sampler2D _Normal0;
uniform  sampler2D _Normal1;
uniform  sampler2D _Normal2;
uniform  sampler2D _Normal3;
uniform  samplerCube _ShadowMapTexture;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
in  vec2 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat16_4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat10_5;
vec4 u_xlat6;
vec3 u_xlat16_6;
vec4 u_xlat10_6;
vec4 u_xlat7;
vec4 u_xlat10_7;
bvec4 u_xlatb7;
vec3 u_xlat8;
vec4 u_xlat10_8;
vec4 u_xlat10_9;
vec4 u_xlat10_10;
vec3 u_xlat11;
float u_xlat12;
float u_xlat13;
bool u_xlatb13;
float u_xlat14;
vec3 u_xlat19;
float u_xlat22;
float u_xlat24;
bool u_xlatb24;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
float u_xlat16_34;
float u_xlat35;
float u_xlat16_35;
float u_xlat36;
bool u_xlatb36;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat1.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat34 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = vec3(u_xlat34) * u_xlat2.xyz;
    u_xlat10_4 = texture(_Control, vs_TEXCOORD6.xy);
    u_xlat16_34 = dot(u_xlat10_4, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_35 = u_xlat16_34 + 0.00100000005;
    u_xlat16_4 = u_xlat10_4 / vec4(u_xlat16_35);
    u_xlat10_5 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat5 = u_xlat16_4.xxxx * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness0;
    u_xlat10_6 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat6 = u_xlat16_4.yyyy * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat6 = u_xlat16_4.zzzz * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat6 = u_xlat16_4.wwww * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = texture(_Normal0, vs_TEXCOORD0.xy);
    u_xlat10_7 = texture(_Normal1, vs_TEXCOORD0.zw);
    u_xlat16_6.xz = u_xlat16_4.yy * u_xlat10_7.wy;
    u_xlat16_6.xy = u_xlat16_4.xx * u_xlat10_6.wy + u_xlat16_6.xz;
    u_xlat10_7 = texture(_Normal2, vs_TEXCOORD1.xy);
    u_xlat16_6.xy = u_xlat16_4.zz * u_xlat10_7.wy + u_xlat16_6.xy;
    u_xlat10_7 = texture(_Normal3, vs_TEXCOORD1.zw);
    u_xlat16_6.xy = u_xlat16_4.ww * u_xlat10_7.wy + u_xlat16_6.xy;
    u_xlat6.xy = u_xlat16_6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat35 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat35 = min(u_xlat35, 1.0);
    u_xlat35 = (-u_xlat35) + 1.0;
    u_xlat6.z = sqrt(u_xlat35);
    u_xlat35 = dot(u_xlat16_4, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlat4.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat13 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat13 = sqrt(u_xlat13);
    u_xlat13 = (-u_xlat2.x) + u_xlat13;
    u_xlat2.x = unity_ShadowFadeCenterAndType.w * u_xlat13 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlatb13 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb13){
        u_xlatb24 = unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat7.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat7.xyz;
        u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb24)) ? u_xlat7.xyz : vs_TEXCOORD5.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat7.yzw = u_xlat7.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat24 = u_xlat7.y * 0.25 + 0.75;
        u_xlat36 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat7.x = max(u_xlat24, u_xlat36);
        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xzw);
    } else {
        u_xlat7.x = float(1.0);
        u_xlat7.y = float(1.0);
        u_xlat7.z = float(1.0);
        u_xlat7.w = float(1.0);
    //ENDIF
    }
    u_xlat24 = dot(u_xlat7, unity_OcclusionMaskSelector);
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
    u_xlatb36 = u_xlat2.x<0.99000001;
    if(u_xlatb36){
        u_xlat7.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
        u_xlat36 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat36 = sqrt(u_xlat36);
        u_xlat36 = u_xlat36 * _LightPositionRange.w;
        u_xlat36 = u_xlat36 * 0.970000029;
        u_xlat8.xyz = u_xlat7.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
        u_xlat10_8 = textureLod(_ShadowMapTexture, u_xlat8.xyz, 0.0);
        u_xlat19.xyz = u_xlat7.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat10_9 = textureLod(_ShadowMapTexture, u_xlat19.xyz, 0.0);
        u_xlat19.xyz = u_xlat7.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat10_10 = textureLod(_ShadowMapTexture, u_xlat19.xyz, 0.0);
        u_xlat7.xyz = u_xlat7.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
        u_xlat7 = textureLod(_ShadowMapTexture, u_xlat7.xyz, 0.0).yzwx;
        u_xlat7.x = u_xlat10_8.x;
        u_xlat7.y = u_xlat10_9.x;
        u_xlat7.z = u_xlat10_10.x;
        u_xlatb7 = lessThan(u_xlat7, vec4(u_xlat36));
        u_xlat7.x = (u_xlatb7.x) ? _LightShadowData.x : float(1.0);
        u_xlat7.y = (u_xlatb7.y) ? _LightShadowData.x : float(1.0);
        u_xlat7.z = (u_xlatb7.z) ? _LightShadowData.x : float(1.0);
        u_xlat7.w = (u_xlatb7.w) ? _LightShadowData.x : float(1.0);
        u_xlat36 = dot(u_xlat7, vec4(0.25, 0.25, 0.25, 0.25));
    } else {
        u_xlat36 = 1.0;
    //ENDIF
    }
    u_xlat2.x = u_xlat2.x + u_xlat36;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat24 = min(u_xlat2.x, u_xlat24);
    u_xlat2.x = (u_xlatb13) ? u_xlat24 : u_xlat2.x;
    u_xlat13 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat10_4 = texture(_LightTexture0, vec2(u_xlat13));
    u_xlat2.x = u_xlat2.x * u_xlat10_4.w;
    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);
    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat6.xyz);
    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
    u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;
    u_xlat6.xyz = u_xlat5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = vec3(u_xlat35) * u_xlat6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat35 = (-u_xlat35) * 0.779083729 + 0.779083729;
    u_xlat5.xyz = vec3(u_xlat35) * u_xlat5.xyz;
    u_xlat35 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + u_xlat3.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = max(u_xlat33, 0.00100000005);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat33 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat11.x = u_xlat0.x * u_xlat0.x;
    u_xlat11.x = dot(u_xlat11.xx, vec2(u_xlat35));
    u_xlat11.x = u_xlat11.x + -0.5;
    u_xlat22 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat22 * u_xlat22;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat22 = u_xlat22 * u_xlat1.x;
    u_xlat22 = u_xlat11.x * u_xlat22 + 1.0;
    u_xlat1.x = -abs(u_xlat33) + 1.0;
    u_xlat12 = u_xlat1.x * u_xlat1.x;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat1.x = u_xlat1.x * u_xlat12;
    u_xlat11.x = u_xlat11.x * u_xlat1.x + 1.0;
    u_xlat11.x = u_xlat11.x * u_xlat22;
    u_xlat22 = u_xlat35 * u_xlat35;
    u_xlat1.x = (-u_xlat35) * u_xlat35 + 1.0;
    u_xlat12 = abs(u_xlat33) * u_xlat1.x + u_xlat22;
    u_xlat1.x = u_xlat3.x * u_xlat1.x + u_xlat22;
    u_xlat33 = abs(u_xlat33) * u_xlat1.x;
    u_xlat33 = u_xlat3.x * u_xlat12 + u_xlat33;
    u_xlat33 = u_xlat33 + 9.99999975e-06;
    u_xlat33 = 0.5 / u_xlat33;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat1.x = u_xlat14 * u_xlat22 + (-u_xlat14);
    u_xlat1.x = u_xlat1.x * u_xlat14 + 1.0;
    u_xlat22 = u_xlat22 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat22 = u_xlat22 / u_xlat1.x;
    u_xlat22 = u_xlat22 * u_xlat33;
    u_xlat22 = u_xlat22 * 3.14159274;
    u_xlat22 = max(u_xlat22, 9.99999975e-05);
    u_xlat11.y = sqrt(u_xlat22);
    u_xlat11.xy = u_xlat3.xx * u_xlat11.xy;
    u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb33 = u_xlat33!=0.0;
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat22 = u_xlat33 * u_xlat11.y;
    u_xlat1.xyz = u_xlat11.xxx * u_xlat2.xyz;
    u_xlat11.xyz = u_xlat2.xyz * vec3(u_xlat22);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat11.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (288 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 144
  Vector4 unity_WorldTransformParams at 128
  Vector4 _Control_ST at 208
  Vector4 _Splat0_ST at 224
  Vector4 _Splat1_ST at 240
  Vector4 _Splat2_ST at 256
  Vector4 _Splat3_ST at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD5.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    u_xlat0.xy = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat0.xy = input.NORMAL0.yz * float2(1.0, 0.0) + (-u_xlat0.xy);
    u_xlat3.xyz = u_xlat0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat1.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat1.xyz = float3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * (-Globals.unity_WorldTransformParams.www);
    output.TEXCOORD2.y = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat0.z;
    output.TEXCOORD2.z = u_xlat1.y;
    output.TEXCOORD3.x = u_xlat0.x;
    output.TEXCOORD4.x = u_xlat0.y;
    output.TEXCOORD3.z = u_xlat1.z;
    output.TEXCOORD4.z = u_xlat1.x;
    output.TEXCOORD3.y = u_xlat2.y;
    output.TEXCOORD4.y = u_xlat2.z;
    output.TEXCOORD6.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    output.TEXCOORD7.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 4
Set 2D Texture "_Splat0" to slot 1 sampler slot 5
Set 2D Texture "_Splat1" to slot 2 sampler slot 6
Set 2D Texture "_Splat2" to slot 3 sampler slot 7
Set 2D Texture "_Splat3" to slot 4 sampler slot 8
Set 2D Texture "_Normal0" to slot 5 sampler slot 9
Set 2D Texture "_Normal1" to slot 6 sampler slot 10
Set 2D Texture "_Normal2" to slot 7 sampler slot 11
Set 2D Texture "_Normal3" to slot 8 sampler slot 12
Set CUBE Texture "_ShadowMapTexture" to slot 9 sampler slot 1
Set 2D Texture "_LightTextureB0" to slot 10 sampler slot 3
Set CUBE Texture "_LightTexture0" to slot 11 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 12 sampler slot 0

Constant Buffer "Globals" (384 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 96
  Matrix4x4 unity_ProbeVolumeWorldToObject at 176
  Matrix4x4 unity_WorldToLight at 288
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 unity_OcclusionMaskSelector at 48
  Vector4 _LightShadowData at 64
  Vector4 unity_ShadowFadeCenterAndType at 80
  Vector4 unity_ProbeVolumeParams at 160
  Vector3 unity_ProbeVolumeSizeInv at 240
  Vector3 unity_ProbeVolumeMin at 256
  Vector4 _LightColor0 at 272
  Float _Metallic0 at 352
  Float _Metallic1 at 356
  Float _Metallic2 at 360
  Float _Metallic3 at 364
  Float _Smoothness0 at 368
  Float _Smoothness1 at 372
  Float _Smoothness2 at 376
  Float _Smoothness3 at 380
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    sampler sampler_Normal0 [[ sampler (9) ]],
    sampler sampler_Normal1 [[ sampler (10) ]],
    sampler sampler_Normal2 [[ sampler (11) ]],
    sampler sampler_Normal3 [[ sampler (12) ]],
    texture2d<float, access::sample > _Control [[ texture (0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture (2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture (3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture (4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture (5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture (6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture (7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture (8) ]] ,
    texturecube<float, access::sample > _ShadowMapTexture [[ texture (9) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture (10) ]] ,
    texturecube<float, access::sample > _LightTexture0 [[ texture (11) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (12) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    half4 u_xlat10_6;
    float4 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    bool u_xlatb10;
    float u_xlat11;
    float u_xlat16;
    float u_xlat18;
    bool u_xlatb18;
    float2 u_xlat22;
    half2 u_xlat10_22;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    u_xlat0.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat1.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = rsqrt(u_xlat25);
    u_xlat3.xyz = float3(u_xlat25) * u_xlat2.xyz;
    u_xlat4 = _Control.sample(sampler_Control, input.TEXCOORD6.xy);
    u_xlat25 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat26 = u_xlat25 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat26);
    u_xlat5 = _Splat0.sample(sampler_Splat0, input.TEXCOORD0.xy);
    u_xlat5 = u_xlat4.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * Globals._Smoothness0;
    u_xlat10_6 = half4(_Splat1.sample(sampler_Splat1, input.TEXCOORD0.zw));
    u_xlat6 = u_xlat4.yyyy * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = half4(_Splat2.sample(sampler_Splat2, input.TEXCOORD1.xy));
    u_xlat6 = u_xlat4.zzzz * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = half4(_Splat3.sample(sampler_Splat3, input.TEXCOORD1.zw));
    u_xlat6 = u_xlat4.wwww * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6.xy = _Normal0.sample(sampler_Normal0, input.TEXCOORD0.xy).yw;
    u_xlat10_22.xy = half2(_Normal1.sample(sampler_Normal1, input.TEXCOORD0.zw).yw);
    u_xlat22.xy = u_xlat4.yy * float2(u_xlat10_22.yx);
    u_xlat6.xy = u_xlat4.xx * u_xlat6.yx + u_xlat22.xy;
    u_xlat10_22.xy = half2(_Normal2.sample(sampler_Normal2, input.TEXCOORD1.xy).yw);
    u_xlat6.xy = u_xlat4.zz * float2(u_xlat10_22.yx) + u_xlat6.xy;
    u_xlat10_22.xy = half2(_Normal3.sample(sampler_Normal3, input.TEXCOORD1.zw).yw);
    u_xlat6.xy = u_xlat4.ww * float2(u_xlat10_22.yx) + u_xlat6.xy;
    u_xlat6.xy = u_xlat6.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
    u_xlat26 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat26 = min(u_xlat26, 1.0);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat6.z = sqrt(u_xlat26);
    u_xlat26 = dot(u_xlat4, float4(Globals._Metallic0, Globals._Metallic1, Globals._Metallic2, Globals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat4.xyz;
    u_xlat4.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat7.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat7.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat10 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat10 = sqrt(u_xlat10);
    u_xlat10 = (-u_xlat2.x) + u_xlat10;
    u_xlat2.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat10 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * Globals._LightShadowData.z + Globals._LightShadowData.w;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb10 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb10){
        u_xlatb18 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD5.xxx + u_xlat7.xyz;
        u_xlat7.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD5.zzz + u_xlat7.xyz;
        u_xlat7.xyz = u_xlat7.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb18)) ? u_xlat7.xyz : input.TEXCOORD5.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat7.yzw = u_xlat7.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat18 = u_xlat7.y * 0.25 + 0.75;
        u_xlat27 = Globals.unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat7.x = max(u_xlat18, u_xlat27);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xzw);
    } else {
        u_xlat7.x = float(1.0);
        u_xlat7.y = float(1.0);
        u_xlat7.z = float(1.0);
        u_xlat7.w = float(1.0);
    }
    u_xlat18 = dot(u_xlat7, Globals.unity_OcclusionMaskSelector);
    u_xlat18 = clamp(u_xlat18, 0.0f, 1.0f);
    u_xlat7.xyz = input.TEXCOORD5.xyz + (-Globals._LightPositionRange.xyz);
    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat27 = u_xlat27 * Globals._LightPositionRange.w;
    u_xlat27 = u_xlat27 * 0.970000029;
    u_xlat28 = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat7.xyz, level(0.0)).x;
    u_xlatb27 = u_xlat28<u_xlat27;
    u_xlat27 = (u_xlatb27) ? Globals._LightShadowData.x : 1.0;
    u_xlat2.x = u_xlat2.x + u_xlat27;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat18 = min(u_xlat2.x, u_xlat18);
    u_xlat2.x = (u_xlatb10) ? u_xlat18 : u_xlat2.x;
    u_xlat10 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat10 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat10)).w;
    u_xlat18 = _LightTexture0.sample(sampler_LightTexture0, u_xlat4.xyz).w;
    u_xlat10 = u_xlat18 * u_xlat10;
    u_xlat2.x = u_xlat2.x * u_xlat10;
    u_xlat4.x = dot(input.TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat4.y = dot(input.TEXCOORD3.xyz, u_xlat6.xyz);
    u_xlat4.z = dot(input.TEXCOORD4.xyz, u_xlat6.xyz);
    u_xlat2.xyz = u_xlat2.xxx * Globals._LightColor0.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat4.xyz = float3(u_xlat27) * u_xlat4.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = float3(u_xlat26) * u_xlat6.xyz + float3(0.220916301, 0.220916301, 0.220916301);
    u_xlat26 = (-u_xlat26) * 0.779083729 + 0.779083729;
    u_xlat5.xyz = float3(u_xlat26) * u_xlat5.xyz;
    u_xlat26 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat24) + u_xlat3.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat11 = clamp(u_xlat11, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat8.x = u_xlat0.x * u_xlat0.x;
    u_xlat8.x = dot(u_xlat8.xx, float2(u_xlat26));
    u_xlat8.x = u_xlat8.x + -0.5;
    u_xlat16 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat16 * u_xlat16;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat1.x;
    u_xlat16 = u_xlat8.x * u_xlat16 + 1.0;
    u_xlat1.x = -abs(u_xlat24) + 1.0;
    u_xlat9 = u_xlat1.x * u_xlat1.x;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat8.x = u_xlat8.x * u_xlat1.x + 1.0;
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat26 * u_xlat26;
    u_xlat1.x = (-u_xlat26) * u_xlat26 + 1.0;
    u_xlat9 = abs(u_xlat24) * u_xlat1.x + u_xlat16;
    u_xlat1.x = u_xlat3.x * u_xlat1.x + u_xlat16;
    u_xlat24 = abs(u_xlat24) * u_xlat1.x;
    u_xlat24 = u_xlat3.x * u_xlat9 + u_xlat24;
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat1.x = u_xlat11 * u_xlat16 + (-u_xlat11);
    u_xlat1.x = u_xlat1.x * u_xlat11 + 1.0;
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat16 = u_xlat16 / u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat8.y = sqrt(u_xlat16);
    u_xlat8.xy = u_xlat3.xx * u_xlat8.xy;
    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat8.y;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz;
    u_xlat8.xyz = u_xlat2.xyz * float3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    output.SV_Target0.xyz = float3(u_xlat25) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec2 vs_TEXCOORD6;
out vec2 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlat0.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
    u_xlat0.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xy);
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD2.y = u_xlat2.x;
    vs_TEXCOORD2.x = u_xlat0.z;
    vs_TEXCOORD2.z = u_xlat1.y;
    vs_TEXCOORD3.x = u_xlat0.x;
    vs_TEXCOORD4.x = u_xlat0.y;
    vs_TEXCOORD3.z = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat1.x;
    vs_TEXCOORD3.y = u_xlat2.y;
    vs_TEXCOORD4.y = u_xlat2.z;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    vs_TEXCOORD7.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  sampler2D _Normal0;
uniform  sampler2D _Normal1;
uniform  sampler2D _Normal2;
uniform  sampler2D _Normal3;
uniform  samplerCube _ShadowMapTexture;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
in  vec2 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat16_4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat10_5;
vec4 u_xlat6;
vec3 u_xlat16_6;
vec4 u_xlat10_6;
vec4 u_xlat7;
vec4 u_xlat10_7;
vec3 u_xlat8;
float u_xlat9;
float u_xlat10;
float u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
float u_xlat16;
float u_xlat18;
bool u_xlatb18;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
float u_xlat16_25;
float u_xlat26;
float u_xlat16_26;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat3.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat10_4 = texture(_Control, vs_TEXCOORD6.xy);
    u_xlat16_25 = dot(u_xlat10_4, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_26 = u_xlat16_25 + 0.00100000005;
    u_xlat16_4 = u_xlat10_4 / vec4(u_xlat16_26);
    u_xlat10_5 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat5 = u_xlat16_4.xxxx * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness0;
    u_xlat10_6 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat6 = u_xlat16_4.yyyy * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat6 = u_xlat16_4.zzzz * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat6 = u_xlat16_4.wwww * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = texture(_Normal0, vs_TEXCOORD0.xy);
    u_xlat10_7 = texture(_Normal1, vs_TEXCOORD0.zw);
    u_xlat16_6.xz = u_xlat16_4.yy * u_xlat10_7.wy;
    u_xlat16_6.xy = u_xlat16_4.xx * u_xlat10_6.wy + u_xlat16_6.xz;
    u_xlat10_7 = texture(_Normal2, vs_TEXCOORD1.xy);
    u_xlat16_6.xy = u_xlat16_4.zz * u_xlat10_7.wy + u_xlat16_6.xy;
    u_xlat10_7 = texture(_Normal3, vs_TEXCOORD1.zw);
    u_xlat16_6.xy = u_xlat16_4.ww * u_xlat10_7.wy + u_xlat16_6.xy;
    u_xlat6.xy = u_xlat16_6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat26 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat26 = min(u_xlat26, 1.0);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat6.z = sqrt(u_xlat26);
    u_xlat26 = dot(u_xlat16_4, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlat4.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat10 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat10 = sqrt(u_xlat10);
    u_xlat10 = (-u_xlat2.x) + u_xlat10;
    u_xlat2.x = unity_ShadowFadeCenterAndType.w * u_xlat10 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlatb10 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb10){
        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat7.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat7.xyz;
        u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb18)) ? u_xlat7.xyz : vs_TEXCOORD5.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat7.yzw = u_xlat7.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat18 = u_xlat7.y * 0.25 + 0.75;
        u_xlat27 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat7.x = max(u_xlat18, u_xlat27);
        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xzw);
    } else {
        u_xlat7.x = float(1.0);
        u_xlat7.y = float(1.0);
        u_xlat7.z = float(1.0);
        u_xlat7.w = float(1.0);
    //ENDIF
    }
    u_xlat18 = dot(u_xlat7, unity_OcclusionMaskSelector);
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat27 = u_xlat27 * _LightPositionRange.w;
    u_xlat27 = u_xlat27 * 0.970000029;
    u_xlat10_7 = textureLod(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlatb27 = u_xlat10_7.x<u_xlat27;
    u_xlat27 = (u_xlatb27) ? _LightShadowData.x : 1.0;
    u_xlat2.x = u_xlat2.x + u_xlat27;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat18 = min(u_xlat2.x, u_xlat18);
    u_xlat2.x = (u_xlatb10) ? u_xlat18 : u_xlat2.x;
    u_xlat10 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat10_7 = texture(_LightTextureB0, vec2(u_xlat10));
    u_xlat10_4 = texture(_LightTexture0, u_xlat4.xyz);
    u_xlat16_10 = u_xlat10_4.w * u_xlat10_7.w;
    u_xlat2.x = u_xlat2.x * u_xlat16_10;
    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);
    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat6.xyz);
    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat6.xyz = u_xlat5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = vec3(u_xlat26) * u_xlat6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat26 = (-u_xlat26) * 0.779083729 + 0.779083729;
    u_xlat5.xyz = vec3(u_xlat26) * u_xlat5.xyz;
    u_xlat26 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat3.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat8.x = u_xlat0.x * u_xlat0.x;
    u_xlat8.x = dot(u_xlat8.xx, vec2(u_xlat26));
    u_xlat8.x = u_xlat8.x + -0.5;
    u_xlat16 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat16 * u_xlat16;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat1.x;
    u_xlat16 = u_xlat8.x * u_xlat16 + 1.0;
    u_xlat1.x = -abs(u_xlat24) + 1.0;
    u_xlat9 = u_xlat1.x * u_xlat1.x;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat8.x = u_xlat8.x * u_xlat1.x + 1.0;
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat26 * u_xlat26;
    u_xlat1.x = (-u_xlat26) * u_xlat26 + 1.0;
    u_xlat9 = abs(u_xlat24) * u_xlat1.x + u_xlat16;
    u_xlat1.x = u_xlat3.x * u_xlat1.x + u_xlat16;
    u_xlat24 = abs(u_xlat24) * u_xlat1.x;
    u_xlat24 = u_xlat3.x * u_xlat9 + u_xlat24;
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat1.x = u_xlat11 * u_xlat16 + (-u_xlat11);
    u_xlat1.x = u_xlat1.x * u_xlat11 + 1.0;
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat16 = u_xlat16 / u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat8.y = sqrt(u_xlat16);
    u_xlat8.xy = u_xlat3.xx * u_xlat8.xy;
    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat8.y;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz;
    u_xlat8.xyz = u_xlat2.xyz * vec3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_25) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: POINT_COOKIE SHADOWS_CUBE SHADOWS_SOFT _TERRAIN_NORMAL_MAP 
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (288 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 144
  Vector4 unity_WorldTransformParams at 128
  Vector4 _Control_ST at 208
  Vector4 _Splat0_ST at 224
  Vector4 _Splat1_ST at 240
  Vector4 _Splat2_ST at 256
  Vector4 _Splat3_ST at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD5.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    u_xlat0.xy = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat0.xy = input.NORMAL0.yz * float2(1.0, 0.0) + (-u_xlat0.xy);
    u_xlat3.xyz = u_xlat0.yyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat1.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat1.xyz = float3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * (-Globals.unity_WorldTransformParams.www);
    output.TEXCOORD2.y = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat0.z;
    output.TEXCOORD2.z = u_xlat1.y;
    output.TEXCOORD3.x = u_xlat0.x;
    output.TEXCOORD4.x = u_xlat0.y;
    output.TEXCOORD3.z = u_xlat1.z;
    output.TEXCOORD4.z = u_xlat1.x;
    output.TEXCOORD3.y = u_xlat2.y;
    output.TEXCOORD4.y = u_xlat2.z;
    output.TEXCOORD6.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    output.TEXCOORD7.xy = float2(0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 4
Set 2D Texture "_Splat0" to slot 1 sampler slot 5
Set 2D Texture "_Splat1" to slot 2 sampler slot 6
Set 2D Texture "_Splat2" to slot 3 sampler slot 7
Set 2D Texture "_Splat3" to slot 4 sampler slot 8
Set 2D Texture "_Normal0" to slot 5 sampler slot 9
Set 2D Texture "_Normal1" to slot 6 sampler slot 10
Set 2D Texture "_Normal2" to slot 7 sampler slot 11
Set 2D Texture "_Normal3" to slot 8 sampler slot 12
Set CUBE Texture "_ShadowMapTexture" to slot 9 sampler slot 1
Set 2D Texture "_LightTextureB0" to slot 10 sampler slot 3
Set CUBE Texture "_LightTexture0" to slot 11 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 12 sampler slot 0

Constant Buffer "Globals" (384 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 96
  Matrix4x4 unity_ProbeVolumeWorldToObject at 176
  Matrix4x4 unity_WorldToLight at 288
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 unity_OcclusionMaskSelector at 48
  Vector4 _LightShadowData at 64
  Vector4 unity_ShadowFadeCenterAndType at 80
  Vector4 unity_ProbeVolumeParams at 160
  Vector3 unity_ProbeVolumeSizeInv at 240
  Vector3 unity_ProbeVolumeMin at 256
  Vector4 _LightColor0 at 272
  Float _Metallic0 at 352
  Float _Metallic1 at 356
  Float _Metallic2 at 360
  Float _Metallic3 at 364
  Float _Smoothness0 at 368
  Float _Smoothness1 at 372
  Float _Smoothness2 at 376
  Float _Smoothness3 at 380
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    sampler sampler_Normal0 [[ sampler (9) ]],
    sampler sampler_Normal1 [[ sampler (10) ]],
    sampler sampler_Normal2 [[ sampler (11) ]],
    sampler sampler_Normal3 [[ sampler (12) ]],
    texture2d<float, access::sample > _Control [[ texture (0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture (2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture (3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture (4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture (5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture (6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture (7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture (8) ]] ,
    texturecube<float, access::sample > _ShadowMapTexture [[ texture (9) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture (10) ]] ,
    texturecube<float, access::sample > _LightTexture0 [[ texture (11) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (12) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    half4 u_xlat10_6;
    float4 u_xlat7;
    bool4 u_xlatb7;
    float4 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float u_xlat11;
    float u_xlat12;
    bool u_xlatb12;
    float u_xlat13;
    float u_xlat20;
    float u_xlat22;
    bool u_xlatb22;
    float2 u_xlat26;
    half2 u_xlat10_26;
    float u_xlat30;
    bool u_xlatb30;
    float u_xlat31;
    float u_xlat32;
    float u_xlat33;
    bool u_xlatb33;
    u_xlat0.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat1.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD5.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = rsqrt(u_xlat31);
    u_xlat3.xyz = float3(u_xlat31) * u_xlat2.xyz;
    u_xlat4 = _Control.sample(sampler_Control, input.TEXCOORD6.xy);
    u_xlat31 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat32 = u_xlat31 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat32);
    u_xlat5 = _Splat0.sample(sampler_Splat0, input.TEXCOORD0.xy);
    u_xlat5 = u_xlat4.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * Globals._Smoothness0;
    u_xlat10_6 = half4(_Splat1.sample(sampler_Splat1, input.TEXCOORD0.zw));
    u_xlat6 = u_xlat4.yyyy * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = half4(_Splat2.sample(sampler_Splat2, input.TEXCOORD1.xy));
    u_xlat6 = u_xlat4.zzzz * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = half4(_Splat3.sample(sampler_Splat3, input.TEXCOORD1.zw));
    u_xlat6 = u_xlat4.wwww * float4(u_xlat10_6);
    u_xlat6.w = u_xlat6.w * Globals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6.xy = _Normal0.sample(sampler_Normal0, input.TEXCOORD0.xy).yw;
    u_xlat10_26.xy = half2(_Normal1.sample(sampler_Normal1, input.TEXCOORD0.zw).yw);
    u_xlat26.xy = u_xlat4.yy * float2(u_xlat10_26.yx);
    u_xlat6.xy = u_xlat4.xx * u_xlat6.yx + u_xlat26.xy;
    u_xlat10_26.xy = half2(_Normal2.sample(sampler_Normal2, input.TEXCOORD1.xy).yw);
    u_xlat6.xy = u_xlat4.zz * float2(u_xlat10_26.yx) + u_xlat6.xy;
    u_xlat10_26.xy = half2(_Normal3.sample(sampler_Normal3, input.TEXCOORD1.zw).yw);
    u_xlat6.xy = u_xlat4.ww * float2(u_xlat10_26.yx) + u_xlat6.xy;
    u_xlat6.xy = u_xlat6.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
    u_xlat32 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat6.z = sqrt(u_xlat32);
    u_xlat32 = dot(u_xlat4, float4(Globals._Metallic0, Globals._Metallic1, Globals._Metallic2, Globals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz * input.TEXCOORD5.xxx + u_xlat4.xyz;
    u_xlat4.xyz = Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz * input.TEXCOORD5.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat7.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat7.xyz = input.TEXCOORD5.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat12 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat2.x) + u_xlat12;
    u_xlat2.x = Globals.unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * Globals._LightShadowData.z + Globals._LightShadowData.w;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb12 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb22 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = input.TEXCOORD5.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD5.xxx + u_xlat7.xyz;
        u_xlat7.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD5.zzz + u_xlat7.xyz;
        u_xlat7.xyz = u_xlat7.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb22)) ? u_xlat7.xyz : input.TEXCOORD5.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat7.yzw = u_xlat7.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat22 = u_xlat7.y * 0.25 + 0.75;
        u_xlat33 = Globals.unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat7.x = max(u_xlat22, u_xlat33);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xzw);
    } else {
        u_xlat7.x = float(1.0);
        u_xlat7.y = float(1.0);
        u_xlat7.z = float(1.0);
        u_xlat7.w = float(1.0);
    }
    u_xlat22 = dot(u_xlat7, Globals.unity_OcclusionMaskSelector);
    u_xlat22 = clamp(u_xlat22, 0.0f, 1.0f);
    u_xlatb33 = u_xlat2.x<0.99000001;
    if(u_xlatb33){
        u_xlat7.xyz = input.TEXCOORD5.xyz + (-Globals._LightPositionRange.xyz);
        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat33 = u_xlat33 * Globals._LightPositionRange.w;
        u_xlat33 = u_xlat33 * 0.970000029;
        u_xlat8.xyz = u_xlat7.xyz + float3(0.0078125, 0.0078125, 0.0078125);
        u_xlat8.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat8.xyz, level(0.0)).x;
        u_xlat9.xyz = u_xlat7.xyz + float3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat8.y = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat9.xyz, level(0.0)).x;
        u_xlat9.xyz = u_xlat7.xyz + float3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat8.z = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat9.xyz, level(0.0)).x;
        u_xlat7.xyz = u_xlat7.xyz + float3(0.0078125, -0.0078125, -0.0078125);
        u_xlat8.w = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat7.xyz, level(0.0)).x;
        u_xlatb7 = (u_xlat8<float4(u_xlat33));
        u_xlat7.x = (u_xlatb7.x) ? Globals._LightShadowData.x : float(1.0);
        u_xlat7.y = (u_xlatb7.y) ? Globals._LightShadowData.x : float(1.0);
        u_xlat7.z = (u_xlatb7.z) ? Globals._LightShadowData.x : float(1.0);
        u_xlat7.w = (u_xlatb7.w) ? Globals._LightShadowData.x : float(1.0);
        u_xlat33 = dot(u_xlat7, float4(0.25, 0.25, 0.25, 0.25));
    } else {
        u_xlat33 = 1.0;
    }
    u_xlat2.x = u_xlat2.x + u_xlat33;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat22 = min(u_xlat2.x, u_xlat22);
    u_xlat2.x = (u_xlatb12) ? u_xlat22 : u_xlat2.x;
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat12)).w;
    u_xlat22 = _LightTexture0.sample(sampler_LightTexture0, u_xlat4.xyz).w;
    u_xlat12 = u_xlat22 * u_xlat12;
    u_xlat2.x = u_xlat2.x * u_xlat12;
    u_xlat4.x = dot(input.TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat4.y = dot(input.TEXCOORD3.xyz, u_xlat6.xyz);
    u_xlat4.z = dot(input.TEXCOORD4.xyz, u_xlat6.xyz);
    u_xlat2.xyz = u_xlat2.xxx * Globals._LightColor0.xyz;
    u_xlat33 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat4.xyz = float3(u_xlat33) * u_xlat4.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = float3(u_xlat32) * u_xlat6.xyz + float3(0.220916301, 0.220916301, 0.220916301);
    u_xlat32 = (-u_xlat32) * 0.779083729 + 0.779083729;
    u_xlat5.xyz = float3(u_xlat32) * u_xlat5.xyz;
    u_xlat32 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat30) + u_xlat3.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat0.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat10.x = u_xlat0.x * u_xlat0.x;
    u_xlat10.x = dot(u_xlat10.xx, float2(u_xlat32));
    u_xlat10.x = u_xlat10.x + -0.5;
    u_xlat20 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat20 * u_xlat20;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat1.x;
    u_xlat20 = u_xlat10.x * u_xlat20 + 1.0;
    u_xlat1.x = -abs(u_xlat30) + 1.0;
    u_xlat11 = u_xlat1.x * u_xlat1.x;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat1.x = u_xlat1.x * u_xlat11;
    u_xlat10.x = u_xlat10.x * u_xlat1.x + 1.0;
    u_xlat10.x = u_xlat10.x * u_xlat20;
    u_xlat20 = u_xlat32 * u_xlat32;
    u_xlat1.x = (-u_xlat32) * u_xlat32 + 1.0;
    u_xlat11 = abs(u_xlat30) * u_xlat1.x + u_xlat20;
    u_xlat1.x = u_xlat3.x * u_xlat1.x + u_xlat20;
    u_xlat30 = abs(u_xlat30) * u_xlat1.x;
    u_xlat30 = u_xlat3.x * u_xlat11 + u_xlat30;
    u_xlat30 = u_xlat30 + 9.99999975e-06;
    u_xlat30 = 0.5 / u_xlat30;
    u_xlat20 = u_xlat20 * u_xlat20;
    u_xlat1.x = u_xlat13 * u_xlat20 + (-u_xlat13);
    u_xlat1.x = u_xlat1.x * u_xlat13 + 1.0;
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat20 = u_xlat20 / u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat30;
    u_xlat20 = u_xlat20 * 3.14159274;
    u_xlat20 = max(u_xlat20, 9.99999975e-05);
    u_xlat10.y = sqrt(u_xlat20);
    u_xlat10.xy = u_xlat3.xx * u_xlat10.xy;
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb30 = u_xlat30!=0.0;
    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
    u_xlat20 = u_xlat30 * u_xlat10.y;
    u_xlat1.xyz = u_xlat10.xxx * u_xlat2.xyz;
    u_xlat10.xyz = u_xlat2.xyz * float3(u_xlat20);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat10.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    output.SV_Target0.xyz = float3(u_xlat31) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec2 vs_TEXCOORD6;
out vec2 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlat0.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
    u_xlat0.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xy);
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD2.y = u_xlat2.x;
    vs_TEXCOORD2.x = u_xlat0.z;
    vs_TEXCOORD2.z = u_xlat1.y;
    vs_TEXCOORD3.x = u_xlat0.x;
    vs_TEXCOORD4.x = u_xlat0.y;
    vs_TEXCOORD3.z = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat1.x;
    vs_TEXCOORD3.y = u_xlat2.y;
    vs_TEXCOORD4.y = u_xlat2.z;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    vs_TEXCOORD7.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  sampler2D _Normal0;
uniform  sampler2D _Normal1;
uniform  sampler2D _Normal2;
uniform  sampler2D _Normal3;
uniform  samplerCube _ShadowMapTexture;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
in  vec2 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat16_4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat10_5;
vec4 u_xlat6;
vec3 u_xlat16_6;
vec4 u_xlat10_6;
vec4 u_xlat7;
vec4 u_xlat10_7;
bvec4 u_xlatb7;
vec3 u_xlat8;
vec4 u_xlat10_8;
vec4 u_xlat10_9;
vec4 u_xlat10_10;
vec3 u_xlat11;
float u_xlat12;
float u_xlat13;
float u_xlat16_13;
bool u_xlatb13;
float u_xlat14;
vec3 u_xlat19;
float u_xlat22;
float u_xlat24;
bool u_xlatb24;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
float u_xlat16_34;
float u_xlat35;
float u_xlat16_35;
float u_xlat36;
bool u_xlatb36;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat1.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat34 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = vec3(u_xlat34) * u_xlat2.xyz;
    u_xlat10_4 = texture(_Control, vs_TEXCOORD6.xy);
    u_xlat16_34 = dot(u_xlat10_4, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_35 = u_xlat16_34 + 0.00100000005;
    u_xlat16_4 = u_xlat10_4 / vec4(u_xlat16_35);
    u_xlat10_5 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat5 = u_xlat16_4.xxxx * u_xlat10_5;
    u_xlat5.w = u_xlat5.w * _Smoothness0;
    u_xlat10_6 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat6 = u_xlat16_4.yyyy * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat6 = u_xlat16_4.zzzz * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat6 = u_xlat16_4.wwww * u_xlat10_6;
    u_xlat6.w = u_xlat6.w * _Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat10_6 = texture(_Normal0, vs_TEXCOORD0.xy);
    u_xlat10_7 = texture(_Normal1, vs_TEXCOORD0.zw);
    u_xlat16_6.xz = u_xlat16_4.yy * u_xlat10_7.wy;
    u_xlat16_6.xy = u_xlat16_4.xx * u_xlat10_6.wy + u_xlat16_6.xz;
    u_xlat10_7 = texture(_Normal2, vs_TEXCOORD1.xy);
    u_xlat16_6.xy = u_xlat16_4.zz * u_xlat10_7.wy + u_xlat16_6.xy;
    u_xlat10_7 = texture(_Normal3, vs_TEXCOORD1.zw);
    u_xlat16_6.xy = u_xlat16_4.ww * u_xlat10_7.wy + u_xlat16_6.xy;
    u_xlat6.xy = u_xlat16_6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat35 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat35 = min(u_xlat35, 1.0);
    u_xlat35 = (-u_xlat35) + 1.0;
    u_xlat6.z = sqrt(u_xlat35);
    u_xlat35 = dot(u_xlat16_4, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlat4.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat13 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat13 = sqrt(u_xlat13);
    u_xlat13 = (-u_xlat2.x) + u_xlat13;
    u_xlat2.x = unity_ShadowFadeCenterAndType.w * u_xlat13 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlatb13 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb13){
        u_xlatb24 = unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD5.xxx + u_xlat7.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.zzz + u_xlat7.xyz;
        u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb24)) ? u_xlat7.xyz : vs_TEXCOORD5.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat7.yzw = u_xlat7.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat24 = u_xlat7.y * 0.25 + 0.75;
        u_xlat36 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat7.x = max(u_xlat24, u_xlat36);
        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xzw);
    } else {
        u_xlat7.x = float(1.0);
        u_xlat7.y = float(1.0);
        u_xlat7.z = float(1.0);
        u_xlat7.w = float(1.0);
    //ENDIF
    }
    u_xlat24 = dot(u_xlat7, unity_OcclusionMaskSelector);
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
    u_xlatb36 = u_xlat2.x<0.99000001;
    if(u_xlatb36){
        u_xlat7.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);
        u_xlat36 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat36 = sqrt(u_xlat36);
        u_xlat36 = u_xlat36 * _LightPositionRange.w;
        u_xlat36 = u_xlat36 * 0.970000029;
        u_xlat8.xyz = u_xlat7.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
        u_xlat10_8 = textureLod(_ShadowMapTexture, u_xlat8.xyz, 0.0);
        u_xlat19.xyz = u_xlat7.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat10_9 = textureLod(_ShadowMapTexture, u_xlat19.xyz, 0.0);
        u_xlat19.xyz = u_xlat7.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat10_10 = textureLod(_ShadowMapTexture, u_xlat19.xyz, 0.0);
        u_xlat7.xyz = u_xlat7.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
        u_xlat7 = textureLod(_ShadowMapTexture, u_xlat7.xyz, 0.0).yzwx;
        u_xlat7.x = u_xlat10_8.x;
        u_xlat7.y = u_xlat10_9.x;
        u_xlat7.z = u_xlat10_10.x;
        u_xlatb7 = lessThan(u_xlat7, vec4(u_xlat36));
        u_xlat7.x = (u_xlatb7.x) ? _LightShadowData.x : float(1.0);
        u_xlat7.y = (u_xlatb7.y) ? _LightShadowData.x : float(1.0);
        u_xlat7.z = (u_xlatb7.z) ? _LightShadowData.x : float(1.0);
        u_xlat7.w = (u_xlatb7.w) ? _LightShadowData.x : float(1.0);
        u_xlat36 = dot(u_xlat7, vec4(0.25, 0.25, 0.25, 0.25));
    } else {
        u_xlat36 = 1.0;
    //ENDIF
    }
    u_xlat2.x = u_xlat2.x + u_xlat36;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat24 = min(u_xlat2.x, u_xlat24);
    u_xlat2.x = (u_xlatb13) ? u_xlat24 : u_xlat2.x;
    u_xlat13 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat10_7 = texture(_LightTextureB0, vec2(u_xlat13));
    u_xlat10_4 = texture(_LightTexture0, u_xlat4.xyz);
    u_xlat16_13 = u_xlat10_4.w * u_xlat10_7.w;
    u_xlat2.x = u_xlat2.x * u_xlat16_13;
    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);
    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat6.xyz);
    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
    u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;
    u_xlat6.xyz = u_xlat5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = vec3(u_xlat35) * u_xlat6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat35 = (-u_xlat35) * 0.779083729 + 0.779083729;
    u_xlat5.xyz = vec3(u_xlat35) * u_xlat5.xyz;
    u_xlat35 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + u_xlat3.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = max(u_xlat33, 0.00100000005);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat33 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat11.x = u_xlat0.x * u_xlat0.x;
    u_xlat11.x = dot(u_xlat11.xx, vec2(u_xlat35));
    u_xlat11.x = u_xlat11.x + -0.5;
    u_xlat22 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat22 * u_xlat22;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat22 = u_xlat22 * u_xlat1.x;
    u_xlat22 = u_xlat11.x * u_xlat22 + 1.0;
    u_xlat1.x = -abs(u_xlat33) + 1.0;
    u_xlat12 = u_xlat1.x * u_xlat1.x;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat1.x = u_xlat1.x * u_xlat12;
    u_xlat11.x = u_xlat11.x * u_xlat1.x + 1.0;
    u_xlat11.x = u_xlat11.x * u_xlat22;
    u_xlat22 = u_xlat35 * u_xlat35;
    u_xlat1.x = (-u_xlat35) * u_xlat35 + 1.0;
    u_xlat12 = abs(u_xlat33) * u_xlat1.x + u_xlat22;
    u_xlat1.x = u_xlat3.x * u_xlat1.x + u_xlat22;
    u_xlat33 = abs(u_xlat33) * u_xlat1.x;
    u_xlat33 = u_xlat3.x * u_xlat12 + u_xlat33;
    u_xlat33 = u_xlat33 + 9.99999975e-06;
    u_xlat33 = 0.5 / u_xlat33;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat1.x = u_xlat14 * u_xlat22 + (-u_xlat14);
    u_xlat1.x = u_xlat1.x * u_xlat14 + 1.0;
    u_xlat22 = u_xlat22 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat22 = u_xlat22 / u_xlat1.x;
    u_xlat22 = u_xlat22 * u_xlat33;
    u_xlat22 = u_xlat22 * 3.14159274;
    u_xlat22 = max(u_xlat22, 9.99999975e-05);
    u_xlat11.y = sqrt(u_xlat22);
    u_xlat11.xy = u_xlat3.xx * u_xlat11.xy;
    u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb33 = u_xlat33!=0.0;
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat22 = u_xlat33 * u_xlat11.y;
    u_xlat1.xyz = u_xlat11.xxx * u_xlat2.xyz;
    u_xlat11.xyz = u_xlat2.xyz * vec3(u_xlat22);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat11.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

 }
 Pass {
  Name "DEFERRED"
  Tags { "LIGHTMODE"="DEFERRED" "QUEUE"="Geometry-100" "RenderType"="Opaque" }
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
No keywords set in this variant.
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (336 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 64
  Matrix4x4 unity_WorldToObject at 128
  Matrix4x4 unity_MatrixVP at 192
  Vector4 unity_SHBr at 0
  Vector4 unity_SHBg at 16
  Vector4 unity_SHBb at 32
  Vector4 unity_SHC at 48
  Vector4 _Control_ST at 256
  Vector4 _Splat0_ST at 272
  Vector4 _Splat1_ST at 288
  Vector4 _Splat2_ST at 304
  Vector4 _Splat3_ST at 320
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float3 TEXCOORD7 [[ user(TEXCOORD7) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD3.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat0.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD2.xyz = u_xlat0.xyz;
    output.TEXCOORD4.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat6 = u_xlat0.y * u_xlat0.y;
    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(Globals.unity_SHBr, u_xlat1);
    u_xlat0.y = dot(Globals.unity_SHBg, u_xlat1);
    u_xlat0.z = dot(Globals.unity_SHBb, u_xlat1);
    output.TEXCOORD7.xyz = Globals.unity_SHC.xyz * float3(u_xlat6) + u_xlat0.xyz;
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 1
Set 2D Texture "_Splat0" to slot 1 sampler slot 2
Set 2D Texture "_Splat1" to slot 2 sampler slot 3
Set 2D Texture "_Splat2" to slot 3 sampler slot 4
Set 2D Texture "_Splat3" to slot 4 sampler slot 5
Set 3D Texture "unity_ProbeVolumeSH" to slot 5 sampler slot 0

Constant Buffer "Globals" (192 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Float _Metallic0 at 160
  Float _Metallic1 at 164
  Float _Metallic2 at 168
  Float _Metallic3 at 172
  Float _Smoothness0 at 176
  Float _Smoothness1 at 180
  Float _Smoothness2 at 184
  Float _Smoothness3 at 188
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD7 [[ user(TEXCOORD7) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
    float4 SV_Target1 [[ color(1) ]];
    float4 SV_Target2 [[ color(2) ]];
    float4 SV_Target3 [[ color(3) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_Control [[ sampler (1) ]],
    sampler sampler_Splat0 [[ sampler (2) ]],
    sampler sampler_Splat1 [[ sampler (3) ]],
    sampler sampler_Splat2 [[ sampler (4) ]],
    sampler sampler_Splat3 [[ sampler (5) ]],
    texture2d<float, access::sample > _Control [[ texture (0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture (2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture (3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture (4) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    half4 u_xlat10_3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    bool u_xlatb7;
    float3 u_xlat8;
    float u_xlat14;
    float u_xlat21;
    u_xlat0 = _Control.sample(sampler_Control, input.TEXCOORD4.xy);
    u_xlat1 = dot(u_xlat0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat8.x = u_xlat1 + 0.00100000005;
    u_xlat0 = u_xlat0 / u_xlat8.xxxx;
    u_xlat2 = _Splat0.sample(sampler_Splat0, input.TEXCOORD0.xy);
    u_xlat2 = u_xlat0.xxxx * u_xlat2;
    u_xlat2.w = u_xlat2.w * Globals._Smoothness0;
    u_xlat10_3 = half4(_Splat1.sample(sampler_Splat1, input.TEXCOORD0.zw));
    u_xlat3 = u_xlat0.yyyy * float4(u_xlat10_3);
    u_xlat3.w = u_xlat3.w * Globals._Smoothness1;
    u_xlat2 = u_xlat2 + u_xlat3;
    u_xlat10_3 = half4(_Splat2.sample(sampler_Splat2, input.TEXCOORD1.xy));
    u_xlat3 = u_xlat0.zzzz * float4(u_xlat10_3);
    u_xlat3.w = u_xlat3.w * Globals._Smoothness2;
    u_xlat2 = u_xlat2 + u_xlat3;
    u_xlat10_3 = half4(_Splat3.sample(sampler_Splat3, input.TEXCOORD1.zw));
    u_xlat3 = u_xlat0.wwww * float4(u_xlat10_3);
    u_xlat3.w = u_xlat3.w * Globals._Smoothness3;
    u_xlat2 = u_xlat2 + u_xlat3;
    u_xlat0.x = dot(u_xlat0, float4(Globals._Metallic0, Globals._Metallic1, Globals._Metallic2, Globals._Metallic3));
    u_xlatb7 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb7){
        u_xlatb7 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = input.TEXCOORD3.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD3.xxx + u_xlat8.xyz;
        u_xlat8.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD3.zzz + u_xlat8.xyz;
        u_xlat8.xyz = u_xlat8.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb7)) ? u_xlat8.xyz : input.TEXCOORD3.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat7.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat7.x = u_xlat3.y * 0.25;
        u_xlat14 = Globals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat21 = (-Globals.unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat7.x = max(u_xlat14, u_xlat7.x);
        u_xlat3.x = min(u_xlat21, u_xlat7.x);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat7.xyz = u_xlat3.xzw + float3(0.25, 0.0, 0.0);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat3.xzw + float3(0.5, 0.0, 0.0);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat6.xyz = input.TEXCOORD2.xyz;
        u_xlat6.w = 1.0;
        u_xlat4.x = dot(u_xlat4, u_xlat6);
        u_xlat4.y = dot(u_xlat5, u_xlat6);
        u_xlat4.z = dot(u_xlat3, u_xlat6);
    } else {
        u_xlat3.xyz = input.TEXCOORD2.xyz;
        u_xlat3.w = 1.0;
        u_xlat4.x = dot(Globals.unity_SHAr, u_xlat3);
        u_xlat4.y = dot(Globals.unity_SHAg, u_xlat3);
        u_xlat4.z = dot(Globals.unity_SHAb, u_xlat3);
    }
    u_xlat7.xyz = u_xlat4.xyz + input.TEXCOORD7.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(1.05499995, 1.05499995, 1.05499995) + float3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat8.xyz = u_xlat2.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat8.xyz + float3(0.220916301, 0.220916301, 0.220916301);
    u_xlat0.x = (-u_xlat0.x) * 0.779083729 + 0.779083729;
    u_xlat8.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat8.xyz;
    u_xlat2.xyz = input.TEXCOORD2.xyz * float3(0.5, 0.5, 0.5) + float3(0.5, 0.5, 0.5);
    u_xlat0.xyz = exp2((-u_xlat0.xyz));
    output.SV_Target0.xyz = float3(u_xlat1) * u_xlat8.xyz;
    u_xlat3.w = u_xlat2.w;
    output.SV_Target1 = float4(u_xlat1) * u_xlat3;
    output.SV_Target2.xyz = float3(u_xlat1) * u_xlat2.xyz;
    u_xlat0.w = 1.0;
    output.SV_Target3 = float4(u_xlat1) * u_xlat0;
    output.SV_Target0.w = 1.0;
    output.SV_Target2.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
out vec4 vs_TEXCOORD6;
out vec3 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat6 = u_xlat0.y * u_xlat0.y;
    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(unity_SHBr, u_xlat1);
    u_xlat0.y = dot(unity_SHBg, u_xlat1);
    u_xlat0.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD7;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
vec4 u_xlat16_0;
vec4 u_xlat10_0;
float u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat10_5;
vec4 u_xlat6;
vec3 u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
float u_xlat16_8;
float u_xlat14;
float u_xlat21;
void main()
{
    u_xlat10_0 = texture(_Control, vs_TEXCOORD4.xy);
    u_xlat16_1 = dot(u_xlat10_0, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_8 = u_xlat16_1 + 0.00100000005;
    u_xlat16_0 = u_xlat10_0 / vec4(u_xlat16_8);
    u_xlat10_2 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat2 = u_xlat16_0.xxxx * u_xlat10_2;
    u_xlat2.w = u_xlat2.w * _Smoothness0;
    u_xlat10_3 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat3 = u_xlat16_0.yyyy * u_xlat10_3;
    u_xlat3.w = u_xlat3.w * _Smoothness1;
    u_xlat2 = u_xlat2 + u_xlat3;
    u_xlat10_3 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat3 = u_xlat16_0.zzzz * u_xlat10_3;
    u_xlat3.w = u_xlat3.w * _Smoothness2;
    u_xlat2 = u_xlat2 + u_xlat3;
    u_xlat10_3 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat3 = u_xlat16_0.wwww * u_xlat10_3;
    u_xlat3.w = u_xlat3.w * _Smoothness3;
    u_xlat2 = u_xlat2 + u_xlat3;
    u_xlat0.x = dot(u_xlat16_0, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlatb7 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb7){
        u_xlatb7 = unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat8.xyz;
        u_xlat8.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat8.xyz;
        u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb7)) ? u_xlat8.xyz : vs_TEXCOORD3.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat7.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat7.x = u_xlat3.y * 0.25;
        u_xlat14 = unity_ProbeVolumeParams.z * 0.5;
        u_xlat21 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat7.x = max(u_xlat14, u_xlat7.x);
        u_xlat3.x = min(u_xlat21, u_xlat7.x);
        u_xlat10_4 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat7.xyz = u_xlat3.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_5 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat3.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_3 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat6.xyz = vs_TEXCOORD2.xyz;
        u_xlat6.w = 1.0;
        u_xlat4.x = dot(u_xlat10_4, u_xlat6);
        u_xlat4.y = dot(u_xlat10_5, u_xlat6);
        u_xlat4.z = dot(u_xlat10_3, u_xlat6);
    } else {
        u_xlat3.xyz = vs_TEXCOORD2.xyz;
        u_xlat3.w = 1.0;
        u_xlat4.x = dot(unity_SHAr, u_xlat3);
        u_xlat4.y = dot(unity_SHAg, u_xlat3);
        u_xlat4.z = dot(unity_SHAb, u_xlat3);
    //ENDIF
    }
    u_xlat7.xyz = u_xlat4.xyz + vs_TEXCOORD7.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat8.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat0.x = (-u_xlat0.x) * 0.779083729 + 0.779083729;
    u_xlat8.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat8.xyz;
    u_xlat2.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    u_xlat0.xyz = exp2((-u_xlat0.xyz));
    SV_Target0.xyz = vec3(u_xlat16_1) * u_xlat8.xyz;
    u_xlat3.w = u_xlat2.w;
    SV_Target1 = vec4(u_xlat16_1) * u_xlat3;
    SV_Target2.xyz = vec3(u_xlat16_1) * u_xlat2.xyz;
    u_xlat0.w = 1.0;
    SV_Target3 = vec4(u_xlat16_1) * u_xlat0;
    SV_Target0.w = 1.0;
    SV_Target2.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: UNITY_HDR_ON 
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (336 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 64
  Matrix4x4 unity_WorldToObject at 128
  Matrix4x4 unity_MatrixVP at 192
  Vector4 unity_SHBr at 0
  Vector4 unity_SHBg at 16
  Vector4 unity_SHBb at 32
  Vector4 unity_SHC at 48
  Vector4 _Control_ST at 256
  Vector4 _Splat0_ST at 272
  Vector4 _Splat1_ST at 288
  Vector4 _Splat2_ST at 304
  Vector4 _Splat3_ST at 320
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float3 TEXCOORD7 [[ user(TEXCOORD7) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD3.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat0.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD2.xyz = u_xlat0.xyz;
    output.TEXCOORD4.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat6 = u_xlat0.y * u_xlat0.y;
    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(Globals.unity_SHBr, u_xlat1);
    u_xlat0.y = dot(Globals.unity_SHBg, u_xlat1);
    u_xlat0.z = dot(Globals.unity_SHBb, u_xlat1);
    output.TEXCOORD7.xyz = Globals.unity_SHC.xyz * float3(u_xlat6) + u_xlat0.xyz;
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 1
Set 2D Texture "_Splat0" to slot 1 sampler slot 2
Set 2D Texture "_Splat1" to slot 2 sampler slot 3
Set 2D Texture "_Splat2" to slot 3 sampler slot 4
Set 2D Texture "_Splat3" to slot 4 sampler slot 5
Set 3D Texture "unity_ProbeVolumeSH" to slot 5 sampler slot 0

Constant Buffer "Globals" (192 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Float _Metallic0 at 160
  Float _Metallic1 at 164
  Float _Metallic2 at 168
  Float _Metallic3 at 172
  Float _Smoothness0 at 176
  Float _Smoothness1 at 180
  Float _Smoothness2 at 184
  Float _Smoothness3 at 188
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float3 TEXCOORD7 [[ user(TEXCOORD7) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
    float4 SV_Target1 [[ color(1) ]];
    float4 SV_Target2 [[ color(2) ]];
    float4 SV_Target3 [[ color(3) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_Control [[ sampler (1) ]],
    sampler sampler_Splat0 [[ sampler (2) ]],
    sampler sampler_Splat1 [[ sampler (3) ]],
    sampler sampler_Splat2 [[ sampler (4) ]],
    sampler sampler_Splat3 [[ sampler (5) ]],
    texture2d<float, access::sample > _Control [[ texture (0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture (2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture (3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture (4) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    half4 u_xlat10_3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    bool u_xlatb7;
    float3 u_xlat8;
    float u_xlat14;
    float u_xlat21;
    u_xlat0 = _Control.sample(sampler_Control, input.TEXCOORD4.xy);
    u_xlat1 = dot(u_xlat0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat8.x = u_xlat1 + 0.00100000005;
    u_xlat0 = u_xlat0 / u_xlat8.xxxx;
    u_xlat2 = _Splat0.sample(sampler_Splat0, input.TEXCOORD0.xy);
    u_xlat2 = u_xlat0.xxxx * u_xlat2;
    u_xlat2.w = u_xlat2.w * Globals._Smoothness0;
    u_xlat10_3 = half4(_Splat1.sample(sampler_Splat1, input.TEXCOORD0.zw));
    u_xlat3 = u_xlat0.yyyy * float4(u_xlat10_3);
    u_xlat3.w = u_xlat3.w * Globals._Smoothness1;
    u_xlat2 = u_xlat2 + u_xlat3;
    u_xlat10_3 = half4(_Splat2.sample(sampler_Splat2, input.TEXCOORD1.xy));
    u_xlat3 = u_xlat0.zzzz * float4(u_xlat10_3);
    u_xlat3.w = u_xlat3.w * Globals._Smoothness2;
    u_xlat2 = u_xlat2 + u_xlat3;
    u_xlat10_3 = half4(_Splat3.sample(sampler_Splat3, input.TEXCOORD1.zw));
    u_xlat3 = u_xlat0.wwww * float4(u_xlat10_3);
    u_xlat3.w = u_xlat3.w * Globals._Smoothness3;
    u_xlat2 = u_xlat2 + u_xlat3;
    u_xlat0.x = dot(u_xlat0, float4(Globals._Metallic0, Globals._Metallic1, Globals._Metallic2, Globals._Metallic3));
    u_xlatb7 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb7){
        u_xlatb7 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = input.TEXCOORD3.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD3.xxx + u_xlat8.xyz;
        u_xlat8.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD3.zzz + u_xlat8.xyz;
        u_xlat8.xyz = u_xlat8.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb7)) ? u_xlat8.xyz : input.TEXCOORD3.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat7.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat7.x = u_xlat3.y * 0.25;
        u_xlat14 = Globals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat21 = (-Globals.unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat7.x = max(u_xlat14, u_xlat7.x);
        u_xlat3.x = min(u_xlat21, u_xlat7.x);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat7.xyz = u_xlat3.xzw + float3(0.25, 0.0, 0.0);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat3.xzw + float3(0.5, 0.0, 0.0);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat6.xyz = input.TEXCOORD2.xyz;
        u_xlat6.w = 1.0;
        u_xlat4.x = dot(u_xlat4, u_xlat6);
        u_xlat4.y = dot(u_xlat5, u_xlat6);
        u_xlat4.z = dot(u_xlat3, u_xlat6);
    } else {
        u_xlat3.xyz = input.TEXCOORD2.xyz;
        u_xlat3.w = 1.0;
        u_xlat4.x = dot(Globals.unity_SHAr, u_xlat3);
        u_xlat4.y = dot(Globals.unity_SHAg, u_xlat3);
        u_xlat4.z = dot(Globals.unity_SHAb, u_xlat3);
    }
    u_xlat7.xyz = u_xlat4.xyz + input.TEXCOORD7.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(1.05499995, 1.05499995, 1.05499995) + float3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat8.xyz = u_xlat2.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat8.xyz + float3(0.220916301, 0.220916301, 0.220916301);
    u_xlat0.x = (-u_xlat0.x) * 0.779083729 + 0.779083729;
    u_xlat8.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat8.xyz;
    u_xlat2.xyz = input.TEXCOORD2.xyz * float3(0.5, 0.5, 0.5) + float3(0.5, 0.5, 0.5);
    output.SV_Target0.xyz = float3(u_xlat1) * u_xlat8.xyz;
    u_xlat3.w = u_xlat2.w;
    output.SV_Target1 = float4(u_xlat1) * u_xlat3;
    output.SV_Target2.xyz = float3(u_xlat1) * u_xlat2.xyz;
    u_xlat0.w = 1.0;
    output.SV_Target3 = float4(u_xlat1) * u_xlat0;
    output.SV_Target0.w = 1.0;
    output.SV_Target2.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
out vec4 vs_TEXCOORD6;
out vec3 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat6 = u_xlat0.y * u_xlat0.y;
    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(unity_SHBr, u_xlat1);
    u_xlat0.y = dot(unity_SHBg, u_xlat1);
    u_xlat0.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD7;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
vec4 u_xlat16_0;
vec4 u_xlat10_0;
float u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat10_5;
vec4 u_xlat6;
vec3 u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
float u_xlat16_8;
float u_xlat14;
float u_xlat21;
void main()
{
    u_xlat10_0 = texture(_Control, vs_TEXCOORD4.xy);
    u_xlat16_1 = dot(u_xlat10_0, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_8 = u_xlat16_1 + 0.00100000005;
    u_xlat16_0 = u_xlat10_0 / vec4(u_xlat16_8);
    u_xlat10_2 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat2 = u_xlat16_0.xxxx * u_xlat10_2;
    u_xlat2.w = u_xlat2.w * _Smoothness0;
    u_xlat10_3 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat3 = u_xlat16_0.yyyy * u_xlat10_3;
    u_xlat3.w = u_xlat3.w * _Smoothness1;
    u_xlat2 = u_xlat2 + u_xlat3;
    u_xlat10_3 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat3 = u_xlat16_0.zzzz * u_xlat10_3;
    u_xlat3.w = u_xlat3.w * _Smoothness2;
    u_xlat2 = u_xlat2 + u_xlat3;
    u_xlat10_3 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat3 = u_xlat16_0.wwww * u_xlat10_3;
    u_xlat3.w = u_xlat3.w * _Smoothness3;
    u_xlat2 = u_xlat2 + u_xlat3;
    u_xlat0.x = dot(u_xlat16_0, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlatb7 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb7){
        u_xlatb7 = unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat8.xyz;
        u_xlat8.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat8.xyz;
        u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb7)) ? u_xlat8.xyz : vs_TEXCOORD3.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat7.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat7.x = u_xlat3.y * 0.25;
        u_xlat14 = unity_ProbeVolumeParams.z * 0.5;
        u_xlat21 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat7.x = max(u_xlat14, u_xlat7.x);
        u_xlat3.x = min(u_xlat21, u_xlat7.x);
        u_xlat10_4 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat7.xyz = u_xlat3.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_5 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat3.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_3 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat6.xyz = vs_TEXCOORD2.xyz;
        u_xlat6.w = 1.0;
        u_xlat4.x = dot(u_xlat10_4, u_xlat6);
        u_xlat4.y = dot(u_xlat10_5, u_xlat6);
        u_xlat4.z = dot(u_xlat10_3, u_xlat6);
    } else {
        u_xlat3.xyz = vs_TEXCOORD2.xyz;
        u_xlat3.w = 1.0;
        u_xlat4.x = dot(unity_SHAr, u_xlat3);
        u_xlat4.y = dot(unity_SHAg, u_xlat3);
        u_xlat4.z = dot(unity_SHAb, u_xlat3);
    //ENDIF
    }
    u_xlat7.xyz = u_xlat4.xyz + vs_TEXCOORD7.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat8.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat0.x = (-u_xlat0.x) * 0.779083729 + 0.779083729;
    u_xlat8.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat8.xyz;
    u_xlat2.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.xyz = vec3(u_xlat16_1) * u_xlat8.xyz;
    u_xlat3.w = u_xlat2.w;
    SV_Target1 = vec4(u_xlat16_1) * u_xlat3;
    SV_Target2.xyz = vec3(u_xlat16_1) * u_xlat2.xyz;
    u_xlat0.w = 1.0;
    SV_Target3 = vec4(u_xlat16_1) * u_xlat0;
    SV_Target0.w = 1.0;
    SV_Target2.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: _TERRAIN_NORMAL_MAP 
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (352 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 64
  Matrix4x4 unity_WorldToObject at 128
  Matrix4x4 unity_MatrixVP at 208
  Vector4 unity_SHBr at 0
  Vector4 unity_SHBg at 16
  Vector4 unity_SHBb at 32
  Vector4 unity_SHC at 48
  Vector4 unity_WorldTransformParams at 192
  Vector4 _Control_ST at 272
  Vector4 _Splat0_ST at 288
  Vector4 _Splat1_ST at 304
  Vector4 _Splat2_ST at 320
  Vector4 _Splat3_ST at 336
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float3 TEXCOORD8 [[ user(TEXCOORD8) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    output.TEXCOORD2.w = u_xlat0.x;
    u_xlat0.xw = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat0.xw = input.NORMAL0.yz * float2(1.0, 0.0) + (-u_xlat0.xw);
    u_xlat1.xyz = u_xlat0.www * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    output.TEXCOORD2.x = u_xlat1.z;
    u_xlat2.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * (-Globals.unity_WorldTransformParams.www);
    output.TEXCOORD2.y = u_xlat3.x;
    output.TEXCOORD2.z = u_xlat2.x;
    output.TEXCOORD3.x = u_xlat1.x;
    output.TEXCOORD4.x = u_xlat1.y;
    output.TEXCOORD3.w = u_xlat0.y;
    output.TEXCOORD4.w = u_xlat0.z;
    output.TEXCOORD3.y = u_xlat3.y;
    output.TEXCOORD4.y = u_xlat3.z;
    output.TEXCOORD3.z = u_xlat2.y;
    output.TEXCOORD4.z = u_xlat2.w;
    output.TEXCOORD5.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    output.TEXCOORD7 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = u_xlat2.y * u_xlat2.y;
    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
    u_xlat1 = u_xlat2.ywzx * u_xlat2;
    u_xlat2.x = dot(Globals.unity_SHBr, u_xlat1);
    u_xlat2.y = dot(Globals.unity_SHBg, u_xlat1);
    u_xlat2.z = dot(Globals.unity_SHBb, u_xlat1);
    output.TEXCOORD8.xyz = Globals.unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 1
Set 2D Texture "_Splat0" to slot 1 sampler slot 2
Set 2D Texture "_Splat1" to slot 2 sampler slot 3
Set 2D Texture "_Splat2" to slot 3 sampler slot 4
Set 2D Texture "_Splat3" to slot 4 sampler slot 5
Set 2D Texture "_Normal0" to slot 5 sampler slot 6
Set 2D Texture "_Normal1" to slot 6 sampler slot 7
Set 2D Texture "_Normal2" to slot 7 sampler slot 8
Set 2D Texture "_Normal3" to slot 8 sampler slot 9
Set 3D Texture "unity_ProbeVolumeSH" to slot 9 sampler slot 0

Constant Buffer "Globals" (192 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Float _Metallic0 at 160
  Float _Metallic1 at 164
  Float _Metallic2 at 168
  Float _Metallic3 at 172
  Float _Smoothness0 at 176
  Float _Smoothness1 at 180
  Float _Smoothness2 at 184
  Float _Smoothness3 at 188
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float3 TEXCOORD8 [[ user(TEXCOORD8) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
    float4 SV_Target1 [[ color(1) ]];
    float4 SV_Target2 [[ color(2) ]];
    float4 SV_Target3 [[ color(3) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_Control [[ sampler (1) ]],
    sampler sampler_Splat0 [[ sampler (2) ]],
    sampler sampler_Splat1 [[ sampler (3) ]],
    sampler sampler_Splat2 [[ sampler (4) ]],
    sampler sampler_Splat3 [[ sampler (5) ]],
    sampler sampler_Normal0 [[ sampler (6) ]],
    sampler sampler_Normal1 [[ sampler (7) ]],
    sampler sampler_Normal2 [[ sampler (8) ]],
    sampler sampler_Normal3 [[ sampler (9) ]],
    texture2d<float, access::sample > _Control [[ texture (0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture (2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture (3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture (4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture (5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture (6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture (7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture (8) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (9) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    half4 u_xlat10_3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    bool u_xlatb7;
    float3 u_xlat8;
    float3 u_xlat10;
    float u_xlat14;
    float u_xlat21;
    u_xlat0 = _Control.sample(sampler_Control, input.TEXCOORD5.xy);
    u_xlat1 = dot(u_xlat0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat8.x = u_xlat1 + 0.00100000005;
    u_xlat0 = u_xlat0 / u_xlat8.xxxx;
    u_xlat2 = _Splat0.sample(sampler_Splat0, input.TEXCOORD0.xy);
    u_xlat2 = u_xlat0.xxxx * u_xlat2;
    u_xlat2.w = u_xlat2.w * Globals._Smoothness0;
    u_xlat10_3 = half4(_Splat1.sample(sampler_Splat1, input.TEXCOORD0.zw));
    u_xlat3 = u_xlat0.yyyy * float4(u_xlat10_3);
    u_xlat3.w = u_xlat3.w * Globals._Smoothness1;
    u_xlat2 = u_xlat2 + u_xlat3;
    u_xlat10_3 = half4(_Splat2.sample(sampler_Splat2, input.TEXCOORD1.xy));
    u_xlat3 = u_xlat0.zzzz * float4(u_xlat10_3);
    u_xlat3.w = u_xlat3.w * Globals._Smoothness2;
    u_xlat2 = u_xlat2 + u_xlat3;
    u_xlat10_3 = half4(_Splat3.sample(sampler_Splat3, input.TEXCOORD1.zw));
    u_xlat3 = u_xlat0.wwww * float4(u_xlat10_3);
    u_xlat3.w = u_xlat3.w * Globals._Smoothness3;
    u_xlat2 = u_xlat2 + u_xlat3;
    u_xlat8.xy = _Normal0.sample(sampler_Normal0, input.TEXCOORD0.xy).yw;
    u_xlat10_3.xy = half2(_Normal1.sample(sampler_Normal1, input.TEXCOORD0.zw).yw);
    u_xlat3.xy = u_xlat0.yy * float2(u_xlat10_3.yx);
    u_xlat8.xy = u_xlat0.xx * u_xlat8.yx + u_xlat3.xy;
    u_xlat10_3.xy = half2(_Normal2.sample(sampler_Normal2, input.TEXCOORD1.xy).yw);
    u_xlat8.xy = u_xlat0.zz * float2(u_xlat10_3.yx) + u_xlat8.xy;
    u_xlat10_3.xy = half2(_Normal3.sample(sampler_Normal3, input.TEXCOORD1.zw).yw);
    u_xlat8.xy = u_xlat0.ww * float2(u_xlat10_3.yx) + u_xlat8.xy;
    u_xlat3.xy = u_xlat8.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
    u_xlat8.x = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat3.z = sqrt(u_xlat8.x);
    u_xlat0.x = dot(u_xlat0, float4(Globals._Metallic0, Globals._Metallic1, Globals._Metallic2, Globals._Metallic3));
    u_xlat4.x = dot(input.TEXCOORD2.xyz, u_xlat3.xyz);
    u_xlat4.y = dot(input.TEXCOORD3.xyz, u_xlat3.xyz);
    u_xlat4.z = dot(input.TEXCOORD4.xyz, u_xlat3.xyz);
    u_xlatb7 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb7){
        u_xlatb7 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = input.TEXCOORD3.www * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD2.www + u_xlat8.xyz;
        u_xlat8.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD4.www + u_xlat8.xyz;
        u_xlat8.xyz = u_xlat8.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat10.x = input.TEXCOORD2.w;
        u_xlat10.y = input.TEXCOORD3.w;
        u_xlat10.z = input.TEXCOORD4.w;
        u_xlat7.xyz = (bool(u_xlatb7)) ? u_xlat8.xyz : u_xlat10.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat7.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat7.x = u_xlat3.y * 0.25;
        u_xlat14 = Globals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat21 = (-Globals.unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat7.x = max(u_xlat14, u_xlat7.x);
        u_xlat3.x = min(u_xlat21, u_xlat7.x);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat7.xyz = u_xlat3.xzw + float3(0.25, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat3.xzw + float3(0.5, 0.0, 0.0);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat4.w = 1.0;
        u_xlat5.x = dot(u_xlat5, u_xlat4);
        u_xlat5.y = dot(u_xlat6, u_xlat4);
        u_xlat5.z = dot(u_xlat3, u_xlat4);
    } else {
        u_xlat4.w = 1.0;
        u_xlat5.x = dot(Globals.unity_SHAr, u_xlat4);
        u_xlat5.y = dot(Globals.unity_SHAg, u_xlat4);
        u_xlat5.z = dot(Globals.unity_SHAb, u_xlat4);
    }
    u_xlat7.xyz = u_xlat5.xyz + input.TEXCOORD8.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(1.05499995, 1.05499995, 1.05499995) + float3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat8.xyz = u_xlat2.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat8.xyz + float3(0.220916301, 0.220916301, 0.220916301);
    u_xlat0.x = (-u_xlat0.x) * 0.779083729 + 0.779083729;
    u_xlat8.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat8.xyz;
    u_xlat2.xyz = u_xlat4.xyz * float3(0.5, 0.5, 0.5) + float3(0.5, 0.5, 0.5);
    u_xlat0.xyz = exp2((-u_xlat0.xyz));
    output.SV_Target0.xyz = float3(u_xlat1) * u_xlat8.xyz;
    u_xlat3.w = u_xlat2.w;
    output.SV_Target1 = float4(u_xlat1) * u_xlat3;
    output.SV_Target2.xyz = float3(u_xlat1) * u_xlat2.xyz;
    u_xlat0.w = 1.0;
    output.SV_Target3 = float4(u_xlat1) * u_xlat0;
    output.SV_Target0.w = 1.0;
    output.SV_Target2.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec2 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
out vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
    u_xlat1.xyz = u_xlat0.www * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD2.x = u_xlat1.z;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD2.y = u_xlat3.x;
    vs_TEXCOORD2.z = u_xlat2.x;
    vs_TEXCOORD3.x = u_xlat1.x;
    vs_TEXCOORD4.x = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat3.y;
    vs_TEXCOORD4.y = u_xlat3.z;
    vs_TEXCOORD3.z = u_xlat2.y;
    vs_TEXCOORD4.z = u_xlat2.w;
    vs_TEXCOORD5.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = u_xlat2.y * u_xlat2.y;
    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
    u_xlat1 = u_xlat2.ywzx * u_xlat2;
    u_xlat2.x = dot(unity_SHBr, u_xlat1);
    u_xlat2.y = dot(unity_SHBg, u_xlat1);
    u_xlat2.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD8.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  sampler2D _Normal0;
uniform  sampler2D _Normal1;
uniform  sampler2D _Normal2;
uniform  sampler2D _Normal3;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec2 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
vec4 u_xlat16_0;
vec4 u_xlat10_0;
float u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec3 u_xlat5;
vec4 u_xlat10_5;
vec4 u_xlat10_6;
vec3 u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
vec2 u_xlat16_8;
vec3 u_xlat10;
float u_xlat14;
float u_xlat21;
void main()
{
    u_xlat10_0 = texture(_Control, vs_TEXCOORD5.xy);
    u_xlat16_1 = dot(u_xlat10_0, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_8.x = u_xlat16_1 + 0.00100000005;
    u_xlat16_0 = u_xlat10_0 / u_xlat16_8.xxxx;
    u_xlat10_2 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat2 = u_xlat16_0.xxxx * u_xlat10_2;
    u_xlat2.w = u_xlat2.w * _Smoothness0;
    u_xlat10_3 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat3 = u_xlat16_0.yyyy * u_xlat10_3;
    u_xlat3.w = u_xlat3.w * _Smoothness1;
    u_xlat2 = u_xlat2 + u_xlat3;
    u_xlat10_3 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat3 = u_xlat16_0.zzzz * u_xlat10_3;
    u_xlat3.w = u_xlat3.w * _Smoothness2;
    u_xlat2 = u_xlat2 + u_xlat3;
    u_xlat10_3 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat3 = u_xlat16_0.wwww * u_xlat10_3;
    u_xlat3.w = u_xlat3.w * _Smoothness3;
    u_xlat2 = u_xlat2 + u_xlat3;
    u_xlat10_3 = texture(_Normal0, vs_TEXCOORD0.xy);
    u_xlat10_4 = texture(_Normal1, vs_TEXCOORD0.zw);
    u_xlat16_8.xy = u_xlat16_0.yy * u_xlat10_4.wy;
    u_xlat16_8.xy = u_xlat16_0.xx * u_xlat10_3.wy + u_xlat16_8.xy;
    u_xlat10_3 = texture(_Normal2, vs_TEXCOORD1.xy);
    u_xlat16_8.xy = u_xlat16_0.zz * u_xlat10_3.wy + u_xlat16_8.xy;
    u_xlat10_3 = texture(_Normal3, vs_TEXCOORD1.zw);
    u_xlat16_8.xy = u_xlat16_0.ww * u_xlat10_3.wy + u_xlat16_8.xy;
    u_xlat3.xy = u_xlat16_8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat8.x = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat3.z = sqrt(u_xlat8.x);
    u_xlat0.x = dot(u_xlat16_0, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat3.xyz);
    u_xlatb7 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb7){
        u_xlatb7 = unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = vs_TEXCOORD3.www * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat8.xyz;
        u_xlat8.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat8.xyz;
        u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat10.x = vs_TEXCOORD2.w;
        u_xlat10.y = vs_TEXCOORD3.w;
        u_xlat10.z = vs_TEXCOORD4.w;
        u_xlat7.xyz = (bool(u_xlatb7)) ? u_xlat8.xyz : u_xlat10.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat7.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat7.x = u_xlat3.y * 0.25;
        u_xlat14 = unity_ProbeVolumeParams.z * 0.5;
        u_xlat21 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat7.x = max(u_xlat14, u_xlat7.x);
        u_xlat3.x = min(u_xlat21, u_xlat7.x);
        u_xlat10_5 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat7.xyz = u_xlat3.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_6 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat3.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_3 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat4.w = 1.0;
        u_xlat5.x = dot(u_xlat10_5, u_xlat4);
        u_xlat5.y = dot(u_xlat10_6, u_xlat4);
        u_xlat5.z = dot(u_xlat10_3, u_xlat4);
    } else {
        u_xlat4.w = 1.0;
        u_xlat5.x = dot(unity_SHAr, u_xlat4);
        u_xlat5.y = dot(unity_SHAg, u_xlat4);
        u_xlat5.z = dot(unity_SHAb, u_xlat4);
    //ENDIF
    }
    u_xlat7.xyz = u_xlat5.xyz + vs_TEXCOORD8.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat8.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat0.x = (-u_xlat0.x) * 0.779083729 + 0.779083729;
    u_xlat8.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat8.xyz;
    u_xlat2.xyz = u_xlat4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    u_xlat0.xyz = exp2((-u_xlat0.xyz));
    SV_Target0.xyz = vec3(u_xlat16_1) * u_xlat8.xyz;
    u_xlat3.w = u_xlat2.w;
    SV_Target1 = vec4(u_xlat16_1) * u_xlat3;
    SV_Target2.xyz = vec3(u_xlat16_1) * u_xlat2.xyz;
    u_xlat0.w = 1.0;
    SV_Target3 = vec4(u_xlat16_1) * u_xlat0;
    SV_Target0.w = 1.0;
    SV_Target2.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Keywords set in this variant: UNITY_HDR_ON _TERRAIN_NORMAL_MAP 
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (352 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 64
  Matrix4x4 unity_WorldToObject at 128
  Matrix4x4 unity_MatrixVP at 208
  Vector4 unity_SHBr at 0
  Vector4 unity_SHBg at 16
  Vector4 unity_SHBb at 32
  Vector4 unity_SHC at 48
  Vector4 unity_WorldTransformParams at 192
  Vector4 _Control_ST at 272
  Vector4 _Splat0_ST at 288
  Vector4 _Splat1_ST at 304
  Vector4 _Splat2_ST at 320
  Vector4 _Splat3_ST at 336
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _Control_ST;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float3 TEXCOORD8 [[ user(TEXCOORD8) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * input.POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._Splat0_ST.xy + Globals._Splat0_ST.zw;
    output.TEXCOORD0.zw = input.TEXCOORD0.xy * Globals._Splat1_ST.xy + Globals._Splat1_ST.zw;
    output.TEXCOORD1.xy = input.TEXCOORD0.xy * Globals._Splat2_ST.xy + Globals._Splat2_ST.zw;
    output.TEXCOORD1.zw = input.TEXCOORD0.xy * Globals._Splat3_ST.xy + Globals._Splat3_ST.zw;
    output.TEXCOORD2.w = u_xlat0.x;
    u_xlat0.xw = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat0.xw = input.NORMAL0.yz * float2(1.0, 0.0) + (-u_xlat0.xw);
    u_xlat1.xyz = u_xlat0.www * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    output.TEXCOORD2.x = u_xlat1.z;
    u_xlat2.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * (-Globals.unity_WorldTransformParams.www);
    output.TEXCOORD2.y = u_xlat3.x;
    output.TEXCOORD2.z = u_xlat2.x;
    output.TEXCOORD3.x = u_xlat1.x;
    output.TEXCOORD4.x = u_xlat1.y;
    output.TEXCOORD3.w = u_xlat0.y;
    output.TEXCOORD4.w = u_xlat0.z;
    output.TEXCOORD3.y = u_xlat3.y;
    output.TEXCOORD4.y = u_xlat3.z;
    output.TEXCOORD3.z = u_xlat2.y;
    output.TEXCOORD4.z = u_xlat2.w;
    output.TEXCOORD5.xy = input.TEXCOORD0.xy * Globals._Control_ST.xy + Globals._Control_ST.zw;
    output.TEXCOORD7 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = u_xlat2.y * u_xlat2.y;
    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
    u_xlat1 = u_xlat2.ywzx * u_xlat2;
    u_xlat2.x = dot(Globals.unity_SHBr, u_xlat1);
    u_xlat2.y = dot(Globals.unity_SHBg, u_xlat1);
    u_xlat2.z = dot(Globals.unity_SHBb, u_xlat1);
    output.TEXCOORD8.xyz = Globals.unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 1
Set 2D Texture "_Splat0" to slot 1 sampler slot 2
Set 2D Texture "_Splat1" to slot 2 sampler slot 3
Set 2D Texture "_Splat2" to slot 3 sampler slot 4
Set 2D Texture "_Splat3" to slot 4 sampler slot 5
Set 2D Texture "_Normal0" to slot 5 sampler slot 6
Set 2D Texture "_Normal1" to slot 6 sampler slot 7
Set 2D Texture "_Normal2" to slot 7 sampler slot 8
Set 2D Texture "_Normal3" to slot 8 sampler slot 9
Set 3D Texture "unity_ProbeVolumeSH" to slot 9 sampler slot 0

Constant Buffer "Globals" (192 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Float _Metallic0 at 160
  Float _Metallic1 at 164
  Float _Metallic2 at 168
  Float _Metallic3 at 172
  Float _Smoothness0 at 176
  Float _Smoothness1 at 180
  Float _Smoothness2 at 184
  Float _Smoothness3 at 188
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
    float3 TEXCOORD8 [[ user(TEXCOORD8) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
    float4 SV_Target1 [[ color(1) ]];
    float4 SV_Target2 [[ color(2) ]];
    float4 SV_Target3 [[ color(3) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_Control [[ sampler (1) ]],
    sampler sampler_Splat0 [[ sampler (2) ]],
    sampler sampler_Splat1 [[ sampler (3) ]],
    sampler sampler_Splat2 [[ sampler (4) ]],
    sampler sampler_Splat3 [[ sampler (5) ]],
    sampler sampler_Normal0 [[ sampler (6) ]],
    sampler sampler_Normal1 [[ sampler (7) ]],
    sampler sampler_Normal2 [[ sampler (8) ]],
    sampler sampler_Normal3 [[ sampler (9) ]],
    texture2d<float, access::sample > _Control [[ texture (0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture (2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture (3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture (4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture (5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture (6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture (7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture (8) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (9) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    half4 u_xlat10_3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    bool u_xlatb7;
    float3 u_xlat8;
    float3 u_xlat10;
    float u_xlat14;
    float u_xlat21;
    u_xlat0 = _Control.sample(sampler_Control, input.TEXCOORD5.xy);
    u_xlat1 = dot(u_xlat0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat8.x = u_xlat1 + 0.00100000005;
    u_xlat0 = u_xlat0 / u_xlat8.xxxx;
    u_xlat2 = _Splat0.sample(sampler_Splat0, input.TEXCOORD0.xy);
    u_xlat2 = u_xlat0.xxxx * u_xlat2;
    u_xlat2.w = u_xlat2.w * Globals._Smoothness0;
    u_xlat10_3 = half4(_Splat1.sample(sampler_Splat1, input.TEXCOORD0.zw));
    u_xlat3 = u_xlat0.yyyy * float4(u_xlat10_3);
    u_xlat3.w = u_xlat3.w * Globals._Smoothness1;
    u_xlat2 = u_xlat2 + u_xlat3;
    u_xlat10_3 = half4(_Splat2.sample(sampler_Splat2, input.TEXCOORD1.xy));
    u_xlat3 = u_xlat0.zzzz * float4(u_xlat10_3);
    u_xlat3.w = u_xlat3.w * Globals._Smoothness2;
    u_xlat2 = u_xlat2 + u_xlat3;
    u_xlat10_3 = half4(_Splat3.sample(sampler_Splat3, input.TEXCOORD1.zw));
    u_xlat3 = u_xlat0.wwww * float4(u_xlat10_3);
    u_xlat3.w = u_xlat3.w * Globals._Smoothness3;
    u_xlat2 = u_xlat2 + u_xlat3;
    u_xlat8.xy = _Normal0.sample(sampler_Normal0, input.TEXCOORD0.xy).yw;
    u_xlat10_3.xy = half2(_Normal1.sample(sampler_Normal1, input.TEXCOORD0.zw).yw);
    u_xlat3.xy = u_xlat0.yy * float2(u_xlat10_3.yx);
    u_xlat8.xy = u_xlat0.xx * u_xlat8.yx + u_xlat3.xy;
    u_xlat10_3.xy = half2(_Normal2.sample(sampler_Normal2, input.TEXCOORD1.xy).yw);
    u_xlat8.xy = u_xlat0.zz * float2(u_xlat10_3.yx) + u_xlat8.xy;
    u_xlat10_3.xy = half2(_Normal3.sample(sampler_Normal3, input.TEXCOORD1.zw).yw);
    u_xlat8.xy = u_xlat0.ww * float2(u_xlat10_3.yx) + u_xlat8.xy;
    u_xlat3.xy = u_xlat8.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
    u_xlat8.x = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat3.z = sqrt(u_xlat8.x);
    u_xlat0.x = dot(u_xlat0, float4(Globals._Metallic0, Globals._Metallic1, Globals._Metallic2, Globals._Metallic3));
    u_xlat4.x = dot(input.TEXCOORD2.xyz, u_xlat3.xyz);
    u_xlat4.y = dot(input.TEXCOORD3.xyz, u_xlat3.xyz);
    u_xlat4.z = dot(input.TEXCOORD4.xyz, u_xlat3.xyz);
    u_xlatb7 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb7){
        u_xlatb7 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = input.TEXCOORD3.www * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * input.TEXCOORD2.www + u_xlat8.xyz;
        u_xlat8.xyz = Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * input.TEXCOORD4.www + u_xlat8.xyz;
        u_xlat8.xyz = u_xlat8.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat10.x = input.TEXCOORD2.w;
        u_xlat10.y = input.TEXCOORD3.w;
        u_xlat10.z = input.TEXCOORD4.w;
        u_xlat7.xyz = (bool(u_xlatb7)) ? u_xlat8.xyz : u_xlat10.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat7.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat7.x = u_xlat3.y * 0.25;
        u_xlat14 = Globals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat21 = (-Globals.unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat7.x = max(u_xlat14, u_xlat7.x);
        u_xlat3.x = min(u_xlat21, u_xlat7.x);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat7.xyz = u_xlat3.xzw + float3(0.25, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat3.xzw + float3(0.5, 0.0, 0.0);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat4.w = 1.0;
        u_xlat5.x = dot(u_xlat5, u_xlat4);
        u_xlat5.y = dot(u_xlat6, u_xlat4);
        u_xlat5.z = dot(u_xlat3, u_xlat4);
    } else {
        u_xlat4.w = 1.0;
        u_xlat5.x = dot(Globals.unity_SHAr, u_xlat4);
        u_xlat5.y = dot(Globals.unity_SHAg, u_xlat4);
        u_xlat5.z = dot(Globals.unity_SHAb, u_xlat4);
    }
    u_xlat7.xyz = u_xlat5.xyz + input.TEXCOORD8.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(1.05499995, 1.05499995, 1.05499995) + float3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat8.xyz = u_xlat2.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat8.xyz + float3(0.220916301, 0.220916301, 0.220916301);
    u_xlat0.x = (-u_xlat0.x) * 0.779083729 + 0.779083729;
    u_xlat8.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat8.xyz;
    u_xlat2.xyz = u_xlat4.xyz * float3(0.5, 0.5, 0.5) + float3(0.5, 0.5, 0.5);
    output.SV_Target0.xyz = float3(u_xlat1) * u_xlat8.xyz;
    u_xlat3.w = u_xlat2.w;
    output.SV_Target1 = float4(u_xlat1) * u_xlat3;
    output.SV_Target2.xyz = float3(u_xlat1) * u_xlat2.xyz;
    u_xlat0.w = 1.0;
    output.SV_Target3 = float4(u_xlat1) * u_xlat0;
    output.SV_Target0.w = 1.0;
    output.SV_Target2.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Control_ST;
uniform 	vec4 _Splat0_ST;
uniform 	vec4 _Splat1_ST;
uniform 	vec4 _Splat2_ST;
uniform 	vec4 _Splat3_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec2 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
out vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
    u_xlat1.xyz = u_xlat0.www * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD2.x = u_xlat1.z;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
    vs_TEXCOORD2.y = u_xlat3.x;
    vs_TEXCOORD2.z = u_xlat2.x;
    vs_TEXCOORD3.x = u_xlat1.x;
    vs_TEXCOORD4.x = u_xlat1.y;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat3.y;
    vs_TEXCOORD4.y = u_xlat3.z;
    vs_TEXCOORD3.z = u_xlat2.y;
    vs_TEXCOORD4.z = u_xlat2.w;
    vs_TEXCOORD5.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = u_xlat2.y * u_xlat2.y;
    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
    u_xlat1 = u_xlat2.ywzx * u_xlat2;
    u_xlat2.x = dot(unity_SHBr, u_xlat1);
    u_xlat2.y = dot(unity_SHBg, u_xlat1);
    u_xlat2.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD8.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	float _Metallic0;
uniform 	float _Metallic1;
uniform 	float _Metallic2;
uniform 	float _Metallic3;
uniform 	float _Smoothness0;
uniform 	float _Smoothness1;
uniform 	float _Smoothness2;
uniform 	float _Smoothness3;
uniform  sampler2D _Control;
uniform  sampler2D _Splat0;
uniform  sampler2D _Splat1;
uniform  sampler2D _Splat2;
uniform  sampler2D _Splat3;
uniform  sampler2D _Normal0;
uniform  sampler2D _Normal1;
uniform  sampler2D _Normal2;
uniform  sampler2D _Normal3;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec2 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
vec4 u_xlat16_0;
vec4 u_xlat10_0;
float u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec3 u_xlat5;
vec4 u_xlat10_5;
vec4 u_xlat10_6;
vec3 u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
vec2 u_xlat16_8;
vec3 u_xlat10;
float u_xlat14;
float u_xlat21;
void main()
{
    u_xlat10_0 = texture(_Control, vs_TEXCOORD5.xy);
    u_xlat16_1 = dot(u_xlat10_0, vec4(1.0, 1.0, 1.0, 1.0));
    u_xlat16_8.x = u_xlat16_1 + 0.00100000005;
    u_xlat16_0 = u_xlat10_0 / u_xlat16_8.xxxx;
    u_xlat10_2 = texture(_Splat0, vs_TEXCOORD0.xy);
    u_xlat2 = u_xlat16_0.xxxx * u_xlat10_2;
    u_xlat2.w = u_xlat2.w * _Smoothness0;
    u_xlat10_3 = texture(_Splat1, vs_TEXCOORD0.zw);
    u_xlat3 = u_xlat16_0.yyyy * u_xlat10_3;
    u_xlat3.w = u_xlat3.w * _Smoothness1;
    u_xlat2 = u_xlat2 + u_xlat3;
    u_xlat10_3 = texture(_Splat2, vs_TEXCOORD1.xy);
    u_xlat3 = u_xlat16_0.zzzz * u_xlat10_3;
    u_xlat3.w = u_xlat3.w * _Smoothness2;
    u_xlat2 = u_xlat2 + u_xlat3;
    u_xlat10_3 = texture(_Splat3, vs_TEXCOORD1.zw);
    u_xlat3 = u_xlat16_0.wwww * u_xlat10_3;
    u_xlat3.w = u_xlat3.w * _Smoothness3;
    u_xlat2 = u_xlat2 + u_xlat3;
    u_xlat10_3 = texture(_Normal0, vs_TEXCOORD0.xy);
    u_xlat10_4 = texture(_Normal1, vs_TEXCOORD0.zw);
    u_xlat16_8.xy = u_xlat16_0.yy * u_xlat10_4.wy;
    u_xlat16_8.xy = u_xlat16_0.xx * u_xlat10_3.wy + u_xlat16_8.xy;
    u_xlat10_3 = texture(_Normal2, vs_TEXCOORD1.xy);
    u_xlat16_8.xy = u_xlat16_0.zz * u_xlat10_3.wy + u_xlat16_8.xy;
    u_xlat10_3 = texture(_Normal3, vs_TEXCOORD1.zw);
    u_xlat16_8.xy = u_xlat16_0.ww * u_xlat10_3.wy + u_xlat16_8.xy;
    u_xlat3.xy = u_xlat16_8.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat8.x = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat3.z = sqrt(u_xlat8.x);
    u_xlat0.x = dot(u_xlat16_0, vec4(_Metallic0, _Metallic1, _Metallic2, _Metallic3));
    u_xlat4.x = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
    u_xlat4.y = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
    u_xlat4.z = dot(vs_TEXCOORD4.xyz, u_xlat3.xyz);
    u_xlatb7 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb7){
        u_xlatb7 = unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = vs_TEXCOORD3.www * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat8.xyz;
        u_xlat8.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat8.xyz;
        u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat10.x = vs_TEXCOORD2.w;
        u_xlat10.y = vs_TEXCOORD3.w;
        u_xlat10.z = vs_TEXCOORD4.w;
        u_xlat7.xyz = (bool(u_xlatb7)) ? u_xlat8.xyz : u_xlat10.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat7.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat7.x = u_xlat3.y * 0.25;
        u_xlat14 = unity_ProbeVolumeParams.z * 0.5;
        u_xlat21 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat7.x = max(u_xlat14, u_xlat7.x);
        u_xlat3.x = min(u_xlat21, u_xlat7.x);
        u_xlat10_5 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat7.xyz = u_xlat3.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_6 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat3.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_3 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat4.w = 1.0;
        u_xlat5.x = dot(u_xlat10_5, u_xlat4);
        u_xlat5.y = dot(u_xlat10_6, u_xlat4);
        u_xlat5.z = dot(u_xlat10_3, u_xlat4);
    } else {
        u_xlat4.w = 1.0;
        u_xlat5.x = dot(unity_SHAr, u_xlat4);
        u_xlat5.y = dot(unity_SHAg, u_xlat4);
        u_xlat5.z = dot(unity_SHAb, u_xlat4);
    //ENDIF
    }
    u_xlat7.xyz = u_xlat5.xyz + vs_TEXCOORD8.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat8.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat0.x = (-u_xlat0.x) * 0.779083729 + 0.779083729;
    u_xlat8.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat8.xyz;
    u_xlat2.xyz = u_xlat4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.xyz = vec3(u_xlat16_1) * u_xlat8.xyz;
    u_xlat3.w = u_xlat2.w;
    SV_Target1 = vec4(u_xlat16_1) * u_xlat3;
    SV_Target2.xyz = vec3(u_xlat16_1) * u_xlat2.xyz;
    u_xlat0.w = 1.0;
    SV_Target3 = vec4(u_xlat16_1) * u_xlat0;
    SV_Target0.w = 1.0;
    SV_Target2.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

 }
}
Dependency "AddPassShader" = "Hidden/TerrainEngine/Splatmap/Standard-AddPass"
Dependency "BaseMapShader" = "Hidden/TerrainEngine/Splatmap/Standard-Base"
Fallback "Nature/Terrain/Diffuse"
}